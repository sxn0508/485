#ifndef DLT645_H
#define DLT645_H

#include "stm32f37x.h"
#include "BaseDef.h"
#include "Uart.h"
#include "main.h"

/******************************************
程序版本控制参数，根据客户需求进行相应更改 
电压上上限
电压下下限
电压合格上限默认值
电压合格下限默认值
*******************************************/
#ifdef	WORK_VOLTAGE_100V

	#define WORK_VOLTAGE						1000						//电表工作电压：100V
	#define Voltage_MAX_MAX  	 				1100						//电压上上限
	#define Voltage_MIN_MIN   					900							//电压下下限
	#define Voltage_MAX_Default 					1030						//100V供电的电表；2017-10-25
	#define Voltage_MIN_Default  					1000						//电压合格下限默认值，flash未设置时
#else
	#define WORK_VOLTAGE						2200						//电表工作电压:220V
	#define Voltage_MAX_MAX  	 				2800						//电压上上限
	#define Voltage_MIN_MIN   					1200						//电压下下限
	#define Voltage_MAX_Default  				2350						//电压合格上限默认值，flash未设置时 #define Voltage_MIN_Default  				1980						//电压合格下限默认值，flash未设置时
	#define Voltage_MIN_Default  				1980						//电压合格下限默认值，flash未设置时
#endif
/*变压器容量宏定义，决定三相电流和的最大值*/
#ifdef	  TRANSFORMER_CAPACITY_50KVA
	#define CURRENT_LIMIT_VALUE					2700						//50KVA变压器的CT二次侧三相电流和的最大值，扩大1000倍，实际值是2.7A
#endif
#ifdef	  TRANSFORMER_CAPACITY_100KVA
	#define CURRENT_LIMIT_VALUE					5400						//100KVA变压器的CT二次侧三相电流和的最大值，扩大1000倍，实际值是5.4A	
#endif
#ifdef	  TRANSFORMER_CAPACITY_200KVA
	#define CURRENT_LIMIT_VALUE					10800						//200KVA变压器的CT二次侧三相电流和的最大值，扩大1000倍，实际值是10.8A
#endif
#ifdef	  TRANSFORMER_CAPACITY_400KVA
	#define CURRENT_LIMIT_VALUE					21600						//400KVA变压器的CT二次侧三相电流和的最大值，扩大1000倍，实际值是21.6A
#endif

#define Voltage_Change							0xFF						//电压需要修改状态 //STM32内部flash默认值为0XFF stragen_2017-03-15
#define DAYFROZEN_CHANGE						0xFF						//日冻结需要修改状态
#define DAYFROZEN_NOCHANGE						0x00						//屏蔽日冻结修改
#define Voltage_NOChange						0x00						//屏蔽电压修改
#define UCDAYFROZEN_CHANGE_DEFAULE_RATIO		90							//默认日冻结修改比例：90%
#define DLT645_WORDS_DELAY_MAX					20							//645帧内字节间超时时间，单位50毫秒
#define DLT645_FRAMES_DELAY_MAX					25							//645回帧超时时间，单位50毫秒，超时时间为1.25秒

#define CURRENT_MAX_DVALUE						80							//最小电流值不能低于最大电流值的80%

typedef struct current{															//电流结构体
								uint32_t		value;							//电流值,扩大1000倍存储，例如123.456A，按照123456计算
								uint8_t			count;							//电流更新计数
								bool			isminus;						//负数标志位
							 }CURRENT;
extern int				Voltage_MAX;											//电压合格上限
extern int				Voltage_MIN;											//电压合格下限
extern uint8_t			uc645DataDomainLength;									//接收到的帧数据区长度
extern uint8_t			ucApp_Buf_DB2ZD[DATA_BUF_SIZE];							//应用层缓存
extern uint8_t			ucApp_Buf_ZD2DB[DATA_BUF_SIZE];							//应用层缓存
extern uint8_t			ucApp_Buf_INFR[DATA_BUF_SIZE];							//红外口应用缓存
extern uint8_t			Voltage_Change_State;									//电压是否修改标志位
extern CURRENT			Acurrent, Bcurrent, Ccurrent;							//电流值全局变量

#ifdef ENABLE_DAYFROZEN_MODIFY
extern uint8_t		 ucDayfrozen_Modify_Ratio;									//比例的整数位，BCD码
#endif



extern bool blRecvFrame(UCDRV_BUF * ucDrv_Buf,uint8_t *ucdata_buf);
extern void Voltage_Change_Init(void);											//使能电压修改功能，并从flash中读取电压上下限
extern void vDayfrozen_Change_Init(void);										//日冻结修改功能初始化
extern void Set_Voltage_Limit(UINT8 *pucBuffer);								//扩充帧：电压限值设置
extern void Voltage_Modifier(UINT8 *pucBuffer);									//修改电压帧的电压数据
extern void vDayfrozen_Modifier(UINT8 *pucBuffer);								//修改日冻结数据函数
extern void vNowEnergy_Modify(UINT8 *pucBuffer);								//修改日冻结数据函数
extern int  Dayfrozen_Modifier_Method(int dayfrozen);							//日冻结调整策略
extern bool blVoltage_Create(UINT8 *pucBuffer);									//创建电压帧
extern void Get_VChange_State(UINT8 *pucBuffer);								//扩充帧：更改电压修改标志位
extern void Query_Voltage_Limit(UINT8 *pucBuffer);								//扩充帧：电压限值查询
extern void Default_Reset(UINT8 *pucBuffer);									//电压限值回复出厂
extern int  Voltage_Modifier_Method(int Voltage);								//电压合格率调整策略
extern void Estatus_Modify_CurrentEvent(UINT8 *pucBuffer);						//修改电表运行状态字
extern void vCurrentDirect_Modify(uint8_t *pucBuffer);							//修改电流方向
extern void vCurrent_Modify(uint8_t *pucBuffer);								//电流各相差值修改
extern void vCurrent_Count_Clear(void);											//电流计数清零
extern void vCurrent_Limit_Modify(uint8_t * pucBuffer);							//电流上限值修改


static UINT8 GetLowByte(int Voltage);											//将电压个位转化为低字节；
static UINT8 GetHighByte(int Voltage);											//将电压十位转化为高字节；
static bool BCD_Verity(UINT8 LowByte,UINT8 HighByte);							//BCD校验
static STATUS dwCheckFrame(uint8_t *pucBuffer);									//检查帧校验字节和结束字节
static int Get_Voltage(UINT8 LowByte,UINT8 HighByte);							//从数据帧中读取电压值
static int Get_Current(UINT8 LowByte,UINT8 MidByte,UINT8 HighByte);				//从数据帧中读取电流值
static uint16_t Get_Estatus(UINT8 LowByte,UINT8 HighByte);						//从数据帧中读取电表运行状态字
static bool blCurrentSingle_Modify_Method(CURRENT *ref1, CURRENT *ref2, CURRENT *result);//根据前两相电流修改第三相电流
static void vCurrentTriple_Modify_Method(CURRENT *current_max, CURRENT *current_mid, CURRENT *current_min);

#endif
;
