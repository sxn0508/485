ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f37x_dma.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.DMA_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	DMA_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	DMA_DeInit:
  28              	.LFB111:
  29              		.file 1 "../stdperiph/source/stm32f37x_dma.c"
   1:../stdperiph/source/stm32f37x_dma.c **** /**
   2:../stdperiph/source/stm32f37x_dma.c ****   ******************************************************************************
   3:../stdperiph/source/stm32f37x_dma.c ****   * @file    stm32f37x_dma.c
   4:../stdperiph/source/stm32f37x_dma.c ****   * @author  MCD Application Team
   5:../stdperiph/source/stm32f37x_dma.c ****   * @version V1.0.0
   6:../stdperiph/source/stm32f37x_dma.c ****   * @date    20-September-2012
   7:../stdperiph/source/stm32f37x_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../stdperiph/source/stm32f37x_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):
   9:../stdperiph/source/stm32f37x_dma.c ****   *           + Initialization and Configuration
  10:../stdperiph/source/stm32f37x_dma.c ****   *           + Data Counter
  11:../stdperiph/source/stm32f37x_dma.c ****   *           + Interrupts and flags management
  12:../stdperiph/source/stm32f37x_dma.c ****   *
  13:../stdperiph/source/stm32f37x_dma.c ****   *  @verbatim
  14:../stdperiph/source/stm32f37x_dma.c ****   ==============================================================================
  15:../stdperiph/source/stm32f37x_dma.c ****                       ##### How to use this driver #####
  16:../stdperiph/source/stm32f37x_dma.c ****   ==============================================================================
  17:../stdperiph/source/stm32f37x_dma.c ****     [..]
  18:../stdperiph/source/stm32f37x_dma.c ****     (#) Enable The DMA controller clock using 
  19:../stdperiph/source/stm32f37x_dma.c ****         RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE) function for DMA1 or 
  20:../stdperiph/source/stm32f37x_dma.c ****         using RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE) function for DMA2.
  21:../stdperiph/source/stm32f37x_dma.c ****     (#) Enable and configure the peripheral to be connected to the DMA channel
  22:../stdperiph/source/stm32f37x_dma.c ****        (except for internal SRAM / FLASH memories: no initialization is necessary).
  23:../stdperiph/source/stm32f37x_dma.c ****     (#) For a given Channel, program the Source and Destination addresses, 
  24:../stdperiph/source/stm32f37x_dma.c ****         the transfer Direction, the Buffer Size, the Peripheral and Memory 
  25:../stdperiph/source/stm32f37x_dma.c ****         Incrementation mode and Data Size, the Circular or Normal mode, 
  26:../stdperiph/source/stm32f37x_dma.c ****         the channel transfer Priority and the Memory-to-Memory transfer 
  27:../stdperiph/source/stm32f37x_dma.c ****         mode (if needed) using the DMA_Init() function.
  28:../stdperiph/source/stm32f37x_dma.c ****     (#) Enable the NVIC and the corresponding interrupt(s) using the function 
  29:../stdperiph/source/stm32f37x_dma.c ****         DMA_ITConfig() if you need to use DMA interrupts.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 2


  30:../stdperiph/source/stm32f37x_dma.c ****     (#) Enable the DMA channel using the DMA_Cmd() function.
  31:../stdperiph/source/stm32f37x_dma.c ****     (#) Activate the needed channel Request using PPP_DMACmd() function for 
  32:../stdperiph/source/stm32f37x_dma.c ****         any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...) 
  33:../stdperiph/source/stm32f37x_dma.c ****         The function allowing this operation is provided in each PPP peripheral 
  34:../stdperiph/source/stm32f37x_dma.c ****         driver (ie. SPI_DMACmd for SPI peripheral).
  35:../stdperiph/source/stm32f37x_dma.c ****     (#) Optionally, you can configure the number of data to be transferred
  36:../stdperiph/source/stm32f37x_dma.c ****         when the channel is disabled (ie. after each Transfer Complete event
  37:../stdperiph/source/stm32f37x_dma.c ****         or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  38:../stdperiph/source/stm32f37x_dma.c ****         And you can get the number of remaining data to be transferred using 
  39:../stdperiph/source/stm32f37x_dma.c ****         the function DMA_GetCurrDataCounter() at run time (when the DMA channel is
  40:../stdperiph/source/stm32f37x_dma.c ****         enabled and running).
  41:../stdperiph/source/stm32f37x_dma.c ****     (#) To control DMA events you can use one of the following two methods:
  42:../stdperiph/source/stm32f37x_dma.c ****         (##) Check on DMA channel flags using the function DMA_GetFlagStatus().
  43:../stdperiph/source/stm32f37x_dma.c ****         (##) Use DMA interrupts through the function DMA_ITConfig() at initialization
  44:../stdperiph/source/stm32f37x_dma.c ****              phase and DMA_GetITStatus() function into interrupt routines in
  45:../stdperiph/source/stm32f37x_dma.c ****              communication phase.
  46:../stdperiph/source/stm32f37x_dma.c ****              After checking on a flag you should clear it using DMA_ClearFlag()
  47:../stdperiph/source/stm32f37x_dma.c ****              function. And after checking on an interrupt event you should 
  48:../stdperiph/source/stm32f37x_dma.c ****              clear it using DMA_ClearITPendingBit() function.
  49:../stdperiph/source/stm32f37x_dma.c ****     @endverbatim
  50:../stdperiph/source/stm32f37x_dma.c ****   *
  51:../stdperiph/source/stm32f37x_dma.c ****   ******************************************************************************
  52:../stdperiph/source/stm32f37x_dma.c ****   * @attention
  53:../stdperiph/source/stm32f37x_dma.c ****   *
  54:../stdperiph/source/stm32f37x_dma.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  55:../stdperiph/source/stm32f37x_dma.c ****   *
  56:../stdperiph/source/stm32f37x_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:../stdperiph/source/stm32f37x_dma.c ****   * You may not use this file except in compliance with the License.
  58:../stdperiph/source/stm32f37x_dma.c ****   * You may obtain a copy of the License at:
  59:../stdperiph/source/stm32f37x_dma.c ****   *
  60:../stdperiph/source/stm32f37x_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:../stdperiph/source/stm32f37x_dma.c ****   *
  62:../stdperiph/source/stm32f37x_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:../stdperiph/source/stm32f37x_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:../stdperiph/source/stm32f37x_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:../stdperiph/source/stm32f37x_dma.c ****   * See the License for the specific language governing permissions and
  66:../stdperiph/source/stm32f37x_dma.c ****   * limitations under the License.
  67:../stdperiph/source/stm32f37x_dma.c ****   *
  68:../stdperiph/source/stm32f37x_dma.c ****   ******************************************************************************
  69:../stdperiph/source/stm32f37x_dma.c ****   */
  70:../stdperiph/source/stm32f37x_dma.c **** 
  71:../stdperiph/source/stm32f37x_dma.c **** /* Includes ------------------------------------------------------------------*/
  72:../stdperiph/source/stm32f37x_dma.c **** #include "stm32f37x_dma.h"
  73:../stdperiph/source/stm32f37x_dma.c **** 
  74:../stdperiph/source/stm32f37x_dma.c **** /** @addtogroup STM32F37x_StdPeriph_Driver
  75:../stdperiph/source/stm32f37x_dma.c ****   * @{
  76:../stdperiph/source/stm32f37x_dma.c ****   */
  77:../stdperiph/source/stm32f37x_dma.c **** 
  78:../stdperiph/source/stm32f37x_dma.c **** /** @defgroup DMA 
  79:../stdperiph/source/stm32f37x_dma.c ****   * @brief DMA driver modules
  80:../stdperiph/source/stm32f37x_dma.c ****   * @{
  81:../stdperiph/source/stm32f37x_dma.c ****   */
  82:../stdperiph/source/stm32f37x_dma.c **** 
  83:../stdperiph/source/stm32f37x_dma.c **** /* Private typedef -----------------------------------------------------------*/
  84:../stdperiph/source/stm32f37x_dma.c **** /* Private define ------------------------------------------------------------*/
  85:../stdperiph/source/stm32f37x_dma.c **** #define CCR_CLEAR_MASK   ((uint32_t)0xFFFF800F) /* DMA Channel config registers Masks */
  86:../stdperiph/source/stm32f37x_dma.c **** #define FLAG_Mask        ((uint32_t)0x10000000) /* DMA2 FLAG mask                     */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 3


  87:../stdperiph/source/stm32f37x_dma.c **** 
  88:../stdperiph/source/stm32f37x_dma.c **** 
  89:../stdperiph/source/stm32f37x_dma.c **** /* DMA1 Channelx interrupt pending bit masks */
  90:../stdperiph/source/stm32f37x_dma.c **** #define DMA1_CHANNEL1_IT_MASK    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  91:../stdperiph/source/stm32f37x_dma.c **** #define DMA1_CHANNEL2_IT_MASK    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  92:../stdperiph/source/stm32f37x_dma.c **** #define DMA1_CHANNEL3_IT_MASK    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  93:../stdperiph/source/stm32f37x_dma.c **** #define DMA1_CHANNEL4_IT_MASK    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  94:../stdperiph/source/stm32f37x_dma.c **** #define DMA1_CHANNEL5_IT_MASK    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  95:../stdperiph/source/stm32f37x_dma.c **** #define DMA1_CHANNEL6_IT_MASK    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR
  96:../stdperiph/source/stm32f37x_dma.c **** #define DMA1_CHANNEL7_IT_MASK    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR
  97:../stdperiph/source/stm32f37x_dma.c **** 
  98:../stdperiph/source/stm32f37x_dma.c **** /* DMA2 Channelx interrupt pending bit masks */
  99:../stdperiph/source/stm32f37x_dma.c **** #define DMA2_CHANNEL1_IT_MASK    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
 100:../stdperiph/source/stm32f37x_dma.c **** #define DMA2_CHANNEL2_IT_MASK    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
 101:../stdperiph/source/stm32f37x_dma.c **** #define DMA2_CHANNEL3_IT_MASK    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
 102:../stdperiph/source/stm32f37x_dma.c **** #define DMA2_CHANNEL4_IT_MASK    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
 103:../stdperiph/source/stm32f37x_dma.c **** #define DMA2_CHANNEL5_IT_MASK    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
 104:../stdperiph/source/stm32f37x_dma.c **** 
 105:../stdperiph/source/stm32f37x_dma.c **** /* Private macro -------------------------------------------------------------*/
 106:../stdperiph/source/stm32f37x_dma.c **** /* Private variables ---------------------------------------------------------*/
 107:../stdperiph/source/stm32f37x_dma.c **** /* Private function prototypes -----------------------------------------------*/
 108:../stdperiph/source/stm32f37x_dma.c **** /* Private functions ---------------------------------------------------------*/
 109:../stdperiph/source/stm32f37x_dma.c **** 
 110:../stdperiph/source/stm32f37x_dma.c **** /** @defgroup DMA_Private_Functions 
 111:../stdperiph/source/stm32f37x_dma.c ****   * @{
 112:../stdperiph/source/stm32f37x_dma.c ****   */
 113:../stdperiph/source/stm32f37x_dma.c **** 
 114:../stdperiph/source/stm32f37x_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 115:../stdperiph/source/stm32f37x_dma.c ****  *  @brief   Initialization and Configuration functions
 116:../stdperiph/source/stm32f37x_dma.c ****  *
 117:../stdperiph/source/stm32f37x_dma.c **** @verbatim   
 118:../stdperiph/source/stm32f37x_dma.c ****  ===============================================================================
 119:../stdperiph/source/stm32f37x_dma.c ****             ##### Initialization and Configuration functions #####
 120:../stdperiph/source/stm32f37x_dma.c ****  ===============================================================================
 121:../stdperiph/source/stm32f37x_dma.c ****     [..] This subsection provides functions allowing to initialize the DMA channel 
 122:../stdperiph/source/stm32f37x_dma.c ****          source and destination addresses, incrementation and data sizes, transfer 
 123:../stdperiph/source/stm32f37x_dma.c ****          direction, buffer size, circular/normal mode selection, memory-to-memory 
 124:../stdperiph/source/stm32f37x_dma.c ****          mode selection and channel priority value.
 125:../stdperiph/source/stm32f37x_dma.c ****     [..] The DMA_Init() function follows the DMA configuration procedures as described 
 126:../stdperiph/source/stm32f37x_dma.c ****          in reference manual (RM0313).
 127:../stdperiph/source/stm32f37x_dma.c **** @endverbatim
 128:../stdperiph/source/stm32f37x_dma.c ****   * @{
 129:../stdperiph/source/stm32f37x_dma.c ****   */
 130:../stdperiph/source/stm32f37x_dma.c **** 
 131:../stdperiph/source/stm32f37x_dma.c **** /**
 132:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Deinitializes the DMAy Channelx registers to their default reset
 133:../stdperiph/source/stm32f37x_dma.c ****   *         values.
 134:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 135:../stdperiph/source/stm32f37x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 136:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 137:../stdperiph/source/stm32f37x_dma.c ****   */
 138:../stdperiph/source/stm32f37x_dma.c **** void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
 139:../stdperiph/source/stm32f37x_dma.c **** {
  30              		.loc 1 139 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 4


  34              		@ link register save eliminated.
  35              	.LVL0:
 140:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 141:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 142:../stdperiph/source/stm32f37x_dma.c **** 
 143:../stdperiph/source/stm32f37x_dma.c ****   /* Disable the selected DMAy Channelx */
 144:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  36              		.loc 1 144 0
  37 0000 0368     		ldr	r3, [r0]
  38 0002 23F00103 		bic	r3, r3, #1
  39 0006 1B04     		lsls	r3, r3, #16
  40 0008 1B0C     		lsrs	r3, r3, #16
  41 000a 0360     		str	r3, [r0]
 145:../stdperiph/source/stm32f37x_dma.c **** 
 146:../stdperiph/source/stm32f37x_dma.c ****   /* Reset DMAy Channelx control register */
 147:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CCR  = 0;
  42              		.loc 1 147 0
  43 000c 0023     		movs	r3, #0
  44 000e 0360     		str	r3, [r0]
 148:../stdperiph/source/stm32f37x_dma.c **** 
 149:../stdperiph/source/stm32f37x_dma.c ****   /* Reset DMAy Channelx remaining bytes register */
 150:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CNDTR = 0;
  45              		.loc 1 150 0
  46 0010 4360     		str	r3, [r0, #4]
 151:../stdperiph/source/stm32f37x_dma.c **** 
 152:../stdperiph/source/stm32f37x_dma.c ****   /* Reset DMAy Channelx peripheral address register */
 153:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CPAR  = 0;
  47              		.loc 1 153 0
  48 0012 8360     		str	r3, [r0, #8]
 154:../stdperiph/source/stm32f37x_dma.c **** 
 155:../stdperiph/source/stm32f37x_dma.c ****   /* Reset DMAy Channelx memory address register */
 156:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CMAR = 0;
  49              		.loc 1 156 0
  50 0014 C360     		str	r3, [r0, #12]
 157:../stdperiph/source/stm32f37x_dma.c **** 
 158:../stdperiph/source/stm32f37x_dma.c ****   if (DMAy_Channelx == DMA1_Channel1)
  51              		.loc 1 158 0
  52 0016 364B     		ldr	r3, .L14
  53 0018 9842     		cmp	r0, r3
  54 001a 05D1     		bne	.L2
 159:../stdperiph/source/stm32f37x_dma.c ****   {
 160:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel1 */
 161:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  55              		.loc 1 161 0
  56 001c 354A     		ldr	r2, .L14+4
  57 001e 5368     		ldr	r3, [r2, #4]
  58 0020 43F00F03 		orr	r3, r3, #15
  59 0024 5360     		str	r3, [r2, #4]
  60 0026 7047     		bx	lr
  61              	.L2:
 162:../stdperiph/source/stm32f37x_dma.c ****   }
 163:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel2)
  62              		.loc 1 163 0
  63 0028 334B     		ldr	r3, .L14+8
  64 002a 9842     		cmp	r0, r3
  65 002c 05D1     		bne	.L4
 164:../stdperiph/source/stm32f37x_dma.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 5


 165:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel2 */
 166:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  66              		.loc 1 166 0
  67 002e 314A     		ldr	r2, .L14+4
  68 0030 5368     		ldr	r3, [r2, #4]
  69 0032 43F0F003 		orr	r3, r3, #240
  70 0036 5360     		str	r3, [r2, #4]
  71 0038 7047     		bx	lr
  72              	.L4:
 167:../stdperiph/source/stm32f37x_dma.c ****   }
 168:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel3)
  73              		.loc 1 168 0
  74 003a 304B     		ldr	r3, .L14+12
  75 003c 9842     		cmp	r0, r3
  76 003e 05D1     		bne	.L5
 169:../stdperiph/source/stm32f37x_dma.c ****   {
 170:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel3 */
 171:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  77              		.loc 1 171 0
  78 0040 2C4A     		ldr	r2, .L14+4
  79 0042 5368     		ldr	r3, [r2, #4]
  80 0044 43F47063 		orr	r3, r3, #3840
  81 0048 5360     		str	r3, [r2, #4]
  82 004a 7047     		bx	lr
  83              	.L5:
 172:../stdperiph/source/stm32f37x_dma.c ****   }
 173:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel4)
  84              		.loc 1 173 0
  85 004c 2C4B     		ldr	r3, .L14+16
  86 004e 9842     		cmp	r0, r3
  87 0050 05D1     		bne	.L6
 174:../stdperiph/source/stm32f37x_dma.c ****   {
 175:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel4 */
 176:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  88              		.loc 1 176 0
  89 0052 284A     		ldr	r2, .L14+4
  90 0054 5368     		ldr	r3, [r2, #4]
  91 0056 43F47043 		orr	r3, r3, #61440
  92 005a 5360     		str	r3, [r2, #4]
  93 005c 7047     		bx	lr
  94              	.L6:
 177:../stdperiph/source/stm32f37x_dma.c ****   }
 178:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel5)
  95              		.loc 1 178 0
  96 005e 294B     		ldr	r3, .L14+20
  97 0060 9842     		cmp	r0, r3
  98 0062 05D1     		bne	.L7
 179:../stdperiph/source/stm32f37x_dma.c ****   {
 180:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel5 */
 181:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  99              		.loc 1 181 0
 100 0064 234A     		ldr	r2, .L14+4
 101 0066 5368     		ldr	r3, [r2, #4]
 102 0068 43F47023 		orr	r3, r3, #983040
 103 006c 5360     		str	r3, [r2, #4]
 104 006e 7047     		bx	lr
 105              	.L7:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 6


 182:../stdperiph/source/stm32f37x_dma.c ****   }
 183:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel6)
 106              		.loc 1 183 0
 107 0070 254B     		ldr	r3, .L14+24
 108 0072 9842     		cmp	r0, r3
 109 0074 05D1     		bne	.L8
 184:../stdperiph/source/stm32f37x_dma.c ****   {
 185:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel6 */
 186:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 110              		.loc 1 186 0
 111 0076 1F4A     		ldr	r2, .L14+4
 112 0078 5368     		ldr	r3, [r2, #4]
 113 007a 43F47003 		orr	r3, r3, #15728640
 114 007e 5360     		str	r3, [r2, #4]
 115 0080 7047     		bx	lr
 116              	.L8:
 187:../stdperiph/source/stm32f37x_dma.c ****   }
 188:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel7)
 117              		.loc 1 188 0
 118 0082 224B     		ldr	r3, .L14+28
 119 0084 9842     		cmp	r0, r3
 120 0086 05D1     		bne	.L9
 189:../stdperiph/source/stm32f37x_dma.c ****   {
 190:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel7 */
 191:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 121              		.loc 1 191 0
 122 0088 1A4A     		ldr	r2, .L14+4
 123 008a 5368     		ldr	r3, [r2, #4]
 124 008c 43F07063 		orr	r3, r3, #251658240
 125 0090 5360     		str	r3, [r2, #4]
 126 0092 7047     		bx	lr
 127              	.L9:
 192:../stdperiph/source/stm32f37x_dma.c ****   }
 193:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel1)
 128              		.loc 1 193 0
 129 0094 1E4B     		ldr	r3, .L14+32
 130 0096 9842     		cmp	r0, r3
 131 0098 05D1     		bne	.L10
 194:../stdperiph/source/stm32f37x_dma.c ****   {
 195:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel1 */
 196:../stdperiph/source/stm32f37x_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 132              		.loc 1 196 0
 133 009a 1E4A     		ldr	r2, .L14+36
 134 009c 5368     		ldr	r3, [r2, #4]
 135 009e 43F00F03 		orr	r3, r3, #15
 136 00a2 5360     		str	r3, [r2, #4]
 137 00a4 7047     		bx	lr
 138              	.L10:
 197:../stdperiph/source/stm32f37x_dma.c ****   }
 198:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel2)
 139              		.loc 1 198 0
 140 00a6 1C4B     		ldr	r3, .L14+40
 141 00a8 9842     		cmp	r0, r3
 142 00aa 05D1     		bne	.L11
 199:../stdperiph/source/stm32f37x_dma.c ****   {
 200:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel2 */
 201:../stdperiph/source/stm32f37x_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 7


 143              		.loc 1 201 0
 144 00ac 194A     		ldr	r2, .L14+36
 145 00ae 5368     		ldr	r3, [r2, #4]
 146 00b0 43F0F003 		orr	r3, r3, #240
 147 00b4 5360     		str	r3, [r2, #4]
 148 00b6 7047     		bx	lr
 149              	.L11:
 202:../stdperiph/source/stm32f37x_dma.c ****   }
 203:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel3)
 150              		.loc 1 203 0
 151 00b8 184B     		ldr	r3, .L14+44
 152 00ba 9842     		cmp	r0, r3
 153 00bc 05D1     		bne	.L12
 204:../stdperiph/source/stm32f37x_dma.c ****   {
 205:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel3 */
 206:../stdperiph/source/stm32f37x_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 154              		.loc 1 206 0
 155 00be 154A     		ldr	r2, .L14+36
 156 00c0 5368     		ldr	r3, [r2, #4]
 157 00c2 43F47063 		orr	r3, r3, #3840
 158 00c6 5360     		str	r3, [r2, #4]
 159 00c8 7047     		bx	lr
 160              	.L12:
 207:../stdperiph/source/stm32f37x_dma.c ****   }
 208:../stdperiph/source/stm32f37x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel4)
 161              		.loc 1 208 0
 162 00ca 154B     		ldr	r3, .L14+48
 163 00cc 9842     		cmp	r0, r3
 164 00ce 05D1     		bne	.L13
 209:../stdperiph/source/stm32f37x_dma.c ****   {
 210:../stdperiph/source/stm32f37x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel4 */
 211:../stdperiph/source/stm32f37x_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 165              		.loc 1 211 0
 166 00d0 104A     		ldr	r2, .L14+36
 167 00d2 5368     		ldr	r3, [r2, #4]
 168 00d4 43F47043 		orr	r3, r3, #61440
 169 00d8 5360     		str	r3, [r2, #4]
 170 00da 7047     		bx	lr
 171              	.L13:
 212:../stdperiph/source/stm32f37x_dma.c ****   }
 213:../stdperiph/source/stm32f37x_dma.c ****   else
 214:../stdperiph/source/stm32f37x_dma.c ****   { 
 215:../stdperiph/source/stm32f37x_dma.c ****     if (DMAy_Channelx == DMA2_Channel5)
 172              		.loc 1 215 0
 173 00dc 114B     		ldr	r3, .L14+52
 174 00de 9842     		cmp	r0, r3
 175 00e0 04D1     		bne	.L1
 216:../stdperiph/source/stm32f37x_dma.c ****     {
 217:../stdperiph/source/stm32f37x_dma.c ****       /* Reset interrupt pending bits for DMA2 Channel5 */
 218:../stdperiph/source/stm32f37x_dma.c ****       DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 176              		.loc 1 218 0
 177 00e2 0C4A     		ldr	r2, .L14+36
 178 00e4 5368     		ldr	r3, [r2, #4]
 179 00e6 43F47023 		orr	r3, r3, #983040
 180 00ea 5360     		str	r3, [r2, #4]
 181              	.L1:
 182 00ec 7047     		bx	lr
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 8


 183              	.L15:
 184 00ee 00BF     		.align	2
 185              	.L14:
 186 00f0 08000240 		.word	1073872904
 187 00f4 00000240 		.word	1073872896
 188 00f8 1C000240 		.word	1073872924
 189 00fc 30000240 		.word	1073872944
 190 0100 44000240 		.word	1073872964
 191 0104 58000240 		.word	1073872984
 192 0108 6C000240 		.word	1073873004
 193 010c 80000240 		.word	1073873024
 194 0110 08040240 		.word	1073873928
 195 0114 00040240 		.word	1073873920
 196 0118 1C040240 		.word	1073873948
 197 011c 30040240 		.word	1073873968
 198 0120 44040240 		.word	1073873988
 199 0124 58040240 		.word	1073874008
 200              		.cfi_endproc
 201              	.LFE111:
 203              		.section	.text.DMA_Init,"ax",%progbits
 204              		.align	2
 205              		.global	DMA_Init
 206              		.thumb
 207              		.thumb_func
 209              	DMA_Init:
 210              	.LFB112:
 219:../stdperiph/source/stm32f37x_dma.c ****     }
 220:../stdperiph/source/stm32f37x_dma.c ****   }
 221:../stdperiph/source/stm32f37x_dma.c **** }
 222:../stdperiph/source/stm32f37x_dma.c **** 
 223:../stdperiph/source/stm32f37x_dma.c **** /**
 224:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Initializes the DMAy Channelx according to the specified parameters 
 225:../stdperiph/source/stm32f37x_dma.c ****   *         in the DMA_InitStruct.
 226:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 227:../stdperiph/source/stm32f37x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 228:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 229:../stdperiph/source/stm32f37x_dma.c ****   *         the configuration information for the specified DMA Channel.
 230:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 231:../stdperiph/source/stm32f37x_dma.c ****   */
 232:../stdperiph/source/stm32f37x_dma.c **** void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
 233:../stdperiph/source/stm32f37x_dma.c **** {
 211              		.loc 1 233 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216              	.LVL1:
 217 0000 10B4     		push	{r4}
 218              	.LCFI0:
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 4, -4
 221              	.LVL2:
 234:../stdperiph/source/stm32f37x_dma.c ****   uint32_t tmpreg = 0;
 235:../stdperiph/source/stm32f37x_dma.c **** 
 236:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 237:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 238:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 9


 239:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 240:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 241:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 242:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 243:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 244:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 245:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
 246:../stdperiph/source/stm32f37x_dma.c **** 
 247:../stdperiph/source/stm32f37x_dma.c **** /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
 248:../stdperiph/source/stm32f37x_dma.c ****   /* Get the DMAy_Channelx CCR value */
 249:../stdperiph/source/stm32f37x_dma.c ****   tmpreg = DMAy_Channelx->CCR;
 222              		.loc 1 249 0
 223 0002 0368     		ldr	r3, [r0]
 224              	.LVL3:
 250:../stdperiph/source/stm32f37x_dma.c **** 
 251:../stdperiph/source/stm32f37x_dma.c ****   /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 252:../stdperiph/source/stm32f37x_dma.c ****   tmpreg &= CCR_CLEAR_MASK;
 225              		.loc 1 252 0
 226 0004 23F4FF42 		bic	r2, r3, #32640
 227 0008 22F07002 		bic	r2, r2, #112
 228              	.LVL4:
 253:../stdperiph/source/stm32f37x_dma.c **** 
 254:../stdperiph/source/stm32f37x_dma.c ****   /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
 255:../stdperiph/source/stm32f37x_dma.c ****   /* Set DIR bit according to DMA_DIR value */
 256:../stdperiph/source/stm32f37x_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 257:../stdperiph/source/stm32f37x_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 258:../stdperiph/source/stm32f37x_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 259:../stdperiph/source/stm32f37x_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 260:../stdperiph/source/stm32f37x_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 261:../stdperiph/source/stm32f37x_dma.c ****   /* Set PL bits according to DMA_Priority value */
 262:../stdperiph/source/stm32f37x_dma.c ****   /* Set the MEM2MEM bit according to DMA_M2M value */
 263:../stdperiph/source/stm32f37x_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 229              		.loc 1 263 0
 230 000c 8C68     		ldr	r4, [r1, #8]
 231 000e 0B6A     		ldr	r3, [r1, #32]
 232 0010 1C43     		orrs	r4, r4, r3
 264:../stdperiph/source/stm32f37x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 233              		.loc 1 264 0
 234 0012 0B69     		ldr	r3, [r1, #16]
 263:../stdperiph/source/stm32f37x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 235              		.loc 1 263 0
 236 0014 1C43     		orrs	r4, r4, r3
 237              		.loc 1 264 0
 238 0016 4B69     		ldr	r3, [r1, #20]
 239 0018 1C43     		orrs	r4, r4, r3
 265:../stdperiph/source/stm32f37x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 240              		.loc 1 265 0
 241 001a 8B69     		ldr	r3, [r1, #24]
 264:../stdperiph/source/stm32f37x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 242              		.loc 1 264 0
 243 001c 1C43     		orrs	r4, r4, r3
 244              		.loc 1 265 0
 245 001e CB69     		ldr	r3, [r1, #28]
 246 0020 1C43     		orrs	r4, r4, r3
 266:../stdperiph/source/stm32f37x_dma.c ****             DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 247              		.loc 1 266 0
 248 0022 4B6A     		ldr	r3, [r1, #36]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 10


 265:../stdperiph/source/stm32f37x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 249              		.loc 1 265 0
 250 0024 1C43     		orrs	r4, r4, r3
 251              		.loc 1 266 0
 252 0026 8B6A     		ldr	r3, [r1, #40]
 253 0028 2343     		orrs	r3, r3, r4
 263:../stdperiph/source/stm32f37x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 254              		.loc 1 263 0
 255 002a 1343     		orrs	r3, r3, r2
 256              	.LVL5:
 267:../stdperiph/source/stm32f37x_dma.c **** 
 268:../stdperiph/source/stm32f37x_dma.c ****   /* Write to DMAy Channelx CCR */
 269:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CCR = tmpreg;
 257              		.loc 1 269 0
 258 002c 0360     		str	r3, [r0]
 270:../stdperiph/source/stm32f37x_dma.c **** 
 271:../stdperiph/source/stm32f37x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 272:../stdperiph/source/stm32f37x_dma.c ****   /* Write to DMAy Channelx CNDTR */
 273:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 259              		.loc 1 273 0
 260 002e 8B89     		ldrh	r3, [r1, #12]
 261              	.LVL6:
 262 0030 4360     		str	r3, [r0, #4]
 263              	.LVL7:
 274:../stdperiph/source/stm32f37x_dma.c **** 
 275:../stdperiph/source/stm32f37x_dma.c **** /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
 276:../stdperiph/source/stm32f37x_dma.c ****   /* Write to DMAy Channelx CPAR */
 277:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 264              		.loc 1 277 0
 265 0032 0B68     		ldr	r3, [r1]
 266 0034 8360     		str	r3, [r0, #8]
 278:../stdperiph/source/stm32f37x_dma.c **** 
 279:../stdperiph/source/stm32f37x_dma.c **** /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
 280:../stdperiph/source/stm32f37x_dma.c ****   /* Write to DMAy Channelx CMAR */
 281:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 267              		.loc 1 281 0
 268 0036 4B68     		ldr	r3, [r1, #4]
 269 0038 C360     		str	r3, [r0, #12]
 282:../stdperiph/source/stm32f37x_dma.c **** }
 270              		.loc 1 282 0
 271 003a 5DF8044B 		ldr	r4, [sp], #4
 272              	.LCFI1:
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 003e 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE112:
 279              		.section	.text.DMA_StructInit,"ax",%progbits
 280              		.align	2
 281              		.global	DMA_StructInit
 282              		.thumb
 283              		.thumb_func
 285              	DMA_StructInit:
 286              	.LFB113:
 283:../stdperiph/source/stm32f37x_dma.c **** 
 284:../stdperiph/source/stm32f37x_dma.c **** /**
 285:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 11


 286:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
 287:../stdperiph/source/stm32f37x_dma.c ****   *         be initialized.
 288:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 289:../stdperiph/source/stm32f37x_dma.c ****   */
 290:../stdperiph/source/stm32f37x_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 291:../stdperiph/source/stm32f37x_dma.c **** {
 287              		.loc 1 291 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292              	.LVL8:
 292:../stdperiph/source/stm32f37x_dma.c **** /*-------------- Reset DMA init structure parameters values ------------------*/
 293:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 294:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 293              		.loc 1 294 0
 294 0000 0023     		movs	r3, #0
 295 0002 0360     		str	r3, [r0]
 295:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_MemoryBaseAddr member */
 296:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 296              		.loc 1 296 0
 297 0004 4360     		str	r3, [r0, #4]
 297:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_DIR member */
 298:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 298              		.loc 1 298 0
 299 0006 8360     		str	r3, [r0, #8]
 299:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_BufferSize member */
 300:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 300              		.loc 1 300 0
 301 0008 8381     		strh	r3, [r0, #12]	@ movhi
 301:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 302:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 302              		.loc 1 302 0
 303 000a 0361     		str	r3, [r0, #16]
 303:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_MemoryInc member */
 304:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 304              		.loc 1 304 0
 305 000c 4361     		str	r3, [r0, #20]
 305:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 306:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 306              		.loc 1 306 0
 307 000e 8361     		str	r3, [r0, #24]
 307:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 308:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 308              		.loc 1 308 0
 309 0010 C361     		str	r3, [r0, #28]
 309:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_Mode member */
 310:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 310              		.loc 1 310 0
 311 0012 0362     		str	r3, [r0, #32]
 311:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_Priority member */
 312:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 312              		.loc 1 312 0
 313 0014 4362     		str	r3, [r0, #36]
 313:../stdperiph/source/stm32f37x_dma.c ****   /* Initialize the DMA_M2M member */
 314:../stdperiph/source/stm32f37x_dma.c ****   DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 314              		.loc 1 314 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 12


 315 0016 8362     		str	r3, [r0, #40]
 316 0018 7047     		bx	lr
 317              		.cfi_endproc
 318              	.LFE113:
 320 001a 00BF     		.section	.text.DMA_Cmd,"ax",%progbits
 321              		.align	2
 322              		.global	DMA_Cmd
 323              		.thumb
 324              		.thumb_func
 326              	DMA_Cmd:
 327              	.LFB114:
 315:../stdperiph/source/stm32f37x_dma.c **** }
 316:../stdperiph/source/stm32f37x_dma.c **** 
 317:../stdperiph/source/stm32f37x_dma.c **** /**
 318:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx.
 319:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 320:../stdperiph/source/stm32f37x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 321:../stdperiph/source/stm32f37x_dma.c ****   * @param  NewState: new state of the DMAy Channelx. 
 322:../stdperiph/source/stm32f37x_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 323:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 324:../stdperiph/source/stm32f37x_dma.c ****   */
 325:../stdperiph/source/stm32f37x_dma.c **** void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
 326:../stdperiph/source/stm32f37x_dma.c **** {
 328              		.loc 1 326 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 333              	.LVL9:
 327:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 328:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 329:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 330:../stdperiph/source/stm32f37x_dma.c **** 
 331:../stdperiph/source/stm32f37x_dma.c ****   if (NewState != DISABLE)
 334              		.loc 1 331 0
 335 0000 21B1     		cbz	r1, .L20
 332:../stdperiph/source/stm32f37x_dma.c ****   {
 333:../stdperiph/source/stm32f37x_dma.c ****     /* Enable the selected DMAy Channelx */
 334:../stdperiph/source/stm32f37x_dma.c ****     DMAy_Channelx->CCR |= DMA_CCR_EN;
 336              		.loc 1 334 0
 337 0002 0368     		ldr	r3, [r0]
 338 0004 43F00103 		orr	r3, r3, #1
 339 0008 0360     		str	r3, [r0]
 340 000a 7047     		bx	lr
 341              	.L20:
 335:../stdperiph/source/stm32f37x_dma.c ****   }
 336:../stdperiph/source/stm32f37x_dma.c ****   else
 337:../stdperiph/source/stm32f37x_dma.c ****   {
 338:../stdperiph/source/stm32f37x_dma.c ****     /* Disable the selected DMAy Channelx */
 339:../stdperiph/source/stm32f37x_dma.c ****     DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 342              		.loc 1 339 0
 343 000c 0368     		ldr	r3, [r0]
 344 000e 23F00103 		bic	r3, r3, #1
 345 0012 1B04     		lsls	r3, r3, #16
 346 0014 1B0C     		lsrs	r3, r3, #16
 347 0016 0360     		str	r3, [r0]
 348 0018 7047     		bx	lr
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 13


 349              		.cfi_endproc
 350              	.LFE114:
 352 001a 00BF     		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 353              		.align	2
 354              		.global	DMA_SetCurrDataCounter
 355              		.thumb
 356              		.thumb_func
 358              	DMA_SetCurrDataCounter:
 359              	.LFB115:
 340:../stdperiph/source/stm32f37x_dma.c ****   }
 341:../stdperiph/source/stm32f37x_dma.c **** }
 342:../stdperiph/source/stm32f37x_dma.c **** 
 343:../stdperiph/source/stm32f37x_dma.c **** /**
 344:../stdperiph/source/stm32f37x_dma.c ****   * @}
 345:../stdperiph/source/stm32f37x_dma.c ****   */
 346:../stdperiph/source/stm32f37x_dma.c **** 
 347:../stdperiph/source/stm32f37x_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 348:../stdperiph/source/stm32f37x_dma.c ****  *  @brief   Data Counter functions 
 349:../stdperiph/source/stm32f37x_dma.c ****  *
 350:../stdperiph/source/stm32f37x_dma.c **** @verbatim
 351:../stdperiph/source/stm32f37x_dma.c ****  ===============================================================================
 352:../stdperiph/source/stm32f37x_dma.c ****                       ##### Data Counter functions #####
 353:../stdperiph/source/stm32f37x_dma.c ****  ===============================================================================
 354:../stdperiph/source/stm32f37x_dma.c ****     [..] This subsection provides function allowing to configure and read the buffer 
 355:../stdperiph/source/stm32f37x_dma.c ****          size (number of data to be transferred).The DMA data counter can be written 
 356:../stdperiph/source/stm32f37x_dma.c ****          only when the DMA channel is disabled (ie. after transfer complete event).
 357:../stdperiph/source/stm32f37x_dma.c ****     [..] The following function can be used to write the Channel data counter value:
 358:../stdperiph/source/stm32f37x_dma.c ****          (+) void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t 
 359:../stdperiph/source/stm32f37x_dma.c ****              DataNumber).
 360:../stdperiph/source/stm32f37x_dma.c ****     -@- It is advised to use this function rather than DMA_Init() in situations 
 361:../stdperiph/source/stm32f37x_dma.c ****         where only the Data buffer needs to be reloaded.
 362:../stdperiph/source/stm32f37x_dma.c ****     [..] The DMA data counter can be read to indicate the number of remaining transfers 
 363:../stdperiph/source/stm32f37x_dma.c ****          for the relative DMA channel. This counter is decremented at the end of each 
 364:../stdperiph/source/stm32f37x_dma.c ****          data transfer and when the transfer is complete: 
 365:../stdperiph/source/stm32f37x_dma.c ****          (+) If Normal mode is selected: the counter is set to 0.
 366:../stdperiph/source/stm32f37x_dma.c ****          (+) If Circular mode is selected: the counter is reloaded with the initial 
 367:../stdperiph/source/stm32f37x_dma.c ****          value(configured before enabling the DMA channel).
 368:../stdperiph/source/stm32f37x_dma.c ****     [..] The following function can be used to read the Channel data counter value:
 369:../stdperiph/source/stm32f37x_dma.c ****          (+) uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx).
 370:../stdperiph/source/stm32f37x_dma.c **** 
 371:../stdperiph/source/stm32f37x_dma.c **** @endverbatim
 372:../stdperiph/source/stm32f37x_dma.c ****   * @{
 373:../stdperiph/source/stm32f37x_dma.c ****   */
 374:../stdperiph/source/stm32f37x_dma.c **** 
 375:../stdperiph/source/stm32f37x_dma.c **** /**
 376:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Sets the number of data units in the current DMAy Channelx transfer.
 377:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 378:../stdperiph/source/stm32f37x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 379:../stdperiph/source/stm32f37x_dma.c ****   * @param  DataNumber: The number of data units in the current DMAy Channelx
 380:../stdperiph/source/stm32f37x_dma.c ****   *         transfer.
 381:../stdperiph/source/stm32f37x_dma.c ****   * @note   This function can only be used when the DMAy_Channelx is disabled.
 382:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 383:../stdperiph/source/stm32f37x_dma.c ****   */
 384:../stdperiph/source/stm32f37x_dma.c **** void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
 385:../stdperiph/source/stm32f37x_dma.c **** {
 360              		.loc 1 385 0
 361              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 14


 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365              	.LVL10:
 386:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 387:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 388:../stdperiph/source/stm32f37x_dma.c **** 
 389:../stdperiph/source/stm32f37x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 390:../stdperiph/source/stm32f37x_dma.c ****   /* Write to DMAy Channelx CNDTR */
 391:../stdperiph/source/stm32f37x_dma.c ****   DMAy_Channelx->CNDTR = DataNumber;
 366              		.loc 1 391 0
 367 0000 4160     		str	r1, [r0, #4]
 368 0002 7047     		bx	lr
 369              		.cfi_endproc
 370              	.LFE115:
 372              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 373              		.align	2
 374              		.global	DMA_GetCurrDataCounter
 375              		.thumb
 376              		.thumb_func
 378              	DMA_GetCurrDataCounter:
 379              	.LFB116:
 392:../stdperiph/source/stm32f37x_dma.c **** }
 393:../stdperiph/source/stm32f37x_dma.c **** 
 394:../stdperiph/source/stm32f37x_dma.c **** /**
 395:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Returns the number of remaining data units in the current
 396:../stdperiph/source/stm32f37x_dma.c ****   *         DMAy Channelx transfer.
 397:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 398:../stdperiph/source/stm32f37x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 399:../stdperiph/source/stm32f37x_dma.c ****   * @retval The number of remaining data units in the current DMAy Channelx
 400:../stdperiph/source/stm32f37x_dma.c ****   *         transfer.
 401:../stdperiph/source/stm32f37x_dma.c ****   */
 402:../stdperiph/source/stm32f37x_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
 403:../stdperiph/source/stm32f37x_dma.c **** {
 380              		.loc 1 403 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 385              	.LVL11:
 404:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 405:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 406:../stdperiph/source/stm32f37x_dma.c ****   /* Return the number of remaining data units for DMAy Channelx */
 407:../stdperiph/source/stm32f37x_dma.c ****   return ((uint16_t)(DMAy_Channelx->CNDTR));
 386              		.loc 1 407 0
 387 0000 4068     		ldr	r0, [r0, #4]
 388              	.LVL12:
 408:../stdperiph/source/stm32f37x_dma.c **** }
 389              		.loc 1 408 0
 390 0002 80B2     		uxth	r0, r0
 391 0004 7047     		bx	lr
 392              		.cfi_endproc
 393              	.LFE116:
 395 0006 00BF     		.section	.text.DMA_ITConfig,"ax",%progbits
 396              		.align	2
 397              		.global	DMA_ITConfig
 398              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 15


 399              		.thumb_func
 401              	DMA_ITConfig:
 402              	.LFB117:
 409:../stdperiph/source/stm32f37x_dma.c **** 
 410:../stdperiph/source/stm32f37x_dma.c **** /**
 411:../stdperiph/source/stm32f37x_dma.c ****   * @}
 412:../stdperiph/source/stm32f37x_dma.c ****   */
 413:../stdperiph/source/stm32f37x_dma.c **** 
 414:../stdperiph/source/stm32f37x_dma.c **** /** @defgroup DMA_Group3 Interrupts and flags management functions
 415:../stdperiph/source/stm32f37x_dma.c ****  *  @brief   Interrupts and flags management functions 
 416:../stdperiph/source/stm32f37x_dma.c ****  *
 417:../stdperiph/source/stm32f37x_dma.c **** @verbatim
 418:../stdperiph/source/stm32f37x_dma.c ****  ===============================================================================
 419:../stdperiph/source/stm32f37x_dma.c ****           ##### Interrupts and flags management functions #####
 420:../stdperiph/source/stm32f37x_dma.c ****  ===============================================================================
 421:../stdperiph/source/stm32f37x_dma.c ****     [..] This subsection provides functions allowing to configure the DMA Interrupts 
 422:../stdperiph/source/stm32f37x_dma.c ****          sources and check or clear the flags or pending bits status.
 423:../stdperiph/source/stm32f37x_dma.c ****          The user should identify which mode will be used in his application to manage 
 424:../stdperiph/source/stm32f37x_dma.c ****          the DMA controller events: Polling mode or Interrupt mode. 
 425:../stdperiph/source/stm32f37x_dma.c ****   *** Polling Mode ***
 426:../stdperiph/source/stm32f37x_dma.c ****   ====================
 427:../stdperiph/source/stm32f37x_dma.c ****     [..] Each DMA channel can be managed through 4 event Flags:(y : DMA Controller 
 428:../stdperiph/source/stm32f37x_dma.c ****          number  x : DMA channel number ).
 429:../stdperiph/source/stm32f37x_dma.c ****          (#) DMAy_FLAG_TCx : to indicate that a Transfer Complete event occurred.
 430:../stdperiph/source/stm32f37x_dma.c ****          (#) DMAy_FLAG_HTx : to indicate that a Half-Transfer Complete event occurred.
 431:../stdperiph/source/stm32f37x_dma.c ****          (#) DMAy_FLAG_TEx : to indicate that a Transfer Error occurred.
 432:../stdperiph/source/stm32f37x_dma.c ****          (#) DMAy_FLAG_GLx : to indicate that at least one of the events described 
 433:../stdperiph/source/stm32f37x_dma.c ****              above occurred.
 434:../stdperiph/source/stm32f37x_dma.c ****     -@- Clearing DMAy_FLAG_GLx results in clearing all other pending flags of the 
 435:../stdperiph/source/stm32f37x_dma.c ****         same channel (DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 436:../stdperiph/source/stm32f37x_dma.c ****     [..]In this Mode it is advised to use the following functions:
 437:../stdperiph/source/stm32f37x_dma.c ****         (+) FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG);
 438:../stdperiph/source/stm32f37x_dma.c ****         (+) void DMA_ClearFlag(uint32_t DMA_FLAG);
 439:../stdperiph/source/stm32f37x_dma.c **** 
 440:../stdperiph/source/stm32f37x_dma.c ****   *** Interrupt Mode ***
 441:../stdperiph/source/stm32f37x_dma.c ****   ======================
 442:../stdperiph/source/stm32f37x_dma.c ****     [..] Each DMA channel can be managed through 4 Interrupts:
 443:../stdperiph/source/stm32f37x_dma.c ****     (+) Interrupt Source
 444:../stdperiph/source/stm32f37x_dma.c ****        (##) DMA_IT_TC: specifies the interrupt source for the Transfer Complete 
 445:../stdperiph/source/stm32f37x_dma.c ****             event.
 446:../stdperiph/source/stm32f37x_dma.c ****        (##) DMA_IT_HT : specifies the interrupt source for the Half-transfer Complete 
 447:../stdperiph/source/stm32f37x_dma.c ****             event.
 448:../stdperiph/source/stm32f37x_dma.c ****        (##) DMA_IT_TE : specifies the interrupt source for the transfer errors event.
 449:../stdperiph/source/stm32f37x_dma.c ****        (##) DMA_IT_GL : to indicate that at least one of the interrupts described 
 450:../stdperiph/source/stm32f37x_dma.c ****             above occurred.
 451:../stdperiph/source/stm32f37x_dma.c ****     -@@- Clearing DMA_IT_GL interrupt results in clearing all other interrupts of 
 452:../stdperiph/source/stm32f37x_dma.c ****         the same channel (DMA_IT_TCx, DMA_IT_HT and DMA_IT_TE).
 453:../stdperiph/source/stm32f37x_dma.c ****     [..]In this Mode it is advised to use the following functions:
 454:../stdperiph/source/stm32f37x_dma.c ****         (+) void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, 
 455:../stdperiph/source/stm32f37x_dma.c ****             FunctionalState NewState);
 456:../stdperiph/source/stm32f37x_dma.c ****         (+) ITStatus DMA_GetITStatus(uint32_t DMA_IT);
 457:../stdperiph/source/stm32f37x_dma.c ****         (+) void DMA_ClearITPendingBit(uint32_t DMA_IT);
 458:../stdperiph/source/stm32f37x_dma.c **** 
 459:../stdperiph/source/stm32f37x_dma.c **** @endverbatim
 460:../stdperiph/source/stm32f37x_dma.c ****   * @{
 461:../stdperiph/source/stm32f37x_dma.c ****   */
 462:../stdperiph/source/stm32f37x_dma.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 16


 463:../stdperiph/source/stm32f37x_dma.c **** /**
 464:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx interrupts.
 465:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 466:../stdperiph/source/stm32f37x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 467:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
 468:../stdperiph/source/stm32f37x_dma.c ****   *         or disabled. 
 469:../stdperiph/source/stm32f37x_dma.c ****   *          This parameter can be any combination of the following values:
 470:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA_IT_TC: Transfer complete interrupt mask
 471:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA_IT_HT: Half transfer interrupt mask
 472:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA_IT_TE: Transfer error interrupt mask
 473:../stdperiph/source/stm32f37x_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
 474:../stdperiph/source/stm32f37x_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 475:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 476:../stdperiph/source/stm32f37x_dma.c ****   */
 477:../stdperiph/source/stm32f37x_dma.c **** void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
 478:../stdperiph/source/stm32f37x_dma.c **** {
 403              		.loc 1 478 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408              	.LVL13:
 479:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 480:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 481:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 482:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 483:../stdperiph/source/stm32f37x_dma.c **** 
 484:../stdperiph/source/stm32f37x_dma.c ****   if (NewState != DISABLE)
 409              		.loc 1 484 0
 410 0000 1AB1     		cbz	r2, .L25
 485:../stdperiph/source/stm32f37x_dma.c ****   {
 486:../stdperiph/source/stm32f37x_dma.c ****     /* Enable the selected DMA interrupts */
 487:../stdperiph/source/stm32f37x_dma.c ****     DMAy_Channelx->CCR |= DMA_IT;
 411              		.loc 1 487 0
 412 0002 0368     		ldr	r3, [r0]
 413 0004 1943     		orrs	r1, r1, r3
 414              	.LVL14:
 415 0006 0160     		str	r1, [r0]
 416 0008 7047     		bx	lr
 417              	.LVL15:
 418              	.L25:
 488:../stdperiph/source/stm32f37x_dma.c ****   }
 489:../stdperiph/source/stm32f37x_dma.c ****   else
 490:../stdperiph/source/stm32f37x_dma.c ****   {
 491:../stdperiph/source/stm32f37x_dma.c ****     /* Disable the selected DMA interrupts */
 492:../stdperiph/source/stm32f37x_dma.c ****     DMAy_Channelx->CCR &= ~DMA_IT;
 419              		.loc 1 492 0
 420 000a 0368     		ldr	r3, [r0]
 421 000c 23EA0101 		bic	r1, r3, r1
 422              	.LVL16:
 423 0010 0160     		str	r1, [r0]
 424 0012 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE117:
 428              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 429              		.align	2
 430              		.global	DMA_GetFlagStatus
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 17


 431              		.thumb
 432              		.thumb_func
 434              	DMA_GetFlagStatus:
 435              	.LFB118:
 493:../stdperiph/source/stm32f37x_dma.c ****   }
 494:../stdperiph/source/stm32f37x_dma.c **** }
 495:../stdperiph/source/stm32f37x_dma.c **** 
 496:../stdperiph/source/stm32f37x_dma.c **** /**
 497:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx flag is set or not.
 498:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to check.
 499:../stdperiph/source/stm32f37x_dma.c ****   *          This parameter can be one of the following values:
 500:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 501:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 502:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 503:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 504:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 505:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 506:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 507:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 508:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 509:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 510:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 511:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 512:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 513:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 514:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 515:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 516:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 517:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 518:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 519:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 520:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 521:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
 522:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 523:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 524:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 525:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 526:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 527:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 528:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 529:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 530:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 531:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 532:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 533:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 534:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 535:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 536:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 537:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 538:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 539:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 540:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 541:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 542:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 543:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 544:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 545:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 18


 546:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 547:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 548:../stdperiph/source/stm32f37x_dma.c ****   *     
 549:../stdperiph/source/stm32f37x_dma.c ****   * @note   The Global flag (DMAy_FLAG_GLx) is set whenever any of the other flags 
 550:../stdperiph/source/stm32f37x_dma.c ****   *         relative to the same channel is set (Transfer Complete, Half-transfer 
 551:../stdperiph/source/stm32f37x_dma.c ****   *         Complete or Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx or 
 552:../stdperiph/source/stm32f37x_dma.c ****   *         DMAy_FLAG_TEx). 
 553:../stdperiph/source/stm32f37x_dma.c ****   *      
 554:../stdperiph/source/stm32f37x_dma.c ****   * @retval The new state of DMAy_FLAG (SET or RESET).
 555:../stdperiph/source/stm32f37x_dma.c ****   */
 556:../stdperiph/source/stm32f37x_dma.c **** FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
 557:../stdperiph/source/stm32f37x_dma.c **** {
 436              		.loc 1 557 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441              	.LVL17:
 558:../stdperiph/source/stm32f37x_dma.c ****   FlagStatus bitstatus = RESET;
 559:../stdperiph/source/stm32f37x_dma.c ****   uint32_t tmpreg = 0;
 560:../stdperiph/source/stm32f37x_dma.c **** 
 561:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 562:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
 563:../stdperiph/source/stm32f37x_dma.c **** 
 564:../stdperiph/source/stm32f37x_dma.c ****   /* Calculate the used DMAy */
 565:../stdperiph/source/stm32f37x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 442              		.loc 1 565 0
 443 0000 10F0805F 		tst	r0, #268435456
 444 0004 02D0     		beq	.L28
 566:../stdperiph/source/stm32f37x_dma.c ****   {
 567:../stdperiph/source/stm32f37x_dma.c ****     /* Get DMA2 ISR register value */
 568:../stdperiph/source/stm32f37x_dma.c ****     tmpreg = DMA2->ISR ;
 445              		.loc 1 568 0
 446 0006 054B     		ldr	r3, .L32
 447 0008 1B68     		ldr	r3, [r3]
 448              	.LVL18:
 449 000a 01E0     		b	.L29
 450              	.LVL19:
 451              	.L28:
 569:../stdperiph/source/stm32f37x_dma.c ****   }
 570:../stdperiph/source/stm32f37x_dma.c ****   else
 571:../stdperiph/source/stm32f37x_dma.c ****   {
 572:../stdperiph/source/stm32f37x_dma.c ****     /* Get DMA1 ISR register value */
 573:../stdperiph/source/stm32f37x_dma.c ****     tmpreg = DMA1->ISR ;
 452              		.loc 1 573 0
 453 000c 044B     		ldr	r3, .L32+4
 454 000e 1B68     		ldr	r3, [r3]
 455              	.LVL20:
 456              	.L29:
 574:../stdperiph/source/stm32f37x_dma.c ****   }
 575:../stdperiph/source/stm32f37x_dma.c **** 
 576:../stdperiph/source/stm32f37x_dma.c ****   /* Check the status of the specified DMAy flag */
 577:../stdperiph/source/stm32f37x_dma.c ****   if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 457              		.loc 1 577 0
 458 0010 0342     		tst	r3, r0
 459 0012 01D0     		beq	.L31
 578:../stdperiph/source/stm32f37x_dma.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 19


 579:../stdperiph/source/stm32f37x_dma.c ****     /* DMAy_FLAG is set */
 580:../stdperiph/source/stm32f37x_dma.c ****     bitstatus = SET;
 460              		.loc 1 580 0
 461 0014 0120     		movs	r0, #1
 462              	.LVL21:
 463 0016 7047     		bx	lr
 464              	.LVL22:
 465              	.L31:
 581:../stdperiph/source/stm32f37x_dma.c ****   }
 582:../stdperiph/source/stm32f37x_dma.c ****   else
 583:../stdperiph/source/stm32f37x_dma.c ****   {
 584:../stdperiph/source/stm32f37x_dma.c ****     /* DMAy_FLAG is reset */
 585:../stdperiph/source/stm32f37x_dma.c ****     bitstatus = RESET;
 466              		.loc 1 585 0
 467 0018 0020     		movs	r0, #0
 468              	.LVL23:
 586:../stdperiph/source/stm32f37x_dma.c ****   }
 587:../stdperiph/source/stm32f37x_dma.c ****   
 588:../stdperiph/source/stm32f37x_dma.c ****   /* Return the DMAy_FLAG status */
 589:../stdperiph/source/stm32f37x_dma.c ****   return  bitstatus;
 590:../stdperiph/source/stm32f37x_dma.c **** }
 469              		.loc 1 590 0
 470 001a 7047     		bx	lr
 471              	.L33:
 472              		.align	2
 473              	.L32:
 474 001c 00040240 		.word	1073873920
 475 0020 00000240 		.word	1073872896
 476              		.cfi_endproc
 477              	.LFE118:
 479              		.section	.text.DMA_ClearFlag,"ax",%progbits
 480              		.align	2
 481              		.global	DMA_ClearFlag
 482              		.thumb
 483              		.thumb_func
 485              	DMA_ClearFlag:
 486              	.LFB119:
 591:../stdperiph/source/stm32f37x_dma.c **** 
 592:../stdperiph/source/stm32f37x_dma.c **** /**
 593:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Clears the DMAy Channelx's pending flags.
 594:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to clear.
 595:../stdperiph/source/stm32f37x_dma.c ****   *          This parameter can be any combination (for the same DMA) of the following values:
 596:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 597:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 598:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 599:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 600:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 601:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 602:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 603:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 604:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 605:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 606:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 607:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 608:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 609:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 610:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 20


 611:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 612:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 613:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 614:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 615:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 616:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 617:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
 618:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 619:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 620:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 621:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 622:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 623:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 624:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 625:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 626:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 627:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 628:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 629:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 630:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 631:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 632:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 633:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 634:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 635:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 636:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 637:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 638:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 639:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 640:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 641:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
 642:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 643:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 644:../stdperiph/source/stm32f37x_dma.c ****   *
 645:../stdperiph/source/stm32f37x_dma.c ****   * @note   Clearing the Global flag (DMAy_FLAG_GLx) results in clearing all other flags
 646:../stdperiph/source/stm32f37x_dma.c ****   *         relative to the same channel (Transfer Complete, Half-transfer Complete and
 647:../stdperiph/source/stm32f37x_dma.c ****   *         Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 648:../stdperiph/source/stm32f37x_dma.c ****   *
 649:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 650:../stdperiph/source/stm32f37x_dma.c ****   */
 651:../stdperiph/source/stm32f37x_dma.c **** void DMA_ClearFlag(uint32_t DMAy_FLAG)
 652:../stdperiph/source/stm32f37x_dma.c **** {
 487              		.loc 1 652 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LVL24:
 653:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 654:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
 655:../stdperiph/source/stm32f37x_dma.c **** 
 656:../stdperiph/source/stm32f37x_dma.c **** /* Calculate the used DMAy */
 657:../stdperiph/source/stm32f37x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 493              		.loc 1 657 0
 494 0000 10F0805F 		tst	r0, #268435456
 495 0004 02D0     		beq	.L35
 658:../stdperiph/source/stm32f37x_dma.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 21


 659:../stdperiph/source/stm32f37x_dma.c ****     /* Clear the selected DMAy flags */
 660:../stdperiph/source/stm32f37x_dma.c ****     DMA2->IFCR = DMAy_FLAG;
 496              		.loc 1 660 0
 497 0006 034B     		ldr	r3, .L37
 498 0008 5860     		str	r0, [r3, #4]
 499 000a 7047     		bx	lr
 500              	.L35:
 661:../stdperiph/source/stm32f37x_dma.c ****   }
 662:../stdperiph/source/stm32f37x_dma.c ****   else
 663:../stdperiph/source/stm32f37x_dma.c ****   {
 664:../stdperiph/source/stm32f37x_dma.c ****     /* Clear the selected DMAy flags */
 665:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR = DMAy_FLAG;
 501              		.loc 1 665 0
 502 000c 024B     		ldr	r3, .L37+4
 503 000e 5860     		str	r0, [r3, #4]
 504 0010 7047     		bx	lr
 505              	.L38:
 506 0012 00BF     		.align	2
 507              	.L37:
 508 0014 00040240 		.word	1073873920
 509 0018 00000240 		.word	1073872896
 510              		.cfi_endproc
 511              	.LFE119:
 513              		.section	.text.DMA_GetITStatus,"ax",%progbits
 514              		.align	2
 515              		.global	DMA_GetITStatus
 516              		.thumb
 517              		.thumb_func
 519              	DMA_GetITStatus:
 520              	.LFB120:
 666:../stdperiph/source/stm32f37x_dma.c ****   }
 667:../stdperiph/source/stm32f37x_dma.c **** }
 668:../stdperiph/source/stm32f37x_dma.c **** 
 669:../stdperiph/source/stm32f37x_dma.c **** /**
 670:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
 671:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt source to check. 
 672:../stdperiph/source/stm32f37x_dma.c ****   *          This parameter can be one of the following values:
 673:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 674:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 675:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 676:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 677:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 678:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 679:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 680:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 681:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 682:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 683:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 684:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 685:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 686:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 687:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 688:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 689:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 690:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 691:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 692:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 22


 693:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 694:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 695:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 696:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 697:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 698:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 699:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 700:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 701:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 702:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 703:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
 704:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 705:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 706:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 707:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 708:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 709:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 710:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 711:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 712:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 713:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 714:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 715:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 716:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 717:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 718:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 719:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
 720:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 721:../stdperiph/source/stm32f37x_dma.c ****   *     
 722:../stdperiph/source/stm32f37x_dma.c ****   * @note   The Global interrupt (DMAy_FLAG_GLx) is set whenever any of the other 
 723:../stdperiph/source/stm32f37x_dma.c ****   *         interrupts relative to the same channel is set (Transfer Complete, 
 724:../stdperiph/source/stm32f37x_dma.c ****   *         Half-transfer Complete or Transfer Error interrupts: DMAy_IT_TCx, 
 725:../stdperiph/source/stm32f37x_dma.c ****   *         DMAy_IT_HTx or DMAy_IT_TEx). 
 726:../stdperiph/source/stm32f37x_dma.c ****   *      
 727:../stdperiph/source/stm32f37x_dma.c ****   * @retval The new state of DMAy_IT (SET or RESET).
 728:../stdperiph/source/stm32f37x_dma.c ****   */
 729:../stdperiph/source/stm32f37x_dma.c **** ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
 730:../stdperiph/source/stm32f37x_dma.c **** {
 521              		.loc 1 730 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526              	.LVL25:
 731:../stdperiph/source/stm32f37x_dma.c ****   ITStatus bitstatus = RESET;
 732:../stdperiph/source/stm32f37x_dma.c ****   uint32_t tmpreg = 0;
 733:../stdperiph/source/stm32f37x_dma.c **** 
 734:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 735:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_GET_IT(DMAy_IT));
 736:../stdperiph/source/stm32f37x_dma.c **** 
 737:../stdperiph/source/stm32f37x_dma.c ****   /* Calculate the used DMA */
 738:../stdperiph/source/stm32f37x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 527              		.loc 1 738 0
 528 0000 10F0805F 		tst	r0, #268435456
 529 0004 02D0     		beq	.L40
 739:../stdperiph/source/stm32f37x_dma.c ****   {
 740:../stdperiph/source/stm32f37x_dma.c ****     /* Get DMA2 ISR register value */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 23


 741:../stdperiph/source/stm32f37x_dma.c ****     tmpreg = DMA2->ISR;
 530              		.loc 1 741 0
 531 0006 054B     		ldr	r3, .L44
 532 0008 1B68     		ldr	r3, [r3]
 533              	.LVL26:
 534 000a 01E0     		b	.L41
 535              	.LVL27:
 536              	.L40:
 742:../stdperiph/source/stm32f37x_dma.c ****   }
 743:../stdperiph/source/stm32f37x_dma.c ****   else
 744:../stdperiph/source/stm32f37x_dma.c ****   {
 745:../stdperiph/source/stm32f37x_dma.c ****     /* Get DMA1 ISR register value */
 746:../stdperiph/source/stm32f37x_dma.c ****     tmpreg = DMA1->ISR;
 537              		.loc 1 746 0
 538 000c 044B     		ldr	r3, .L44+4
 539 000e 1B68     		ldr	r3, [r3]
 540              	.LVL28:
 541              	.L41:
 747:../stdperiph/source/stm32f37x_dma.c ****   }
 748:../stdperiph/source/stm32f37x_dma.c **** 
 749:../stdperiph/source/stm32f37x_dma.c ****   /* Check the status of the specified DMAy interrupt */
 750:../stdperiph/source/stm32f37x_dma.c ****   if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 542              		.loc 1 750 0
 543 0010 0342     		tst	r3, r0
 544 0012 01D0     		beq	.L43
 751:../stdperiph/source/stm32f37x_dma.c ****   {
 752:../stdperiph/source/stm32f37x_dma.c ****     /* DMAy_IT is set */
 753:../stdperiph/source/stm32f37x_dma.c ****     bitstatus = SET;
 545              		.loc 1 753 0
 546 0014 0120     		movs	r0, #1
 547              	.LVL29:
 548 0016 7047     		bx	lr
 549              	.LVL30:
 550              	.L43:
 754:../stdperiph/source/stm32f37x_dma.c ****   }
 755:../stdperiph/source/stm32f37x_dma.c ****   else
 756:../stdperiph/source/stm32f37x_dma.c ****   {
 757:../stdperiph/source/stm32f37x_dma.c ****     /* DMAy_IT is reset */
 758:../stdperiph/source/stm32f37x_dma.c ****     bitstatus = RESET;
 551              		.loc 1 758 0
 552 0018 0020     		movs	r0, #0
 553              	.LVL31:
 759:../stdperiph/source/stm32f37x_dma.c ****   }
 760:../stdperiph/source/stm32f37x_dma.c ****   /* Return the DMAy_IT status */
 761:../stdperiph/source/stm32f37x_dma.c ****   return  bitstatus;
 762:../stdperiph/source/stm32f37x_dma.c **** }
 554              		.loc 1 762 0
 555 001a 7047     		bx	lr
 556              	.L45:
 557              		.align	2
 558              	.L44:
 559 001c 00040240 		.word	1073873920
 560 0020 00000240 		.word	1073872896
 561              		.cfi_endproc
 562              	.LFE120:
 564              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 565              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 24


 566              		.global	DMA_ClearITPendingBit
 567              		.thumb
 568              		.thumb_func
 570              	DMA_ClearITPendingBit:
 571              	.LFB121:
 763:../stdperiph/source/stm32f37x_dma.c **** 
 764:../stdperiph/source/stm32f37x_dma.c **** /**
 765:../stdperiph/source/stm32f37x_dma.c ****   * @brief  Clears the DMAy Channelx's interrupt pending bits.
 766:../stdperiph/source/stm32f37x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt pending bit to clear.
 767:../stdperiph/source/stm32f37x_dma.c ****   *          This parameter can be any combination (for the same DMA) of the following values:
 768:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 769:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 770:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 771:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 772:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 773:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 774:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 775:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 776:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 777:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 778:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 779:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 780:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 781:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 782:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 783:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 784:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 785:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 786:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 787:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 788:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 789:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 790:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 791:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 792:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 793:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 794:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 795:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 796:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 797:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 798:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
 799:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 800:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 801:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 802:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 803:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 804:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 805:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 806:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 807:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 808:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 809:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 810:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 811:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 812:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 813:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 814:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 25


 815:../stdperiph/source/stm32f37x_dma.c ****   *            @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 816:../stdperiph/source/stm32f37x_dma.c ****   *     
 817:../stdperiph/source/stm32f37x_dma.c ****   * @note   Clearing the Global interrupt (DMAy_IT_GLx) results in clearing all other 
 818:../stdperiph/source/stm32f37x_dma.c ****   *         interrupts relative to the same channel (Transfer Complete, Half-transfer 
 819:../stdperiph/source/stm32f37x_dma.c ****   *         Complete and Transfer Error interrupts: DMAy_IT_TCx, DMAy_IT_HTx and 
 820:../stdperiph/source/stm32f37x_dma.c ****   *         DMAy_IT_TEx).  
 821:../stdperiph/source/stm32f37x_dma.c ****   *        
 822:../stdperiph/source/stm32f37x_dma.c ****   * @retval None
 823:../stdperiph/source/stm32f37x_dma.c ****   */
 824:../stdperiph/source/stm32f37x_dma.c **** void DMA_ClearITPendingBit(uint32_t DMAy_IT)
 825:../stdperiph/source/stm32f37x_dma.c **** {
 572              		.loc 1 825 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577              	.LVL32:
 826:../stdperiph/source/stm32f37x_dma.c ****   /* Check the parameters */
 827:../stdperiph/source/stm32f37x_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
 828:../stdperiph/source/stm32f37x_dma.c **** 
 829:../stdperiph/source/stm32f37x_dma.c ****   /* Calculate the used DMAy */
 830:../stdperiph/source/stm32f37x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 578              		.loc 1 830 0
 579 0000 10F0805F 		tst	r0, #268435456
 580 0004 02D0     		beq	.L47
 831:../stdperiph/source/stm32f37x_dma.c ****   {
 832:../stdperiph/source/stm32f37x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 833:../stdperiph/source/stm32f37x_dma.c ****     DMA2->IFCR = DMAy_IT;
 581              		.loc 1 833 0
 582 0006 034B     		ldr	r3, .L49
 583 0008 5860     		str	r0, [r3, #4]
 584 000a 7047     		bx	lr
 585              	.L47:
 834:../stdperiph/source/stm32f37x_dma.c ****   }
 835:../stdperiph/source/stm32f37x_dma.c ****   else
 836:../stdperiph/source/stm32f37x_dma.c ****   {
 837:../stdperiph/source/stm32f37x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 838:../stdperiph/source/stm32f37x_dma.c ****     DMA1->IFCR = DMAy_IT;
 586              		.loc 1 838 0
 587 000c 024B     		ldr	r3, .L49+4
 588 000e 5860     		str	r0, [r3, #4]
 589 0010 7047     		bx	lr
 590              	.L50:
 591 0012 00BF     		.align	2
 592              	.L49:
 593 0014 00040240 		.word	1073873920
 594 0018 00000240 		.word	1073872896
 595              		.cfi_endproc
 596              	.LFE121:
 598              		.text
 599              	.Letext0:
 600              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 601              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 602              		.file 4 "../cmsis/include/stm32f37x.h"
 603              		.file 5 "../stdperiph/include/stm32f37x_dma.h"
 604              		.file 6 "../cmsis/include/core_cm4.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f37x_dma.c
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:22     .text.DMA_DeInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:27     .text.DMA_DeInit:00000000 DMA_DeInit
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:186    .text.DMA_DeInit:000000f0 $d
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:204    .text.DMA_Init:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:209    .text.DMA_Init:00000000 DMA_Init
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:280    .text.DMA_StructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:285    .text.DMA_StructInit:00000000 DMA_StructInit
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:321    .text.DMA_Cmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:326    .text.DMA_Cmd:00000000 DMA_Cmd
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:353    .text.DMA_SetCurrDataCounter:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:358    .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:373    .text.DMA_GetCurrDataCounter:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:378    .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:396    .text.DMA_ITConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:401    .text.DMA_ITConfig:00000000 DMA_ITConfig
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:429    .text.DMA_GetFlagStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:434    .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:474    .text.DMA_GetFlagStatus:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:480    .text.DMA_ClearFlag:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:485    .text.DMA_ClearFlag:00000000 DMA_ClearFlag
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:508    .text.DMA_ClearFlag:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:514    .text.DMA_GetITStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:519    .text.DMA_GetITStatus:00000000 DMA_GetITStatus
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:559    .text.DMA_GetITStatus:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:565    .text.DMA_ClearITPendingBit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:570    .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
C:\Users\strag\AppData\Local\Temp\ccXqMaOi.s:593    .text.DMA_ClearITPendingBit:00000014 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
