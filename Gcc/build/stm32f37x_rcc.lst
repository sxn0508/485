ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f37x_rcc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.RCC_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	RCC_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	RCC_DeInit:
  28              	.LFB111:
  29              		.file 1 "../stdperiph/source/stm32f37x_rcc.c"
   1:../stdperiph/source/stm32f37x_rcc.c **** /**
   2:../stdperiph/source/stm32f37x_rcc.c ****   ******************************************************************************
   3:../stdperiph/source/stm32f37x_rcc.c ****   * @file    stm32f37x_rcc.c
   4:../stdperiph/source/stm32f37x_rcc.c ****   * @author  MCD Application Team
   5:../stdperiph/source/stm32f37x_rcc.c ****   * @version V1.0.0
   6:../stdperiph/source/stm32f37x_rcc.c ****   * @date    20-September-2012
   7:../stdperiph/source/stm32f37x_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../stdperiph/source/stm32f37x_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:../stdperiph/source/stm32f37x_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:../stdperiph/source/stm32f37x_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:../stdperiph/source/stm32f37x_rcc.c ****   *           + Peripheral clocks configuration
  12:../stdperiph/source/stm32f37x_rcc.c ****   *           + Interrupts and flags management
  13:../stdperiph/source/stm32f37x_rcc.c ****   *
  14:../stdperiph/source/stm32f37x_rcc.c ****  @verbatim
  15:../stdperiph/source/stm32f37x_rcc.c **** 
  16:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
  17:../stdperiph/source/stm32f37x_rcc.c ****                         ##### RCC specific features #####
  18:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
  19:../stdperiph/source/stm32f37x_rcc.c ****     [..] After reset the device is running from HSI (8 MHz) with Flash 0 WS, 
  20:../stdperiph/source/stm32f37x_rcc.c ****          all peripherals are off except internal SRAM, Flash and SWD.
  21:../stdperiph/source/stm32f37x_rcc.c ****          (#) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  22:../stdperiph/source/stm32f37x_rcc.c ****              all peripherals mapped on these busses are running at HSI speed.
  23:../stdperiph/source/stm32f37x_rcc.c ****          (#) The clock for all peripherals is switched off, except the SRAM and FLASH.
  24:../stdperiph/source/stm32f37x_rcc.c ****          (#) All GPIOs are in input floating state, except the SWD pins which
  25:../stdperiph/source/stm32f37x_rcc.c ****              are assigned to be used for debug purpose.
  26:../stdperiph/source/stm32f37x_rcc.c ****     [..] Once the device started from reset, the user application has to:
  27:../stdperiph/source/stm32f37x_rcc.c ****          (#) Configure the clock source to be used to drive the System clock
  28:../stdperiph/source/stm32f37x_rcc.c ****              (if the application needs higher frequency/performance)
  29:../stdperiph/source/stm32f37x_rcc.c ****          (#) Configure the System clock frequency and Flash settings
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 2


  30:../stdperiph/source/stm32f37x_rcc.c ****          (#) Configure the AHB and APB busses prescalers
  31:../stdperiph/source/stm32f37x_rcc.c ****          (#) Enable the clock for the peripheral(s) to be used
  32:../stdperiph/source/stm32f37x_rcc.c ****          (#) Configure the clock source(s) for peripherals which clocks are not
  33:../stdperiph/source/stm32f37x_rcc.c ****              derived from the System clock (SDADC, CEC, I2C, USART, RTC and IWDG)
  34:../stdperiph/source/stm32f37x_rcc.c **** 
  35:../stdperiph/source/stm32f37x_rcc.c ****  @endverbatim
  36:../stdperiph/source/stm32f37x_rcc.c ****   
  37:../stdperiph/source/stm32f37x_rcc.c ****   ******************************************************************************
  38:../stdperiph/source/stm32f37x_rcc.c ****   * @attention
  39:../stdperiph/source/stm32f37x_rcc.c ****   *
  40:../stdperiph/source/stm32f37x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  41:../stdperiph/source/stm32f37x_rcc.c ****   *
  42:../stdperiph/source/stm32f37x_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  43:../stdperiph/source/stm32f37x_rcc.c ****   * You may not use this file except in compliance with the License.
  44:../stdperiph/source/stm32f37x_rcc.c ****   * You may obtain a copy of the License at:
  45:../stdperiph/source/stm32f37x_rcc.c ****   *
  46:../stdperiph/source/stm32f37x_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  47:../stdperiph/source/stm32f37x_rcc.c ****   *
  48:../stdperiph/source/stm32f37x_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  49:../stdperiph/source/stm32f37x_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  50:../stdperiph/source/stm32f37x_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  51:../stdperiph/source/stm32f37x_rcc.c ****   * See the License for the specific language governing permissions and
  52:../stdperiph/source/stm32f37x_rcc.c ****   * limitations under the License.
  53:../stdperiph/source/stm32f37x_rcc.c ****   *
  54:../stdperiph/source/stm32f37x_rcc.c ****   ******************************************************************************
  55:../stdperiph/source/stm32f37x_rcc.c ****   */
  56:../stdperiph/source/stm32f37x_rcc.c **** 
  57:../stdperiph/source/stm32f37x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  58:../stdperiph/source/stm32f37x_rcc.c **** #include "stm32f37x_rcc.h"
  59:../stdperiph/source/stm32f37x_rcc.c **** 
  60:../stdperiph/source/stm32f37x_rcc.c **** /** @addtogroup STM32F37x_StdPeriph_Driver
  61:../stdperiph/source/stm32f37x_rcc.c ****   * @{
  62:../stdperiph/source/stm32f37x_rcc.c ****   */
  63:../stdperiph/source/stm32f37x_rcc.c **** 
  64:../stdperiph/source/stm32f37x_rcc.c **** /** @defgroup RCC 
  65:../stdperiph/source/stm32f37x_rcc.c ****   * @brief RCC driver modules
  66:../stdperiph/source/stm32f37x_rcc.c ****   * @{
  67:../stdperiph/source/stm32f37x_rcc.c ****   */ 
  68:../stdperiph/source/stm32f37x_rcc.c **** 
  69:../stdperiph/source/stm32f37x_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  70:../stdperiph/source/stm32f37x_rcc.c **** /* Private define ------------------------------------------------------------*/
  71:../stdperiph/source/stm32f37x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  72:../stdperiph/source/stm32f37x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  73:../stdperiph/source/stm32f37x_rcc.c **** 
  74:../stdperiph/source/stm32f37x_rcc.c **** /* --- CR Register ---*/
  75:../stdperiph/source/stm32f37x_rcc.c **** 
  76:../stdperiph/source/stm32f37x_rcc.c **** /* Alias word address of HSION bit */
  77:../stdperiph/source/stm32f37x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  78:../stdperiph/source/stm32f37x_rcc.c **** #define HSION_BitNumber           0x00
  79:../stdperiph/source/stm32f37x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  80:../stdperiph/source/stm32f37x_rcc.c **** 
  81:../stdperiph/source/stm32f37x_rcc.c **** /* Alias word address of PLLON bit */
  82:../stdperiph/source/stm32f37x_rcc.c **** #define PLLON_BitNumber           0x18
  83:../stdperiph/source/stm32f37x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  84:../stdperiph/source/stm32f37x_rcc.c **** 
  85:../stdperiph/source/stm32f37x_rcc.c **** /* Alias word address of CSSON bit */
  86:../stdperiph/source/stm32f37x_rcc.c **** #define CSSON_BitNumber           0x13
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 3


  87:../stdperiph/source/stm32f37x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  88:../stdperiph/source/stm32f37x_rcc.c **** 
  89:../stdperiph/source/stm32f37x_rcc.c **** /* --- CFGR Register ---*/
  90:../stdperiph/source/stm32f37x_rcc.c **** /* Alias word address of USBPRE bit */
  91:../stdperiph/source/stm32f37x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  92:../stdperiph/source/stm32f37x_rcc.c **** #define USBPRE_BitNumber          0x16
  93:../stdperiph/source/stm32f37x_rcc.c **** #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  94:../stdperiph/source/stm32f37x_rcc.c **** 
  95:../stdperiph/source/stm32f37x_rcc.c **** /* --- BDCR Register ---*/
  96:../stdperiph/source/stm32f37x_rcc.c **** 
  97:../stdperiph/source/stm32f37x_rcc.c **** /* Alias word address of RTCEN bit */
  98:../stdperiph/source/stm32f37x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  99:../stdperiph/source/stm32f37x_rcc.c **** #define RTCEN_BitNumber           0x0F
 100:../stdperiph/source/stm32f37x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 101:../stdperiph/source/stm32f37x_rcc.c **** 
 102:../stdperiph/source/stm32f37x_rcc.c **** /* Alias word address of BDRST bit */
 103:../stdperiph/source/stm32f37x_rcc.c **** #define BDRST_BitNumber           0x10
 104:../stdperiph/source/stm32f37x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 105:../stdperiph/source/stm32f37x_rcc.c **** 
 106:../stdperiph/source/stm32f37x_rcc.c **** /* --- CSR Register ---*/
 107:../stdperiph/source/stm32f37x_rcc.c **** 
 108:../stdperiph/source/stm32f37x_rcc.c **** /* Alias word address of LSION bit */
 109:../stdperiph/source/stm32f37x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 110:../stdperiph/source/stm32f37x_rcc.c **** #define LSION_BitNumber           0x00
 111:../stdperiph/source/stm32f37x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 112:../stdperiph/source/stm32f37x_rcc.c **** 
 113:../stdperiph/source/stm32f37x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 114:../stdperiph/source/stm32f37x_rcc.c **** /* RCC Flag Mask */
 115:../stdperiph/source/stm32f37x_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 116:../stdperiph/source/stm32f37x_rcc.c **** 
 117:../stdperiph/source/stm32f37x_rcc.c **** /* CFGR register byte 3 (Bits[31:23]) base address */
 118:../stdperiph/source/stm32f37x_rcc.c **** #define CFGR_BYTE3_ADDRESS        ((uint32_t)0x40021007)
 119:../stdperiph/source/stm32f37x_rcc.c **** 
 120:../stdperiph/source/stm32f37x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 121:../stdperiph/source/stm32f37x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 122:../stdperiph/source/stm32f37x_rcc.c **** 
 123:../stdperiph/source/stm32f37x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 124:../stdperiph/source/stm32f37x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 125:../stdperiph/source/stm32f37x_rcc.c **** 
 126:../stdperiph/source/stm32f37x_rcc.c **** /* CR register byte 2 (Bits[23:16]) base address */
 127:../stdperiph/source/stm32f37x_rcc.c **** #define CR_BYTE2_ADDRESS          ((uint32_t)0x40021002)
 128:../stdperiph/source/stm32f37x_rcc.c **** 
 129:../stdperiph/source/stm32f37x_rcc.c **** /* Private macro -------------------------------------------------------------*/
 130:../stdperiph/source/stm32f37x_rcc.c **** /* Private variables ---------------------------------------------------------*/
 131:../stdperiph/source/stm32f37x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 132:../stdperiph/source/stm32f37x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 133:../stdperiph/source/stm32f37x_rcc.c **** static __I uint8_t SDADCPrescTable[16] = {2, 4, 6, 8, 10, 12, 14, 16, 20, 24, 28, 32, 36, 40, 44, 4
 134:../stdperiph/source/stm32f37x_rcc.c **** 
 135:../stdperiph/source/stm32f37x_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 136:../stdperiph/source/stm32f37x_rcc.c **** /* Private functions ---------------------------------------------------------*/
 137:../stdperiph/source/stm32f37x_rcc.c **** 
 138:../stdperiph/source/stm32f37x_rcc.c **** /** @defgroup RCC_Private_Functions
 139:../stdperiph/source/stm32f37x_rcc.c ****   * @{
 140:../stdperiph/source/stm32f37x_rcc.c ****   */
 141:../stdperiph/source/stm32f37x_rcc.c **** 
 142:../stdperiph/source/stm32f37x_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 143:../stdperiph/source/stm32f37x_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 4


 144:../stdperiph/source/stm32f37x_rcc.c ****  *
 145:../stdperiph/source/stm32f37x_rcc.c **** @verbatim
 146:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
 147:../stdperiph/source/stm32f37x_rcc.c ****  ##### Internal-external clocks, PLL, CSS and MCO configuration functions #####
 148:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
 149:../stdperiph/source/stm32f37x_rcc.c ****     [..] This section provides functions allowing to configure the internal/external clocks,
 150:../stdperiph/source/stm32f37x_rcc.c ****          PLL, CSS and MCO.
 151:../stdperiph/source/stm32f37x_rcc.c ****          (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly 
 152:../stdperiph/source/stm32f37x_rcc.c ****              or through the PLL as System clock source.
 153:../stdperiph/source/stm32f37x_rcc.c ****              The HSI clock can be used also to clock the USART, I2C and CEC peripherals.
 154:../stdperiph/source/stm32f37x_rcc.c ****          (#) LSI (low-speed internal), 40 KHz low consumption RC used as IWDG and/or RTC
 155:../stdperiph/source/stm32f37x_rcc.c ****              clock source.
 156:../stdperiph/source/stm32f37x_rcc.c ****          (#) HSE (high-speed external), 4 to 72 MHz crystal oscillator used directly or
 157:../stdperiph/source/stm32f37x_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 158:../stdperiph/source/stm32f37x_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 159:../stdperiph/source/stm32f37x_rcc.c ****              LSE can be used also to clock the USART and CEC peripherals.
 160:../stdperiph/source/stm32f37x_rcc.c ****          (#) PLL (clocked by HSI or HSE), for System clock.
 161:../stdperiph/source/stm32f37x_rcc.c ****          (#) CSS (Clock security system), once enabled and if a HSE clock failure occurs 
 162:../stdperiph/source/stm32f37x_rcc.c ****              (HSE used directly or through PLL as System clock source), the System clock
 163:../stdperiph/source/stm32f37x_rcc.c ****              is automatically switched to HSI and an interrupt is generated if enabled. 
 164:../stdperiph/source/stm32f37x_rcc.c ****              The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 165:../stdperiph/source/stm32f37x_rcc.c ****              exception vector.   
 166:../stdperiph/source/stm32f37x_rcc.c ****          (#) MCO (microcontroller clock output), used to output SYSCLK, HSI, HSE, LSI, LSE,
 167:../stdperiph/source/stm32f37x_rcc.c ****              PLL (divided by 2) clock on PA8 pin.
 168:../stdperiph/source/stm32f37x_rcc.c **** 
 169:../stdperiph/source/stm32f37x_rcc.c **** @endverbatim
 170:../stdperiph/source/stm32f37x_rcc.c ****   * @{
 171:../stdperiph/source/stm32f37x_rcc.c ****   */
 172:../stdperiph/source/stm32f37x_rcc.c **** 
 173:../stdperiph/source/stm32f37x_rcc.c **** /**
 174:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 175:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 176:../stdperiph/source/stm32f37x_rcc.c ****   * @note      HSI ON and used as system clock source 
 177:../stdperiph/source/stm32f37x_rcc.c ****   * @note      HSE and PLL OFF
 178:../stdperiph/source/stm32f37x_rcc.c ****   * @note      AHB, APB1 and APB2 prescalers set to 1.
 179:../stdperiph/source/stm32f37x_rcc.c ****   * @note      CSS and MCO OFF
 180:../stdperiph/source/stm32f37x_rcc.c ****   * @note      All interrupts disabled
 181:../stdperiph/source/stm32f37x_rcc.c ****   * @note   However, this function doesn't modify the configuration of the
 182:../stdperiph/source/stm32f37x_rcc.c ****   * @note      Peripheral clocks
 183:../stdperiph/source/stm32f37x_rcc.c ****   * @note      LSI, LSE and RTC clocks
 184:../stdperiph/source/stm32f37x_rcc.c ****   * @param  None
 185:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 186:../stdperiph/source/stm32f37x_rcc.c ****   */
 187:../stdperiph/source/stm32f37x_rcc.c **** void RCC_DeInit(void)
 188:../stdperiph/source/stm32f37x_rcc.c **** {
  30              		.loc 1 188 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 189:../stdperiph/source/stm32f37x_rcc.c ****   /* Set HSION bit */
 190:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  35              		.loc 1 190 0
  36 0000 114B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38 0004 42F00102 		orr	r2, r2, #1
  39 0008 1A60     		str	r2, [r3]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 5


 191:../stdperiph/source/stm32f37x_rcc.c **** 
 192:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, SDADCPRE and MCOSEL[2:0] bits */
 193:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR &= (uint32_t)0x00FF0000;
  40              		.loc 1 193 0
  41 000a 5A68     		ldr	r2, [r3, #4]
  42 000c 02F47F02 		and	r2, r2, #16711680
  43 0010 5A60     		str	r2, [r3, #4]
 194:../stdperiph/source/stm32f37x_rcc.c ****   
 195:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 196:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  44              		.loc 1 196 0
  45 0012 1A68     		ldr	r2, [r3]
  46 0014 22F08472 		bic	r2, r2, #17301504
  47 0018 22F48032 		bic	r2, r2, #65536
  48 001c 1A60     		str	r2, [r3]
 197:../stdperiph/source/stm32f37x_rcc.c **** 
 198:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset HSEBYP bit */
 199:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  49              		.loc 1 199 0
  50 001e 1A68     		ldr	r2, [r3]
  51 0020 22F48022 		bic	r2, r2, #262144
  52 0024 1A60     		str	r2, [r3]
 200:../stdperiph/source/stm32f37x_rcc.c **** 
 201:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
 202:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  53              		.loc 1 202 0
  54 0026 5A68     		ldr	r2, [r3, #4]
  55 0028 22F4FE02 		bic	r2, r2, #8323072
  56 002c 5A60     		str	r2, [r3, #4]
 203:../stdperiph/source/stm32f37x_rcc.c **** 
 204:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset PREDIV1[3:0] bits */
 205:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
  57              		.loc 1 205 0
  58 002e DA6A     		ldr	r2, [r3, #44]
  59 0030 22F00F02 		bic	r2, r2, #15
  60 0034 DA62     		str	r2, [r3, #44]
 206:../stdperiph/source/stm32f37x_rcc.c **** 
 207:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset USARTSW[1:0], I2CSW and CECSW bits */
 208:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0F8C;
  61              		.loc 1 208 0
  62 0036 1A6B     		ldr	r2, [r3, #48]
  63 0038 22F0F022 		bic	r2, r2, #-268374016
  64 003c 22F07302 		bic	r2, r2, #115
  65 0040 1A63     		str	r2, [r3, #48]
 209:../stdperiph/source/stm32f37x_rcc.c ****   
 210:../stdperiph/source/stm32f37x_rcc.c ****   /* Disable all interrupts */
 211:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CIR = 0x00000000;
  66              		.loc 1 211 0
  67 0042 0022     		movs	r2, #0
  68 0044 9A60     		str	r2, [r3, #8]
  69 0046 7047     		bx	lr
  70              	.L3:
  71              		.align	2
  72              	.L2:
  73 0048 00100240 		.word	1073876992
  74              		.cfi_endproc
  75              	.LFE111:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 6


  77              		.section	.text.RCC_HSEConfig,"ax",%progbits
  78              		.align	2
  79              		.global	RCC_HSEConfig
  80              		.thumb
  81              		.thumb_func
  83              	RCC_HSEConfig:
  84              	.LFB112:
 212:../stdperiph/source/stm32f37x_rcc.c **** }
 213:../stdperiph/source/stm32f37x_rcc.c **** 
 214:../stdperiph/source/stm32f37x_rcc.c **** /**
 215:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 216:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 217:../stdperiph/source/stm32f37x_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 218:../stdperiph/source/stm32f37x_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 219:../stdperiph/source/stm32f37x_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 220:../stdperiph/source/stm32f37x_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 221:../stdperiph/source/stm32f37x_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 222:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
 223:../stdperiph/source/stm32f37x_rcc.c ****   * @note   This function resets the CSSON bit, so if the Clock security system(CSS)
 224:../stdperiph/source/stm32f37x_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 225:../stdperiph/source/stm32f37x_rcc.c ****   *         function.
 226:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 227:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 228:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 229:../stdperiph/source/stm32f37x_rcc.c ****   *                              6 HSE oscillator clock cycles.
 230:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 231:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 232:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 233:../stdperiph/source/stm32f37x_rcc.c ****   */
 234:../stdperiph/source/stm32f37x_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 235:../stdperiph/source/stm32f37x_rcc.c **** {
  85              		.loc 1 235 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL0:
 236:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 237:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 238:../stdperiph/source/stm32f37x_rcc.c **** 
 239:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 240:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
  91              		.loc 1 240 0
  92 0000 024B     		ldr	r3, .L5
  93 0002 0022     		movs	r2, #0
  94 0004 1A70     		strb	r2, [r3]
 241:../stdperiph/source/stm32f37x_rcc.c **** 
 242:../stdperiph/source/stm32f37x_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 243:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
  95              		.loc 1 243 0
  96 0006 1870     		strb	r0, [r3]
  97 0008 7047     		bx	lr
  98              	.L6:
  99 000a 00BF     		.align	2
 100              	.L5:
 101 000c 02100240 		.word	1073876994
 102              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 7


 103              	.LFE112:
 105              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 106              		.align	2
 107              		.global	RCC_AdjustHSICalibrationValue
 108              		.thumb
 109              		.thumb_func
 111              	RCC_AdjustHSICalibrationValue:
 112              	.LFB114:
 244:../stdperiph/source/stm32f37x_rcc.c **** 
 245:../stdperiph/source/stm32f37x_rcc.c **** }
 246:../stdperiph/source/stm32f37x_rcc.c **** 
 247:../stdperiph/source/stm32f37x_rcc.c **** /**
 248:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Waits for HSE start-up.
 249:../stdperiph/source/stm32f37x_rcc.c ****   * @note   This function waits on HSERDY flag to be set and return SUCCESS if 
 250:../stdperiph/source/stm32f37x_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 251:../stdperiph/source/stm32f37x_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 252:../stdperiph/source/stm32f37x_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f37x.h file. You can tailor it depending
 253:../stdperiph/source/stm32f37x_rcc.c ****   *         on the HSE crystal used in your application.
 254:../stdperiph/source/stm32f37x_rcc.c ****   * @param  None
 255:../stdperiph/source/stm32f37x_rcc.c ****   * @retval An ErrorStatus enumeration value:
 256:../stdperiph/source/stm32f37x_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 257:../stdperiph/source/stm32f37x_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 258:../stdperiph/source/stm32f37x_rcc.c ****   */
 259:../stdperiph/source/stm32f37x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 260:../stdperiph/source/stm32f37x_rcc.c **** {
 261:../stdperiph/source/stm32f37x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 262:../stdperiph/source/stm32f37x_rcc.c ****   ErrorStatus status = ERROR;
 263:../stdperiph/source/stm32f37x_rcc.c ****   FlagStatus HSEStatus = RESET;
 264:../stdperiph/source/stm32f37x_rcc.c ****   
 265:../stdperiph/source/stm32f37x_rcc.c ****   /* Wait till HSE is ready and if timeout is reached exit */
 266:../stdperiph/source/stm32f37x_rcc.c ****   do
 267:../stdperiph/source/stm32f37x_rcc.c ****   {
 268:../stdperiph/source/stm32f37x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 269:../stdperiph/source/stm32f37x_rcc.c ****     StartUpCounter++;  
 270:../stdperiph/source/stm32f37x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 271:../stdperiph/source/stm32f37x_rcc.c ****   
 272:../stdperiph/source/stm32f37x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 273:../stdperiph/source/stm32f37x_rcc.c ****   {
 274:../stdperiph/source/stm32f37x_rcc.c ****     status = SUCCESS;
 275:../stdperiph/source/stm32f37x_rcc.c ****   }
 276:../stdperiph/source/stm32f37x_rcc.c ****   else
 277:../stdperiph/source/stm32f37x_rcc.c ****   {
 278:../stdperiph/source/stm32f37x_rcc.c ****     status = ERROR;
 279:../stdperiph/source/stm32f37x_rcc.c ****   }  
 280:../stdperiph/source/stm32f37x_rcc.c ****   return (status);
 281:../stdperiph/source/stm32f37x_rcc.c **** }
 282:../stdperiph/source/stm32f37x_rcc.c **** 
 283:../stdperiph/source/stm32f37x_rcc.c **** /**
 284:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 285:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 286:../stdperiph/source/stm32f37x_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 287:../stdperiph/source/stm32f37x_rcc.c ****   * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
 288:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter must be a number between 0 and 0x1F.
 289:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 290:../stdperiph/source/stm32f37x_rcc.c ****   */
 291:../stdperiph/source/stm32f37x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 292:../stdperiph/source/stm32f37x_rcc.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 8


 113              		.loc 1 292 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL1:
 293:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmpreg = 0;
 294:../stdperiph/source/stm32f37x_rcc.c ****   
 295:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 296:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
 297:../stdperiph/source/stm32f37x_rcc.c ****   
 298:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg = RCC->CR;
 119              		.loc 1 298 0
 120 0000 034A     		ldr	r2, .L8
 121 0002 1368     		ldr	r3, [r2]
 122              	.LVL2:
 299:../stdperiph/source/stm32f37x_rcc.c ****   
 300:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 123              		.loc 1 301 0
 124 0004 23F0F803 		bic	r3, r3, #248
 125              	.LVL3:
 302:../stdperiph/source/stm32f37x_rcc.c ****   
 303:../stdperiph/source/stm32f37x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 126              		.loc 1 304 0
 127 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 128              	.LVL4:
 305:../stdperiph/source/stm32f37x_rcc.c ****   
 306:../stdperiph/source/stm32f37x_rcc.c ****   /* Store the new value */
 307:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CR = tmpreg;
 129              		.loc 1 307 0
 130 000c 1060     		str	r0, [r2]
 131 000e 7047     		bx	lr
 132              	.L9:
 133              		.align	2
 134              	.L8:
 135 0010 00100240 		.word	1073876992
 136              		.cfi_endproc
 137              	.LFE114:
 139              		.section	.text.RCC_HSICmd,"ax",%progbits
 140              		.align	2
 141              		.global	RCC_HSICmd
 142              		.thumb
 143              		.thumb_func
 145              	RCC_HSICmd:
 146              	.LFB115:
 308:../stdperiph/source/stm32f37x_rcc.c **** }
 309:../stdperiph/source/stm32f37x_rcc.c **** 
 310:../stdperiph/source/stm32f37x_rcc.c **** /**
 311:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After enabling the HSI, the application software should wait on 
 313:../stdperiph/source/stm32f37x_rcc.c ****   *         HSIRDY flag to be set indicating that HSI clock is stable and can
 314:../stdperiph/source/stm32f37x_rcc.c ****   *         be used to clock the PLL and/or system clock.
 315:../stdperiph/source/stm32f37x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL
 316:../stdperiph/source/stm32f37x_rcc.c ****   *         as system clock. In this case, you have to select another source 
 317:../stdperiph/source/stm32f37x_rcc.c ****   *         of the system clock then stop the HSI.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 9


 318:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 319:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the HSI.
 320:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 321:../stdperiph/source/stm32f37x_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 322:../stdperiph/source/stm32f37x_rcc.c ****   *         clock cycles.
 323:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 324:../stdperiph/source/stm32f37x_rcc.c ****   */
 325:../stdperiph/source/stm32f37x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 326:../stdperiph/source/stm32f37x_rcc.c **** {
 147              		.loc 1 326 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152              	.LVL5:
 327:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 328:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 329:../stdperiph/source/stm32f37x_rcc.c ****   
 330:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 153              		.loc 1 330 0
 154 0000 014B     		ldr	r3, .L11
 155 0002 1860     		str	r0, [r3]
 156 0004 7047     		bx	lr
 157              	.L12:
 158 0006 00BF     		.align	2
 159              	.L11:
 160 0008 00004242 		.word	1111621632
 161              		.cfi_endproc
 162              	.LFE115:
 164              		.section	.text.RCC_LSEConfig,"ax",%progbits
 165              		.align	2
 166              		.global	RCC_LSEConfig
 167              		.thumb
 168              		.thumb_func
 170              	RCC_LSEConfig:
 171              	.LFB116:
 331:../stdperiph/source/stm32f37x_rcc.c **** }
 332:../stdperiph/source/stm32f37x_rcc.c **** 
 333:../stdperiph/source/stm32f37x_rcc.c **** /**
 334:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 335:../stdperiph/source/stm32f37x_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to this
 336:../stdperiph/source/stm32f37x_rcc.c ****   *         domain after reset, you have to enable write access using 
 337:../stdperiph/source/stm32f37x_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 338:../stdperiph/source/stm32f37x_rcc.c ****   *         (to be done once after reset).
 339:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 340:../stdperiph/source/stm32f37x_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 341:../stdperiph/source/stm32f37x_rcc.c ****   *         is stable and can be used to clock the RTC.
 342:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 343:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 344:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 345:../stdperiph/source/stm32f37x_rcc.c ****   *                              6 LSE oscillator clock cycles.
 346:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 347:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 348:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 349:../stdperiph/source/stm32f37x_rcc.c ****   */
 350:../stdperiph/source/stm32f37x_rcc.c **** void RCC_LSEConfig(uint32_t RCC_LSE)
 351:../stdperiph/source/stm32f37x_rcc.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 10


 172              		.loc 1 351 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 177              	.LVL6:
 352:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 353:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 354:../stdperiph/source/stm32f37x_rcc.c **** 
 355:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 356:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset LSEON bit */
 357:../stdperiph/source/stm32f37x_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEON);
 178              		.loc 1 357 0
 179 0000 064B     		ldr	r3, .L14
 180 0002 1A6A     		ldr	r2, [r3, #32]
 181 0004 22F00102 		bic	r2, r2, #1
 182 0008 1A62     		str	r2, [r3, #32]
 358:../stdperiph/source/stm32f37x_rcc.c **** 
 359:../stdperiph/source/stm32f37x_rcc.c ****   /* Reset LSEBYP bit */
 360:../stdperiph/source/stm32f37x_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 183              		.loc 1 360 0
 184 000a 1A6A     		ldr	r2, [r3, #32]
 185 000c 22F00402 		bic	r2, r2, #4
 186 0010 1A62     		str	r2, [r3, #32]
 361:../stdperiph/source/stm32f37x_rcc.c **** 
 362:../stdperiph/source/stm32f37x_rcc.c ****   /* Configure LSE */
 363:../stdperiph/source/stm32f37x_rcc.c ****   RCC->BDCR |= RCC_LSE;
 187              		.loc 1 363 0
 188 0012 1A6A     		ldr	r2, [r3, #32]
 189 0014 1043     		orrs	r0, r0, r2
 190              	.LVL7:
 191 0016 1862     		str	r0, [r3, #32]
 192 0018 7047     		bx	lr
 193              	.L15:
 194 001a 00BF     		.align	2
 195              	.L14:
 196 001c 00100240 		.word	1073876992
 197              		.cfi_endproc
 198              	.LFE116:
 200              		.section	.text.RCC_LSEDriveConfig,"ax",%progbits
 201              		.align	2
 202              		.global	RCC_LSEDriveConfig
 203              		.thumb
 204              		.thumb_func
 206              	RCC_LSEDriveConfig:
 207              	.LFB117:
 364:../stdperiph/source/stm32f37x_rcc.c **** }
 365:../stdperiph/source/stm32f37x_rcc.c **** 
 366:../stdperiph/source/stm32f37x_rcc.c **** /**
 367:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE) drive capability.
 368:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_LSEDrive: specifies the new state of the LSE drive capability.
 369:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 370:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_LSEDrive_Low: LSE oscillator low drive capability.
 371:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_LSEDrive_MediumLow: LSE oscillator medium low drive capability.
 372:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
 373:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
 374:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 11


 375:../stdperiph/source/stm32f37x_rcc.c ****   */
 376:../stdperiph/source/stm32f37x_rcc.c **** void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
 377:../stdperiph/source/stm32f37x_rcc.c **** {
 208              		.loc 1 377 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LVL8:
 378:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 379:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
 380:../stdperiph/source/stm32f37x_rcc.c ****   
 381:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear LSEDRV[1:0] bits */
 382:../stdperiph/source/stm32f37x_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 214              		.loc 1 382 0
 215 0000 044B     		ldr	r3, .L17
 216 0002 1A6A     		ldr	r2, [r3, #32]
 217 0004 22F01802 		bic	r2, r2, #24
 218 0008 1A62     		str	r2, [r3, #32]
 383:../stdperiph/source/stm32f37x_rcc.c **** 
 384:../stdperiph/source/stm32f37x_rcc.c ****   /* Set the LSE Drive */
 385:../stdperiph/source/stm32f37x_rcc.c ****   RCC->BDCR |= RCC_LSEDrive;
 219              		.loc 1 385 0
 220 000a 1A6A     		ldr	r2, [r3, #32]
 221 000c 1043     		orrs	r0, r0, r2
 222              	.LVL9:
 223 000e 1862     		str	r0, [r3, #32]
 224 0010 7047     		bx	lr
 225              	.L18:
 226 0012 00BF     		.align	2
 227              	.L17:
 228 0014 00100240 		.word	1073876992
 229              		.cfi_endproc
 230              	.LFE117:
 232              		.section	.text.RCC_LSICmd,"ax",%progbits
 233              		.align	2
 234              		.global	RCC_LSICmd
 235              		.thumb
 236              		.thumb_func
 238              	RCC_LSICmd:
 239              	.LFB118:
 386:../stdperiph/source/stm32f37x_rcc.c **** }
 387:../stdperiph/source/stm32f37x_rcc.c **** 
 388:../stdperiph/source/stm32f37x_rcc.c **** /**
 389:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 390:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 391:../stdperiph/source/stm32f37x_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 392:../stdperiph/source/stm32f37x_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 393:../stdperiph/source/stm32f37x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 394:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the LSI.
 395:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 396:../stdperiph/source/stm32f37x_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 397:../stdperiph/source/stm32f37x_rcc.c ****   *         clock cycles.
 398:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 399:../stdperiph/source/stm32f37x_rcc.c ****   */
 400:../stdperiph/source/stm32f37x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 401:../stdperiph/source/stm32f37x_rcc.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 12


 240              		.loc 1 401 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL10:
 402:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 403:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 404:../stdperiph/source/stm32f37x_rcc.c ****   
 405:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 246              		.loc 1 405 0
 247 0000 014B     		ldr	r3, .L20
 248 0002 1860     		str	r0, [r3]
 249 0004 7047     		bx	lr
 250              	.L21:
 251 0006 00BF     		.align	2
 252              	.L20:
 253 0008 80044242 		.word	1111622784
 254              		.cfi_endproc
 255              	.LFE118:
 257              		.section	.text.RCC_PLLConfig,"ax",%progbits
 258              		.align	2
 259              		.global	RCC_PLLConfig
 260              		.thumb
 261              		.thumb_func
 263              	RCC_PLLConfig:
 264              	.LFB119:
 406:../stdperiph/source/stm32f37x_rcc.c **** }
 407:../stdperiph/source/stm32f37x_rcc.c **** 
 408:../stdperiph/source/stm32f37x_rcc.c **** /**
 409:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 410:../stdperiph/source/stm32f37x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 411:../stdperiph/source/stm32f37x_rcc.c ****   *
 412:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 413:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 414:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock selected as PLL clock source
 415:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 416:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The minimum input clock frequency for PLL is 2 MHz (when using HSE as
 417:../stdperiph/source/stm32f37x_rcc.c ****   *         PLL source).
 418:../stdperiph/source/stm32f37x_rcc.c ****   *
 419:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor, which drive the PLLVCO clock
 420:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be RCC_PLLMul_x where x:[2,16] 
 421:../stdperiph/source/stm32f37x_rcc.c ****   *
 422:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 423:../stdperiph/source/stm32f37x_rcc.c ****   */
 424:../stdperiph/source/stm32f37x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 425:../stdperiph/source/stm32f37x_rcc.c **** {
 265              		.loc 1 425 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270              	.LVL11:
 426:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 427:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 428:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 429:../stdperiph/source/stm32f37x_rcc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 13


 430:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear PLL Source [16] and Multiplier [21:18] bits */
 431:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 271              		.loc 1 431 0
 272 0000 044B     		ldr	r3, .L23
 273 0002 5A68     		ldr	r2, [r3, #4]
 274 0004 22F47412 		bic	r2, r2, #3997696
 275 0008 5A60     		str	r2, [r3, #4]
 432:../stdperiph/source/stm32f37x_rcc.c **** 
 433:../stdperiph/source/stm32f37x_rcc.c ****   /* Set the PLL Source and Multiplier */
 434:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 276              		.loc 1 434 0
 277 000a 5A68     		ldr	r2, [r3, #4]
 278 000c 0143     		orrs	r1, r1, r0
 279              	.LVL12:
 280 000e 1143     		orrs	r1, r1, r2
 281 0010 5960     		str	r1, [r3, #4]
 282 0012 7047     		bx	lr
 283              	.L24:
 284              		.align	2
 285              	.L23:
 286 0014 00100240 		.word	1073876992
 287              		.cfi_endproc
 288              	.LFE119:
 290              		.section	.text.RCC_PLLCmd,"ax",%progbits
 291              		.align	2
 292              		.global	RCC_PLLCmd
 293              		.thumb
 294              		.thumb_func
 296              	RCC_PLLCmd:
 297              	.LFB120:
 435:../stdperiph/source/stm32f37x_rcc.c **** }
 436:../stdperiph/source/stm32f37x_rcc.c **** 
 437:../stdperiph/source/stm32f37x_rcc.c **** /**
 438:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the PLL.
 439:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After enabling the PLL, the application software should wait on 
 440:../stdperiph/source/stm32f37x_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 441:../stdperiph/source/stm32f37x_rcc.c ****   *         be used as system clock source.
 442:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock source
 443:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The PLL is disabled by hardware when entering STOP and STANDBY modes.
 444:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the PLL.
 445:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 446:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 447:../stdperiph/source/stm32f37x_rcc.c ****   */
 448:../stdperiph/source/stm32f37x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 449:../stdperiph/source/stm32f37x_rcc.c **** {
 298              		.loc 1 449 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303              	.LVL13:
 450:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 451:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 452:../stdperiph/source/stm32f37x_rcc.c **** 
 453:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 304              		.loc 1 453 0
 305 0000 014B     		ldr	r3, .L26
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 14


 306 0002 1860     		str	r0, [r3]
 307 0004 7047     		bx	lr
 308              	.L27:
 309 0006 00BF     		.align	2
 310              	.L26:
 311 0008 60004242 		.word	1111621728
 312              		.cfi_endproc
 313              	.LFE120:
 315              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 316              		.align	2
 317              		.global	RCC_PREDIV1Config
 318              		.thumb
 319              		.thumb_func
 321              	RCC_PREDIV1Config:
 322              	.LFB121:
 454:../stdperiph/source/stm32f37x_rcc.c **** }
 455:../stdperiph/source/stm32f37x_rcc.c **** 
 456:../stdperiph/source/stm32f37x_rcc.c **** /**
 457:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 458:../stdperiph/source/stm32f37x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 459:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 460:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 461:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 462:../stdperiph/source/stm32f37x_rcc.c ****   */
 463:../stdperiph/source/stm32f37x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
 464:../stdperiph/source/stm32f37x_rcc.c **** {
 323              		.loc 1 464 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              	.LVL14:
 465:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmpreg = 0;
 466:../stdperiph/source/stm32f37x_rcc.c ****   
 467:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 468:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 469:../stdperiph/source/stm32f37x_rcc.c **** 
 470:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg = RCC->CFGR2;
 329              		.loc 1 470 0
 330 0000 034A     		ldr	r2, .L29
 331 0002 D36A     		ldr	r3, [r2, #44]
 332              	.LVL15:
 471:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear PREDIV1[3:0] bits */
 472:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg &= ~(RCC_CFGR2_PREDIV1);
 333              		.loc 1 472 0
 334 0004 23F00F03 		bic	r3, r3, #15
 335              	.LVL16:
 473:../stdperiph/source/stm32f37x_rcc.c **** 
 474:../stdperiph/source/stm32f37x_rcc.c ****   /* Set the PREDIV1 division factor */
 475:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg |= RCC_PREDIV1_Div;
 336              		.loc 1 475 0
 337 0008 1843     		orrs	r0, r0, r3
 338              	.LVL17:
 476:../stdperiph/source/stm32f37x_rcc.c **** 
 477:../stdperiph/source/stm32f37x_rcc.c ****   /* Store the new value */
 478:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR2 = tmpreg;
 339              		.loc 1 478 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 15


 340 000a D062     		str	r0, [r2, #44]
 341 000c 7047     		bx	lr
 342              	.L30:
 343 000e 00BF     		.align	2
 344              	.L29:
 345 0010 00100240 		.word	1073876992
 346              		.cfi_endproc
 347              	.LFE121:
 349              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 350              		.align	2
 351              		.global	RCC_ClockSecuritySystemCmd
 352              		.thumb
 353              		.thumb_func
 355              	RCC_ClockSecuritySystemCmd:
 356              	.LFB122:
 479:../stdperiph/source/stm32f37x_rcc.c **** }
 480:../stdperiph/source/stm32f37x_rcc.c **** 
 481:../stdperiph/source/stm32f37x_rcc.c **** /**
 482:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 483:../stdperiph/source/stm32f37x_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 484:../stdperiph/source/stm32f37x_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 485:../stdperiph/source/stm32f37x_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 486:../stdperiph/source/stm32f37x_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 487:../stdperiph/source/stm32f37x_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 488:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 489:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 490:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 491:../stdperiph/source/stm32f37x_rcc.c ****   */
 492:../stdperiph/source/stm32f37x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 493:../stdperiph/source/stm32f37x_rcc.c **** {
 357              		.loc 1 493 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362              	.LVL18:
 494:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 495:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 496:../stdperiph/source/stm32f37x_rcc.c ****   
 497:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 363              		.loc 1 497 0
 364 0000 014B     		ldr	r3, .L32
 365 0002 1860     		str	r0, [r3]
 366 0004 7047     		bx	lr
 367              	.L33:
 368 0006 00BF     		.align	2
 369              	.L32:
 370 0008 4C004242 		.word	1111621708
 371              		.cfi_endproc
 372              	.LFE122:
 374              		.section	.text.RCC_MCOConfig,"ax",%progbits
 375              		.align	2
 376              		.global	RCC_MCOConfig
 377              		.thumb
 378              		.thumb_func
 380              	RCC_MCOConfig:
 381              	.LFB123:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 16


 498:../stdperiph/source/stm32f37x_rcc.c **** }
 499:../stdperiph/source/stm32f37x_rcc.c **** 
 500:../stdperiph/source/stm32f37x_rcc.c **** /**
 501:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8).
 502:../stdperiph/source/stm32f37x_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 503:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 504:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 505:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_MCOSource_NoClock: No clock selected.
 506:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 507:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 508:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_MCOSource_SYSCLK: System clock selected.
 509:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 510:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 511:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 512:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 513:../stdperiph/source/stm32f37x_rcc.c ****   */
 514:../stdperiph/source/stm32f37x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource)
 515:../stdperiph/source/stm32f37x_rcc.c **** {
 382              		.loc 1 515 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386              		@ link register save eliminated.
 387              	.LVL19:
 516:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 517:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 518:../stdperiph/source/stm32f37x_rcc.c ****     
 519:../stdperiph/source/stm32f37x_rcc.c ****   /* Select MCO clock source and prescaler */
 520:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 388              		.loc 1 520 0
 389 0000 014B     		ldr	r3, .L35
 390 0002 1870     		strb	r0, [r3]
 391 0004 7047     		bx	lr
 392              	.L36:
 393 0006 00BF     		.align	2
 394              	.L35:
 395 0008 07100240 		.word	1073876999
 396              		.cfi_endproc
 397              	.LFE123:
 399              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 400              		.align	2
 401              		.global	RCC_SYSCLKConfig
 402              		.thumb
 403              		.thumb_func
 405              	RCC_SYSCLKConfig:
 406              	.LFB124:
 521:../stdperiph/source/stm32f37x_rcc.c **** }
 522:../stdperiph/source/stm32f37x_rcc.c **** 
 523:../stdperiph/source/stm32f37x_rcc.c **** /**
 524:../stdperiph/source/stm32f37x_rcc.c ****   * @}
 525:../stdperiph/source/stm32f37x_rcc.c ****   */
 526:../stdperiph/source/stm32f37x_rcc.c **** 
 527:../stdperiph/source/stm32f37x_rcc.c **** /** @defgroup RCC_Group2 System AHB, APB1 and APB2 busses clocks configuration functions
 528:../stdperiph/source/stm32f37x_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 529:../stdperiph/source/stm32f37x_rcc.c ****  *
 530:../stdperiph/source/stm32f37x_rcc.c **** @verbatim
 531:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 17


 532:../stdperiph/source/stm32f37x_rcc.c ****      ##### System, AHB, APB1 and APB2 busses clocks configuration functions #####
 533:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
 534:../stdperiph/source/stm32f37x_rcc.c **** 
 535:../stdperiph/source/stm32f37x_rcc.c ****     [..] This section provide functions allowing to configure the System, AHB, APB1 and 
 536:../stdperiph/source/stm32f37x_rcc.c ****          APB2 busses clocks.
 537:../stdperiph/source/stm32f37x_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 538:../stdperiph/source/stm32f37x_rcc.c ****              HSE and PLL.
 539:../stdperiph/source/stm32f37x_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable prescaler
 540:../stdperiph/source/stm32f37x_rcc.c ****              and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA and GPIO).
 541:../stdperiph/source/stm32f37x_rcc.c ****              APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 542:../stdperiph/source/stm32f37x_rcc.c ****              configurable prescalers and used to clock the peripherals mapped on these busses.
 543:../stdperiph/source/stm32f37x_rcc.c ****              You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks
 544:../stdperiph/source/stm32f37x_rcc.c **** 
 545:../stdperiph/source/stm32f37x_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 546:../stdperiph/source/stm32f37x_rcc.c ****              (+@) The FLASH program/erase clock  which is always HSI 8MHz clock.
 547:../stdperiph/source/stm32f37x_rcc.c ****              (+@) The USB 48 MHz clock which is derived from the PLL VCO clock.
 548:../stdperiph/source/stm32f37x_rcc.c ****              (+@) The USART clock which can be derived as well from HSI 8MHz, LSI or LSE.
 549:../stdperiph/source/stm32f37x_rcc.c ****              (+@) The I2C clock which can be derived as well from HSI 8MHz clock.
 550:../stdperiph/source/stm32f37x_rcc.c ****              (+@) The CEC clock which can be derived from HSI 8MHz or LSE. 
 551:../stdperiph/source/stm32f37x_rcc.c ****              (+@) The RTC clock which is derived from the LSE, LSI or 1 MHz HSE_RTC (HSE
 552:../stdperiph/source/stm32f37x_rcc.c ****                   divided by a programmable prescaler).
 553:../stdperiph/source/stm32f37x_rcc.c ****                   The System clock (SYSCLK) frequency must be higher or equal to the RTC
 554:../stdperiph/source/stm32f37x_rcc.c ****                   clock frequency.
 555:../stdperiph/source/stm32f37x_rcc.c ****              (+@) IWDG clock which is always the LSI clock.
 556:../stdperiph/source/stm32f37x_rcc.c ****        
 557:../stdperiph/source/stm32f37x_rcc.c ****          (#) The maximum frequency of the SYSCLK, HCLK, PCLK1 and PCLK2 is 72 MHz.
 558:../stdperiph/source/stm32f37x_rcc.c ****              Depending on the maximum frequency, the FLASH wait states (WS) should be 
 559:../stdperiph/source/stm32f37x_rcc.c ****              adapted accordingly:
 560:../stdperiph/source/stm32f37x_rcc.c ****         +---------------------------------+
 561:../stdperiph/source/stm32f37x_rcc.c ****         |  Wait states  |   HCLK clock    |
 562:../stdperiph/source/stm32f37x_rcc.c ****         |   (Latency)   | frequency (MHz) |
 563:../stdperiph/source/stm32f37x_rcc.c ****         |-------------- |-----------------|
 564:../stdperiph/source/stm32f37x_rcc.c ****         |0WS(1CPU cycle)| 0 < HCLK <= 24  |
 565:../stdperiph/source/stm32f37x_rcc.c ****         |---------------|-----------------| 
 566:../stdperiph/source/stm32f37x_rcc.c ****         |1WS(2CPU cycle)|24 < HCLK <=48   |
 567:../stdperiph/source/stm32f37x_rcc.c ****         |---------------|-----------------| 
 568:../stdperiph/source/stm32f37x_rcc.c ****         |2WS(3CPU cycle)|48 < HCLK <= 72  |
 569:../stdperiph/source/stm32f37x_rcc.c ****         +---------------------------------+
 570:../stdperiph/source/stm32f37x_rcc.c **** 
 571:../stdperiph/source/stm32f37x_rcc.c ****          (#) After reset, the System clock source is the HSI (8 MHz) with 0 WS and 
 572:../stdperiph/source/stm32f37x_rcc.c ****              prefetch is disabled.
 573:../stdperiph/source/stm32f37x_rcc.c ****     [..] It is recommended to use the following software sequences to tune the number
 574:../stdperiph/source/stm32f37x_rcc.c ****          of wait states needed to access the Flash memory with the CPU frequency (HCLK).
 575:../stdperiph/source/stm32f37x_rcc.c ****          (+) Increasing the CPU frequency
 576:../stdperiph/source/stm32f37x_rcc.c ****          (++) Program the Flash Prefetch buffer, using "FLASH_PrefetchBufferCmd(ENABLE)" 
 577:../stdperiph/source/stm32f37x_rcc.c ****               function
 578:../stdperiph/source/stm32f37x_rcc.c ****          (++) Check that Flash Prefetch buffer activation is taken into account by 
 579:../stdperiph/source/stm32f37x_rcc.c ****               reading FLASH_ACR using the FLASH_GetPrefetchBufferStatus() function
 580:../stdperiph/source/stm32f37x_rcc.c ****          (++) Program Flash WS to 1 or 2, using "FLASH_SetLatency()" function
 581:../stdperiph/source/stm32f37x_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 582:../stdperiph/source/stm32f37x_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 583:../stdperiph/source/stm32f37x_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 584:../stdperiph/source/stm32f37x_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 585:../stdperiph/source/stm32f37x_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function 
 586:../stdperiph/source/stm32f37x_rcc.c ****          (+) Decreasing the CPU frequency
 587:../stdperiph/source/stm32f37x_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 588:../stdperiph/source/stm32f37x_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 18


 589:../stdperiph/source/stm32f37x_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 590:../stdperiph/source/stm32f37x_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function
 591:../stdperiph/source/stm32f37x_rcc.c ****          (++) Program the new number of WS, using "FLASH_SetLatency()" function
 592:../stdperiph/source/stm32f37x_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 593:../stdperiph/source/stm32f37x_rcc.c ****          (++) Disable the Flash Prefetch buffer using "FLASH_PrefetchBufferCmd(DISABLE)" 
 594:../stdperiph/source/stm32f37x_rcc.c ****               function
 595:../stdperiph/source/stm32f37x_rcc.c ****          (++) Check that Flash Prefetch buffer deactivation is taken into account by reading FLASH_
 596:../stdperiph/source/stm32f37x_rcc.c ****               using the FLASH_GetPrefetchBufferStatus() function.
 597:../stdperiph/source/stm32f37x_rcc.c **** 
 598:../stdperiph/source/stm32f37x_rcc.c **** @endverbatim
 599:../stdperiph/source/stm32f37x_rcc.c ****   * @{
 600:../stdperiph/source/stm32f37x_rcc.c ****   */
 601:../stdperiph/source/stm32f37x_rcc.c **** 
 602:../stdperiph/source/stm32f37x_rcc.c **** /**
 603:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 604:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 605:../stdperiph/source/stm32f37x_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 606:../stdperiph/source/stm32f37x_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 607:../stdperiph/source/stm32f37x_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 608:../stdperiph/source/stm32f37x_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 609:../stdperiph/source/stm32f37x_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 610:../stdperiph/source/stm32f37x_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 611:../stdperiph/source/stm32f37x_rcc.c ****   *         occur when the clock source will be ready. 
 612:../stdperiph/source/stm32f37x_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 613:../stdperiph/source/stm32f37x_rcc.c ****   *         currently used as system clock source.  
 614:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock source 
 615:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 616:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 617:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 618:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 619:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 620:../stdperiph/source/stm32f37x_rcc.c ****   */
 621:../stdperiph/source/stm32f37x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 622:../stdperiph/source/stm32f37x_rcc.c **** {
 407              		.loc 1 622 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412              	.LVL20:
 623:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmpreg = 0;
 624:../stdperiph/source/stm32f37x_rcc.c ****   
 625:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 626:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 627:../stdperiph/source/stm32f37x_rcc.c ****   
 628:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg = RCC->CFGR;
 413              		.loc 1 628 0
 414 0000 034A     		ldr	r2, .L38
 415 0002 5368     		ldr	r3, [r2, #4]
 416              	.LVL21:
 629:../stdperiph/source/stm32f37x_rcc.c ****   
 630:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear SW[1:0] bits */
 631:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 417              		.loc 1 631 0
 418 0004 23F00303 		bic	r3, r3, #3
 419              	.LVL22:
 632:../stdperiph/source/stm32f37x_rcc.c ****   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 19


 633:../stdperiph/source/stm32f37x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 634:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 420              		.loc 1 634 0
 421 0008 1843     		orrs	r0, r0, r3
 422              	.LVL23:
 635:../stdperiph/source/stm32f37x_rcc.c ****   
 636:../stdperiph/source/stm32f37x_rcc.c ****   /* Store the new value */
 637:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR = tmpreg;
 423              		.loc 1 637 0
 424 000a 5060     		str	r0, [r2, #4]
 425 000c 7047     		bx	lr
 426              	.L39:
 427 000e 00BF     		.align	2
 428              	.L38:
 429 0010 00100240 		.word	1073876992
 430              		.cfi_endproc
 431              	.LFE124:
 433              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 434              		.align	2
 435              		.global	RCC_GetSYSCLKSource
 436              		.thumb
 437              		.thumb_func
 439              	RCC_GetSYSCLKSource:
 440              	.LFB125:
 638:../stdperiph/source/stm32f37x_rcc.c **** }
 639:../stdperiph/source/stm32f37x_rcc.c **** 
 640:../stdperiph/source/stm32f37x_rcc.c **** /**
 641:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 642:../stdperiph/source/stm32f37x_rcc.c ****   * @param  None
 643:../stdperiph/source/stm32f37x_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one 
 644:../stdperiph/source/stm32f37x_rcc.c ****   *         of the following values:
 645:../stdperiph/source/stm32f37x_rcc.c ****   *           - 0x00: HSI used as system clock
 646:../stdperiph/source/stm32f37x_rcc.c ****   *           - 0x04: HSE used as system clock  
 647:../stdperiph/source/stm32f37x_rcc.c ****   *           - 0x08: PLL used as system clock
 648:../stdperiph/source/stm32f37x_rcc.c ****   */
 649:../stdperiph/source/stm32f37x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 650:../stdperiph/source/stm32f37x_rcc.c **** {
 441              		.loc 1 650 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 651:../stdperiph/source/stm32f37x_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 446              		.loc 1 651 0
 447 0000 024B     		ldr	r3, .L41
 448 0002 5868     		ldr	r0, [r3, #4]
 652:../stdperiph/source/stm32f37x_rcc.c **** }
 449              		.loc 1 652 0
 450 0004 00F00C00 		and	r0, r0, #12
 451 0008 7047     		bx	lr
 452              	.L42:
 453 000a 00BF     		.align	2
 454              	.L41:
 455 000c 00100240 		.word	1073876992
 456              		.cfi_endproc
 457              	.LFE125:
 459              		.section	.text.RCC_HCLKConfig,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 20


 460              		.align	2
 461              		.global	RCC_HCLKConfig
 462              		.thumb
 463              		.thumb_func
 465              	RCC_HCLKConfig:
 466              	.LFB126:
 653:../stdperiph/source/stm32f37x_rcc.c **** 
 654:../stdperiph/source/stm32f37x_rcc.c **** /**
 655:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 656:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 657:../stdperiph/source/stm32f37x_rcc.c ****   *                     the system clock (SYSCLK).
 658:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 659:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div1:   AHB clock = SYSCLK
 660:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div2:   AHB clock = SYSCLK/2
 661:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div4:   AHB clock = SYSCLK/4
 662:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div8:   AHB clock = SYSCLK/8
 663:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div16:  AHB clock = SYSCLK/16
 664:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div64:  AHB clock = SYSCLK/64
 665:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 666:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 667:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 668:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 669:../stdperiph/source/stm32f37x_rcc.c ****   */
 670:../stdperiph/source/stm32f37x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 671:../stdperiph/source/stm32f37x_rcc.c **** {
 467              		.loc 1 671 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472              	.LVL24:
 672:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmpreg = 0;
 673:../stdperiph/source/stm32f37x_rcc.c ****   
 674:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 675:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 676:../stdperiph/source/stm32f37x_rcc.c ****   
 677:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg = RCC->CFGR;
 473              		.loc 1 677 0
 474 0000 034A     		ldr	r2, .L44
 475 0002 5368     		ldr	r3, [r2, #4]
 476              	.LVL25:
 678:../stdperiph/source/stm32f37x_rcc.c ****   
 679:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear HPRE[3:0] bits */
 680:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 477              		.loc 1 680 0
 478 0004 23F0F003 		bic	r3, r3, #240
 479              	.LVL26:
 681:../stdperiph/source/stm32f37x_rcc.c ****   
 682:../stdperiph/source/stm32f37x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 683:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 480              		.loc 1 683 0
 481 0008 1843     		orrs	r0, r0, r3
 482              	.LVL27:
 684:../stdperiph/source/stm32f37x_rcc.c ****   
 685:../stdperiph/source/stm32f37x_rcc.c ****   /* Store the new value */
 686:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR = tmpreg;
 483              		.loc 1 686 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 21


 484 000a 5060     		str	r0, [r2, #4]
 485 000c 7047     		bx	lr
 486              	.L45:
 487 000e 00BF     		.align	2
 488              	.L44:
 489 0010 00100240 		.word	1073876992
 490              		.cfi_endproc
 491              	.LFE126:
 493              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 494              		.align	2
 495              		.global	RCC_PCLK1Config
 496              		.thumb
 497              		.thumb_func
 499              	RCC_PCLK1Config:
 500              	.LFB127:
 687:../stdperiph/source/stm32f37x_rcc.c **** }
 688:../stdperiph/source/stm32f37x_rcc.c **** 
 689:../stdperiph/source/stm32f37x_rcc.c **** /**
 690:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 691:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 692:../stdperiph/source/stm32f37x_rcc.c ****   *         the AHB clock (HCLK).
 693:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 694:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HCLK_Div1: APB1 clock = HCLK
 695:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 696:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 697:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 698:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 699:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 700:../stdperiph/source/stm32f37x_rcc.c ****   */
 701:../stdperiph/source/stm32f37x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 702:../stdperiph/source/stm32f37x_rcc.c **** {
 501              		.loc 1 702 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506              	.LVL28:
 703:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmpreg = 0;
 704:../stdperiph/source/stm32f37x_rcc.c ****   
 705:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 706:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 707:../stdperiph/source/stm32f37x_rcc.c ****   
 708:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg = RCC->CFGR;
 507              		.loc 1 708 0
 508 0000 034A     		ldr	r2, .L47
 509 0002 5368     		ldr	r3, [r2, #4]
 510              	.LVL29:
 709:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 710:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 511              		.loc 1 710 0
 512 0004 23F4E063 		bic	r3, r3, #1792
 513              	.LVL30:
 711:../stdperiph/source/stm32f37x_rcc.c ****   
 712:../stdperiph/source/stm32f37x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 713:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg |= RCC_HCLK;
 514              		.loc 1 713 0
 515 0008 1843     		orrs	r0, r0, r3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 22


 516              	.LVL31:
 714:../stdperiph/source/stm32f37x_rcc.c ****   
 715:../stdperiph/source/stm32f37x_rcc.c ****   /* Store the new value */
 716:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR = tmpreg;
 517              		.loc 1 716 0
 518 000a 5060     		str	r0, [r2, #4]
 519 000c 7047     		bx	lr
 520              	.L48:
 521 000e 00BF     		.align	2
 522              	.L47:
 523 0010 00100240 		.word	1073876992
 524              		.cfi_endproc
 525              	.LFE127:
 527              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 528              		.align	2
 529              		.global	RCC_PCLK2Config
 530              		.thumb
 531              		.thumb_func
 533              	RCC_PCLK2Config:
 534              	.LFB128:
 717:../stdperiph/source/stm32f37x_rcc.c **** }
 718:../stdperiph/source/stm32f37x_rcc.c **** 
 719:../stdperiph/source/stm32f37x_rcc.c **** /**
 720:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 721:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 722:../stdperiph/source/stm32f37x_rcc.c ****   *         the AHB clock (HCLK).
 723:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 724:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_HCLK_Div1: APB2 clock = HCLK
 725:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 726:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 727:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 728:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 729:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 730:../stdperiph/source/stm32f37x_rcc.c ****   */
 731:../stdperiph/source/stm32f37x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 732:../stdperiph/source/stm32f37x_rcc.c **** {
 535              		.loc 1 732 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540              	.LVL32:
 733:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmpreg = 0;
 734:../stdperiph/source/stm32f37x_rcc.c ****   
 735:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 736:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 737:../stdperiph/source/stm32f37x_rcc.c ****   
 738:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg = RCC->CFGR;
 541              		.loc 1 738 0
 542 0000 034A     		ldr	r2, .L50
 543 0002 5368     		ldr	r3, [r2, #4]
 544              	.LVL33:
 739:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 740:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 545              		.loc 1 740 0
 546 0004 23F46053 		bic	r3, r3, #14336
 547              	.LVL34:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 23


 741:../stdperiph/source/stm32f37x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 742:../stdperiph/source/stm32f37x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 548              		.loc 1 742 0
 549 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 550              	.LVL35:
 743:../stdperiph/source/stm32f37x_rcc.c ****   /* Store the new value */
 744:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR = tmpreg;
 551              		.loc 1 744 0
 552 000c 5060     		str	r0, [r2, #4]
 553 000e 7047     		bx	lr
 554              	.L51:
 555              		.align	2
 556              	.L50:
 557 0010 00100240 		.word	1073876992
 558              		.cfi_endproc
 559              	.LFE128:
 561              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 562              		.align	2
 563              		.global	RCC_ADCCLKConfig
 564              		.thumb
 565              		.thumb_func
 567              	RCC_ADCCLKConfig:
 568              	.LFB129:
 745:../stdperiph/source/stm32f37x_rcc.c **** }
 746:../stdperiph/source/stm32f37x_rcc.c **** 
 747:../stdperiph/source/stm32f37x_rcc.c **** /**
 748:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 749:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 750:../stdperiph/source/stm32f37x_rcc.c ****   *         the APB2 clock (PCLK2).
 751:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 752:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 753:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 754:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 755:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 756:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 757:../stdperiph/source/stm32f37x_rcc.c ****   */
 758:../stdperiph/source/stm32f37x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 759:../stdperiph/source/stm32f37x_rcc.c **** {
 569              		.loc 1 759 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL36:
 760:../stdperiph/source/stm32f37x_rcc.c ****  
 761:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 762:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 763:../stdperiph/source/stm32f37x_rcc.c ****   
 764:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 765:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 575              		.loc 1 765 0
 576 0000 044B     		ldr	r3, .L53
 577 0002 5A68     		ldr	r2, [r3, #4]
 578 0004 22F44042 		bic	r2, r2, #49152
 579 0008 5A60     		str	r2, [r3, #4]
 766:../stdperiph/source/stm32f37x_rcc.c ****   
 767:../stdperiph/source/stm32f37x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 24


 768:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR |= RCC_PCLK2;
 580              		.loc 1 768 0
 581 000a 5A68     		ldr	r2, [r3, #4]
 582 000c 1043     		orrs	r0, r0, r2
 583              	.LVL37:
 584 000e 5860     		str	r0, [r3, #4]
 585 0010 7047     		bx	lr
 586              	.L54:
 587 0012 00BF     		.align	2
 588              	.L53:
 589 0014 00100240 		.word	1073876992
 590              		.cfi_endproc
 591              	.LFE129:
 593              		.section	.text.RCC_SDADCCLKConfig,"ax",%progbits
 594              		.align	2
 595              		.global	RCC_SDADCCLKConfig
 596              		.thumb
 597              		.thumb_func
 599              	RCC_SDADCCLKConfig:
 600              	.LFB130:
 769:../stdperiph/source/stm32f37x_rcc.c **** }
 770:../stdperiph/source/stm32f37x_rcc.c **** 
 771:../stdperiph/source/stm32f37x_rcc.c **** /**
 772:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the SDADC clock (SDADCCLK).
 773:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 774:../stdperiph/source/stm32f37x_rcc.c ****   *         the system clock (SYSCLK).
 775:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 776:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div2: SDADC clock = SYSCLK/2
 777:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div4: SDADC clock = SYSCLK/4
 778:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div6: SDADC clock = SYSCLK/6
 779:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div8: SDADC clock = SYSCLK/8
 780:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div10: SDADC clock = SYSCLK/10
 781:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div12: SDADC clock = SYSCLK/12
 782:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div14: SDADC clock = SYSCLK/14
 783:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div16: SDADC clock = SYSCLK/16
 784:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div20: SDADC clock = SYSCLK/20
 785:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div24: SDADC clock = SYSCLK/24
 786:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div28: SDADC clock = SYSCLK/28
 787:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div32: SDADC clock = SYSCLK/32
 788:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div36: SDADC clock = SYSCLK/36
 789:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div40: SDADC clock = SYSCLK/40
 790:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div44: SDADC clock = SYSCLK/44
 791:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_SDADCCLK_SYSCLK_Div48: SDADC clock = SYSCLK/48                       
 792:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 793:../stdperiph/source/stm32f37x_rcc.c ****   */
 794:../stdperiph/source/stm32f37x_rcc.c **** void RCC_SDADCCLKConfig(uint32_t RCC_SDADCCLK)
 795:../stdperiph/source/stm32f37x_rcc.c **** {   
 601              		.loc 1 795 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 606              	.LVL38:
 796:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 797:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_SDADCCLK(RCC_SDADCCLK));
 798:../stdperiph/source/stm32f37x_rcc.c ****   
 799:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 25


 800:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR &= ~RCC_CFGR_SDADCPRE;
 607              		.loc 1 800 0
 608 0000 044B     		ldr	r3, .L56
 609 0002 5A68     		ldr	r2, [r3, #4]
 610 0004 22F07842 		bic	r2, r2, #-134217728
 611 0008 5A60     		str	r2, [r3, #4]
 801:../stdperiph/source/stm32f37x_rcc.c ****   
 802:../stdperiph/source/stm32f37x_rcc.c ****   /* Set SDADCPRE[4:0] bits according to RCC_PCLK2 value */
 803:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR |= RCC_SDADCCLK;
 612              		.loc 1 803 0
 613 000a 5A68     		ldr	r2, [r3, #4]
 614 000c 1043     		orrs	r0, r0, r2
 615              	.LVL39:
 616 000e 5860     		str	r0, [r3, #4]
 617 0010 7047     		bx	lr
 618              	.L57:
 619 0012 00BF     		.align	2
 620              	.L56:
 621 0014 00100240 		.word	1073876992
 622              		.cfi_endproc
 623              	.LFE130:
 625              		.section	.text.RCC_CECCLKConfig,"ax",%progbits
 626              		.align	2
 627              		.global	RCC_CECCLKConfig
 628              		.thumb
 629              		.thumb_func
 631              	RCC_CECCLKConfig:
 632              	.LFB131:
 804:../stdperiph/source/stm32f37x_rcc.c **** }
 805:../stdperiph/source/stm32f37x_rcc.c **** 
 806:../stdperiph/source/stm32f37x_rcc.c **** /**
 807:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the CEC clock (CECCLK).
 808:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_CECCLK: defines the CEC clock source. This clock is derived 
 809:../stdperiph/source/stm32f37x_rcc.c ****   *         from the HSI or LSE clock.
 810:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 811:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_CECCLK_HSI_Div244: CEC clock = HSI/244 (32768Hz)
 812:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_CECCLK_LSE: CEC clock = LSE
 813:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 814:../stdperiph/source/stm32f37x_rcc.c ****   */
 815:../stdperiph/source/stm32f37x_rcc.c **** void RCC_CECCLKConfig(uint32_t RCC_CECCLK)
 816:../stdperiph/source/stm32f37x_rcc.c **** { 
 633              		.loc 1 816 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638              	.LVL40:
 817:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 818:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_CECCLK(RCC_CECCLK));
 819:../stdperiph/source/stm32f37x_rcc.c **** 
 820:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear CECSW bit */
 821:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 639              		.loc 1 821 0
 640 0000 044B     		ldr	r3, .L59
 641 0002 1A6B     		ldr	r2, [r3, #48]
 642 0004 22F04002 		bic	r2, r2, #64
 643 0008 1A63     		str	r2, [r3, #48]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 26


 822:../stdperiph/source/stm32f37x_rcc.c ****   /* Set CECSW bits according to RCC_CECCLK value */
 823:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR3 |= RCC_CECCLK;
 644              		.loc 1 823 0
 645 000a 1A6B     		ldr	r2, [r3, #48]
 646 000c 1043     		orrs	r0, r0, r2
 647              	.LVL41:
 648 000e 1863     		str	r0, [r3, #48]
 649 0010 7047     		bx	lr
 650              	.L60:
 651 0012 00BF     		.align	2
 652              	.L59:
 653 0014 00100240 		.word	1073876992
 654              		.cfi_endproc
 655              	.LFE131:
 657              		.section	.text.RCC_I2CCLKConfig,"ax",%progbits
 658              		.align	2
 659              		.global	RCC_I2CCLKConfig
 660              		.thumb
 661              		.thumb_func
 663              	RCC_I2CCLKConfig:
 664              	.LFB132:
 824:../stdperiph/source/stm32f37x_rcc.c **** }
 825:../stdperiph/source/stm32f37x_rcc.c **** 
 826:../stdperiph/source/stm32f37x_rcc.c **** /**
 827:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the I2C clock (I2CCLK).
 828:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_I2CCLK: defines the I2C clock source. This clock is derived 
 829:../stdperiph/source/stm32f37x_rcc.c ****   *         from the HSI or System clock.
 830:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 831:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_I2CxCLK_HSI: I2Cx clock = HSI
 832:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
 833:../stdperiph/source/stm32f37x_rcc.c ****   * @note  x can be 1 or 2  
 834:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 835:../stdperiph/source/stm32f37x_rcc.c ****   */
 836:../stdperiph/source/stm32f37x_rcc.c **** void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
 837:../stdperiph/source/stm32f37x_rcc.c **** { 
 665              		.loc 1 837 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670              	.LVL42:
 838:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmp = 0;
 839:../stdperiph/source/stm32f37x_rcc.c ****   
 840:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 841:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));
 842:../stdperiph/source/stm32f37x_rcc.c **** 
 843:../stdperiph/source/stm32f37x_rcc.c ****   tmp = (RCC_I2CCLK >> 28);
 844:../stdperiph/source/stm32f37x_rcc.c ****   
 845:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear I2CSW bit */
 846:../stdperiph/source/stm32f37x_rcc.c ****   if (tmp == 0)
 671              		.loc 1 846 0
 672 0000 030F     		lsrs	r3, r0, #28
 673 0002 05D1     		bne	.L62
 847:../stdperiph/source/stm32f37x_rcc.c ****   {
 848:../stdperiph/source/stm32f37x_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 674              		.loc 1 848 0
 675 0004 074A     		ldr	r2, .L64
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 27


 676 0006 136B     		ldr	r3, [r2, #48]
 677 0008 23F01003 		bic	r3, r3, #16
 678 000c 1363     		str	r3, [r2, #48]
 679 000e 04E0     		b	.L63
 680              	.L62:
 849:../stdperiph/source/stm32f37x_rcc.c ****   }
 850:../stdperiph/source/stm32f37x_rcc.c ****   else
 851:../stdperiph/source/stm32f37x_rcc.c ****   {
 852:../stdperiph/source/stm32f37x_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 681              		.loc 1 852 0
 682 0010 044A     		ldr	r2, .L64
 683 0012 136B     		ldr	r3, [r2, #48]
 684 0014 23F02003 		bic	r3, r3, #32
 685 0018 1363     		str	r3, [r2, #48]
 686              	.L63:
 853:../stdperiph/source/stm32f37x_rcc.c ****   }
 854:../stdperiph/source/stm32f37x_rcc.c ****   /* Set I2CSW bits according to RCC_I2CCLK value */
 855:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR3 |= RCC_I2CCLK;
 687              		.loc 1 855 0
 688 001a 024A     		ldr	r2, .L64
 689 001c 136B     		ldr	r3, [r2, #48]
 690 001e 1843     		orrs	r0, r0, r3
 691              	.LVL43:
 692 0020 1063     		str	r0, [r2, #48]
 693 0022 7047     		bx	lr
 694              	.L65:
 695              		.align	2
 696              	.L64:
 697 0024 00100240 		.word	1073876992
 698              		.cfi_endproc
 699              	.LFE132:
 701              		.section	.text.RCC_USARTCLKConfig,"ax",%progbits
 702              		.align	2
 703              		.global	RCC_USARTCLKConfig
 704              		.thumb
 705              		.thumb_func
 707              	RCC_USARTCLKConfig:
 708              	.LFB133:
 856:../stdperiph/source/stm32f37x_rcc.c **** }
 857:../stdperiph/source/stm32f37x_rcc.c **** 
 858:../stdperiph/source/stm32f37x_rcc.c **** /**
 859:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the USART clock (USARTCLK).
 860:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_USARTCLK: defines the USART clock source. This clock is derived 
 861:../stdperiph/source/stm32f37x_rcc.c ****   *         from the HSI or System clock.
 862:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 863:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_USARTxCLK_PCLK: USART clock = APB Clock (PCLK)
 864:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_USARTxCLK_SYSCLK: USART clock = System Clock
 865:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_USARTxCLK_LSE: USART clock = LSE Clock
 866:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
 867:../stdperiph/source/stm32f37x_rcc.c ****   * @note  x can be 1, 2 or 3  
 868:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 869:../stdperiph/source/stm32f37x_rcc.c ****   */
 870:../stdperiph/source/stm32f37x_rcc.c **** void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
 871:../stdperiph/source/stm32f37x_rcc.c **** { 
 709              		.loc 1 871 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 28


 712              		@ frame_needed = 0, uses_anonymous_args = 0
 713              		@ link register save eliminated.
 714              	.LVL44:
 872:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmp = 0;
 873:../stdperiph/source/stm32f37x_rcc.c ****   
 874:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 875:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));
 876:../stdperiph/source/stm32f37x_rcc.c **** 
 877:../stdperiph/source/stm32f37x_rcc.c ****   tmp = (RCC_USARTCLK >> 28);
 715              		.loc 1 877 0
 716 0000 030F     		lsrs	r3, r0, #28
 717              	.LVL45:
 878:../stdperiph/source/stm32f37x_rcc.c **** 
 879:../stdperiph/source/stm32f37x_rcc.c ****   /* Clear USARTSW[1:0] bit */
 880:../stdperiph/source/stm32f37x_rcc.c ****   switch (tmp)
 718              		.loc 1 880 0
 719 0002 022B     		cmp	r3, #2
 720 0004 09D0     		beq	.L68
 721 0006 032B     		cmp	r3, #3
 722 0008 0DD0     		beq	.L69
 723 000a 012B     		cmp	r3, #1
 724 000c 10D1     		bne	.L67
 881:../stdperiph/source/stm32f37x_rcc.c ****   {
 882:../stdperiph/source/stm32f37x_rcc.c ****     case 0x01:  /* clear USART1SW */
 883:../stdperiph/source/stm32f37x_rcc.c ****       RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 725              		.loc 1 883 0
 726 000e 0B4A     		ldr	r2, .L71
 727 0010 136B     		ldr	r3, [r2, #48]
 728              	.LVL46:
 729 0012 23F00303 		bic	r3, r3, #3
 730 0016 1363     		str	r3, [r2, #48]
 884:../stdperiph/source/stm32f37x_rcc.c ****       break;
 731              		.loc 1 884 0
 732 0018 0AE0     		b	.L67
 733              	.LVL47:
 734              	.L68:
 885:../stdperiph/source/stm32f37x_rcc.c ****     case 0x02:  /* clear USART2SW */
 886:../stdperiph/source/stm32f37x_rcc.c ****       RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 735              		.loc 1 886 0
 736 001a 084A     		ldr	r2, .L71
 737 001c 136B     		ldr	r3, [r2, #48]
 738              	.LVL48:
 739 001e 23F44033 		bic	r3, r3, #196608
 740 0022 1363     		str	r3, [r2, #48]
 887:../stdperiph/source/stm32f37x_rcc.c ****       break;
 741              		.loc 1 887 0
 742 0024 04E0     		b	.L67
 743              	.LVL49:
 744              	.L69:
 888:../stdperiph/source/stm32f37x_rcc.c ****     case 0x03:  /* clear USART3SW */
 889:../stdperiph/source/stm32f37x_rcc.c ****       RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 745              		.loc 1 889 0
 746 0026 054A     		ldr	r2, .L71
 747 0028 136B     		ldr	r3, [r2, #48]
 748              	.LVL50:
 749 002a 23F44023 		bic	r3, r3, #786432
 750 002e 1363     		str	r3, [r2, #48]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 29


 751              	.L67:
 890:../stdperiph/source/stm32f37x_rcc.c ****       break;
 891:../stdperiph/source/stm32f37x_rcc.c ****   default:
 892:../stdperiph/source/stm32f37x_rcc.c ****       break;
 893:../stdperiph/source/stm32f37x_rcc.c ****   }
 894:../stdperiph/source/stm32f37x_rcc.c **** 
 895:../stdperiph/source/stm32f37x_rcc.c ****   /* Set USARTSW bits according to RCC_USARTCLK value */
 896:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CFGR3 |= RCC_USARTCLK;
 752              		.loc 1 896 0
 753 0030 024A     		ldr	r2, .L71
 754 0032 136B     		ldr	r3, [r2, #48]
 755 0034 1843     		orrs	r0, r0, r3
 756              	.LVL51:
 757 0036 1063     		str	r0, [r2, #48]
 758 0038 7047     		bx	lr
 759              	.L72:
 760 003a 00BF     		.align	2
 761              	.L71:
 762 003c 00100240 		.word	1073876992
 763              		.cfi_endproc
 764              	.LFE133:
 766              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 767              		.align	2
 768              		.global	RCC_USBCLKConfig
 769              		.thumb
 770              		.thumb_func
 772              	RCC_USBCLKConfig:
 773              	.LFB134:
 897:../stdperiph/source/stm32f37x_rcc.c **** }
 898:../stdperiph/source/stm32f37x_rcc.c **** 
 899:../stdperiph/source/stm32f37x_rcc.c **** /**
 900:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 901:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 902:../stdperiph/source/stm32f37x_rcc.c ****   *         derived from the PLL output.
 903:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
 904:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 905:../stdperiph/source/stm32f37x_rcc.c ****   *                  clock source
 906:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 907:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 908:../stdperiph/source/stm32f37x_rcc.c ****   */
 909:../stdperiph/source/stm32f37x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 910:../stdperiph/source/stm32f37x_rcc.c **** {
 774              		.loc 1 910 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779              	.LVL52:
 911:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
 912:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 913:../stdperiph/source/stm32f37x_rcc.c **** 
 914:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 780              		.loc 1 914 0
 781 0000 014B     		ldr	r3, .L74
 782 0002 1860     		str	r0, [r3]
 783 0004 7047     		bx	lr
 784              	.L75:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 30


 785 0006 00BF     		.align	2
 786              	.L74:
 787 0008 D8004242 		.word	1111621848
 788              		.cfi_endproc
 789              	.LFE134:
 791              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 792              		.align	2
 793              		.global	RCC_GetClocksFreq
 794              		.thumb
 795              		.thumb_func
 797              	RCC_GetClocksFreq:
 798              	.LFB135:
 915:../stdperiph/source/stm32f37x_rcc.c **** }
 916:../stdperiph/source/stm32f37x_rcc.c **** 
 917:../stdperiph/source/stm32f37x_rcc.c **** /**
 918:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Returns the frequencies of the System, AHB, APB2 and APB1 busses clocks.
 919:../stdperiph/source/stm32f37x_rcc.c ****   * @note    The frequency returned by this function is not the real frequency
 920:../stdperiph/source/stm32f37x_rcc.c ****   *           in the chip. It is calculated based on the predefined constant and
 921:../stdperiph/source/stm32f37x_rcc.c ****   *           the source selected by RCC_SYSCLKConfig():
 922:../stdperiph/source/stm32f37x_rcc.c ****   *                                              
 923:../stdperiph/source/stm32f37x_rcc.c ****   * @note     If SYSCLK source is HSI, function returns constant HSI_VALUE(*)
 924:../stdperiph/source/stm32f37x_rcc.c ****   *                                              
 925:../stdperiph/source/stm32f37x_rcc.c ****   * @note     If SYSCLK source is HSE, function returns constant HSE_VALUE(**)
 926:../stdperiph/source/stm32f37x_rcc.c ****   *                          
 927:../stdperiph/source/stm32f37x_rcc.c ****   * @note     If SYSCLK source is PLL, function returns constant HSE_VALUE(**) 
 928:../stdperiph/source/stm32f37x_rcc.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 929:../stdperiph/source/stm32f37x_rcc.c ****   *         
 930:../stdperiph/source/stm32f37x_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f37x.h file (default value
 931:../stdperiph/source/stm32f37x_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
 932:../stdperiph/source/stm32f37x_rcc.c ****   *               in voltage and temperature, refer to RCC_AdjustHSICalibrationValue().   
 933:../stdperiph/source/stm32f37x_rcc.c ****   *    
 934:../stdperiph/source/stm32f37x_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f37x.h file (default value
 935:../stdperiph/source/stm32f37x_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
 936:../stdperiph/source/stm32f37x_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 937:../stdperiph/source/stm32f37x_rcc.c ****   *                return wrong result.
 938:../stdperiph/source/stm32f37x_rcc.c ****   *                
 939:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 940:../stdperiph/source/stm32f37x_rcc.c ****   *         value for HSE crystal.   
 941:../stdperiph/source/stm32f37x_rcc.c ****   *             
 942:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold 
 943:../stdperiph/source/stm32f37x_rcc.c ****   *         the clocks frequencies. 
 944:../stdperiph/source/stm32f37x_rcc.c ****   *     
 945:../stdperiph/source/stm32f37x_rcc.c ****   * @note   This function can be used by the user application to compute the 
 946:../stdperiph/source/stm32f37x_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 947:../stdperiph/source/stm32f37x_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 948:../stdperiph/source/stm32f37x_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 949:../stdperiph/source/stm32f37x_rcc.c ****   *         configuration based on this function will be incorrect.
 950:../stdperiph/source/stm32f37x_rcc.c ****   *    
 951:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
 952:../stdperiph/source/stm32f37x_rcc.c ****   */
 953:../stdperiph/source/stm32f37x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 954:../stdperiph/source/stm32f37x_rcc.c **** {
 799              		.loc 1 954 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              		@ link register save eliminated.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 31


 804              	.LVL53:
 805 0000 70B4     		push	{r4, r5, r6}
 806              	.LCFI0:
 807              		.cfi_def_cfa_offset 12
 808              		.cfi_offset 4, -12
 809              		.cfi_offset 5, -8
 810              		.cfi_offset 6, -4
 811              	.LVL54:
 955:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;
 956:../stdperiph/source/stm32f37x_rcc.c **** 
 957:../stdperiph/source/stm32f37x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 958:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 812              		.loc 1 958 0
 813 0002 6F4B     		ldr	r3, .L103
 814 0004 5B68     		ldr	r3, [r3, #4]
 815 0006 03F00C03 		and	r3, r3, #12
 816              	.LVL55:
 959:../stdperiph/source/stm32f37x_rcc.c ****   
 960:../stdperiph/source/stm32f37x_rcc.c ****   switch (tmp)
 817              		.loc 1 960 0
 818 000a 042B     		cmp	r3, #4
 819 000c 05D0     		beq	.L78
 820 000e 082B     		cmp	r3, #8
 821 0010 06D0     		beq	.L79
 822 0012 FBB9     		cbnz	r3, .L101
 961:../stdperiph/source/stm32f37x_rcc.c ****   {
 962:../stdperiph/source/stm32f37x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 963:../stdperiph/source/stm32f37x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 823              		.loc 1 963 0
 824 0014 6B4B     		ldr	r3, .L103+4
 825              	.LVL56:
 826 0016 0360     		str	r3, [r0]
 964:../stdperiph/source/stm32f37x_rcc.c ****       break;
 827              		.loc 1 964 0
 828 0018 1EE0     		b	.L81
 829              	.LVL57:
 830              	.L78:
 965:../stdperiph/source/stm32f37x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 966:../stdperiph/source/stm32f37x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 831              		.loc 1 966 0
 832 001a 6A4B     		ldr	r3, .L103+4
 833              	.LVL58:
 834 001c 0360     		str	r3, [r0]
 967:../stdperiph/source/stm32f37x_rcc.c ****       break;
 835              		.loc 1 967 0
 836 001e 1BE0     		b	.L81
 837              	.LVL59:
 838              	.L79:
 968:../stdperiph/source/stm32f37x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 969:../stdperiph/source/stm32f37x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 970:../stdperiph/source/stm32f37x_rcc.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 839              		.loc 1 970 0
 840 0020 674A     		ldr	r2, .L103
 841 0022 5368     		ldr	r3, [r2, #4]
 842              	.LVL60:
 971:../stdperiph/source/stm32f37x_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 843              		.loc 1 971 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 32


 844 0024 5268     		ldr	r2, [r2, #4]
 845              	.LVL61:
 972:../stdperiph/source/stm32f37x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 846              		.loc 1 972 0
 847 0026 C3F38343 		ubfx	r3, r3, #18, #4
 848              	.LVL62:
 849 002a 0233     		adds	r3, r3, #2
 850              	.LVL63:
 973:../stdperiph/source/stm32f37x_rcc.c ****       
 974:../stdperiph/source/stm32f37x_rcc.c ****       if (pllsource == 0x00)
 851              		.loc 1 974 0
 852 002c 12F4803F 		tst	r2, #65536
 853 0030 04D1     		bne	.L82
 975:../stdperiph/source/stm32f37x_rcc.c ****       {
 976:../stdperiph/source/stm32f37x_rcc.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 977:../stdperiph/source/stm32f37x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 854              		.loc 1 977 0
 855 0032 654A     		ldr	r2, .L103+8
 856              	.LVL64:
 857 0034 02FB03F3 		mul	r3, r2, r3
 858              	.LVL65:
 859 0038 0360     		str	r3, [r0]
 860 003a 0DE0     		b	.L81
 861              	.LVL66:
 862              	.L82:
 978:../stdperiph/source/stm32f37x_rcc.c ****       }
 979:../stdperiph/source/stm32f37x_rcc.c ****       else
 980:../stdperiph/source/stm32f37x_rcc.c ****       {
 981:../stdperiph/source/stm32f37x_rcc.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 863              		.loc 1 981 0
 864 003c 604A     		ldr	r2, .L103
 865              	.LVL67:
 866 003e D26A     		ldr	r2, [r2, #44]
 867 0040 02F00F02 		and	r2, r2, #15
 868 0044 511C     		adds	r1, r2, #1
 869              	.LVL68:
 982:../stdperiph/source/stm32f37x_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 983:../stdperiph/source/stm32f37x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 870              		.loc 1 983 0
 871 0046 5F4A     		ldr	r2, .L103+4
 872 0048 B2FBF1F2 		udiv	r2, r2, r1
 873 004c 02FB03F3 		mul	r3, r2, r3
 874              	.LVL69:
 875 0050 0360     		str	r3, [r0]
 876 0052 01E0     		b	.L81
 877              	.LVL70:
 878              	.L101:
 984:../stdperiph/source/stm32f37x_rcc.c ****       }      
 985:../stdperiph/source/stm32f37x_rcc.c ****       break;
 986:../stdperiph/source/stm32f37x_rcc.c ****     default: /* HSI used as system clock */
 987:../stdperiph/source/stm32f37x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 879              		.loc 1 987 0
 880 0054 5B4B     		ldr	r3, .L103+4
 881              	.LVL71:
 882 0056 0360     		str	r3, [r0]
 883              	.LVL72:
 884              	.L81:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 33


 988:../stdperiph/source/stm32f37x_rcc.c ****       break;
 989:../stdperiph/source/stm32f37x_rcc.c ****   }
 990:../stdperiph/source/stm32f37x_rcc.c ****   /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
 991:../stdperiph/source/stm32f37x_rcc.c ****   /* Get HCLK prescaler */
 992:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 885              		.loc 1 992 0
 886 0058 594A     		ldr	r2, .L103
 887 005a 5368     		ldr	r3, [r2, #4]
 888              	.LVL73:
 993:../stdperiph/source/stm32f37x_rcc.c ****   tmp = tmp >> 4;
 889              		.loc 1 993 0
 890 005c C3F30313 		ubfx	r3, r3, #4, #4
 891              	.LVL74:
 994:../stdperiph/source/stm32f37x_rcc.c ****   presc = APBAHBPrescTable[tmp]; 
 892              		.loc 1 994 0
 893 0060 5A4E     		ldr	r6, .L103+12
 894 0062 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 895              	.LVL75:
 896 0064 DBB2     		uxtb	r3, r3
 897              	.LVL76:
 995:../stdperiph/source/stm32f37x_rcc.c ****   /* HCLK clock frequency */
 996:../stdperiph/source/stm32f37x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 898              		.loc 1 996 0
 899 0066 0568     		ldr	r5, [r0]
 900 0068 25FA03F3 		lsr	r3, r5, r3
 901              	.LVL77:
 902 006c 4360     		str	r3, [r0, #4]
 997:../stdperiph/source/stm32f37x_rcc.c **** 
 998:../stdperiph/source/stm32f37x_rcc.c ****   /* Get PCLK1 prescaler */
 999:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 903              		.loc 1 999 0
 904 006e 5168     		ldr	r1, [r2, #4]
 905              	.LVL78:
1000:../stdperiph/source/stm32f37x_rcc.c ****   tmp = tmp >> 8;
 906              		.loc 1 1000 0
 907 0070 C1F30221 		ubfx	r1, r1, #8, #3
 908              	.LVL79:
1001:../stdperiph/source/stm32f37x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 909              		.loc 1 1001 0
 910 0074 715C     		ldrb	r1, [r6, r1]	@ zero_extendqisi2
 911              	.LVL80:
 912 0076 C9B2     		uxtb	r1, r1
 913              	.LVL81:
1002:../stdperiph/source/stm32f37x_rcc.c ****   /* PCLK1 clock frequency */
1003:../stdperiph/source/stm32f37x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 914              		.loc 1 1003 0
 915 0078 23FA01F1 		lsr	r1, r3, r1
 916              	.LVL82:
 917 007c 8160     		str	r1, [r0, #8]
1004:../stdperiph/source/stm32f37x_rcc.c ****   
1005:../stdperiph/source/stm32f37x_rcc.c ****   /* Get PCLK2 prescaler */
1006:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 918              		.loc 1 1006 0
 919 007e 5468     		ldr	r4, [r2, #4]
 920              	.LVL83:
1007:../stdperiph/source/stm32f37x_rcc.c ****   tmp = tmp >> 11;
 921              		.loc 1 1007 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 34


 922 0080 C4F3C224 		ubfx	r4, r4, #11, #3
 923              	.LVL84:
1008:../stdperiph/source/stm32f37x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 924              		.loc 1 1008 0
 925 0084 345D     		ldrb	r4, [r6, r4]	@ zero_extendqisi2
 926              	.LVL85:
 927 0086 E4B2     		uxtb	r4, r4
 928              	.LVL86:
1009:../stdperiph/source/stm32f37x_rcc.c ****   /* PCLK2 clock frequency */
1010:../stdperiph/source/stm32f37x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 929              		.loc 1 1010 0
 930 0088 E340     		lsrs	r3, r3, r4
 931 008a C360     		str	r3, [r0, #12]
1011:../stdperiph/source/stm32f37x_rcc.c ****   
1012:../stdperiph/source/stm32f37x_rcc.c ****   /* Get ADCCLK prescaler */
1013:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_ADCPRE;
 932              		.loc 1 1013 0
 933 008c 5468     		ldr	r4, [r2, #4]
 934              	.LVL87:
1014:../stdperiph/source/stm32f37x_rcc.c ****   tmp = tmp >> 14;
 935              		.loc 1 1014 0
 936 008e C4F38134 		ubfx	r4, r4, #14, #2
 937              	.LVL88:
1015:../stdperiph/source/stm32f37x_rcc.c ****   presc = ADCPrescTable[tmp];
 938              		.loc 1 1015 0
 939 0092 4F4E     		ldr	r6, .L103+16
 940 0094 345D     		ldrb	r4, [r6, r4]	@ zero_extendqisi2
 941              	.LVL89:
 942 0096 E4B2     		uxtb	r4, r4
 943              	.LVL90:
1016:../stdperiph/source/stm32f37x_rcc.c ****   /* ADCCLK clock frequency */
1017:../stdperiph/source/stm32f37x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 944              		.loc 1 1017 0
 945 0098 B3FBF4F4 		udiv	r4, r3, r4
 946              	.LVL91:
 947 009c 0461     		str	r4, [r0, #16]
1018:../stdperiph/source/stm32f37x_rcc.c ****   
1019:../stdperiph/source/stm32f37x_rcc.c ****   /* Get SDADCCLK prescaler */
1020:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SDADCPRE;
 948              		.loc 1 1020 0
 949 009e 5468     		ldr	r4, [r2, #4]
 950              	.LVL92:
1021:../stdperiph/source/stm32f37x_rcc.c ****   tmp = (tmp >> 27) & 0x0F;
 951              		.loc 1 1021 0
 952 00a0 C4F3C364 		ubfx	r4, r4, #27, #4
 953              	.LVL93:
1022:../stdperiph/source/stm32f37x_rcc.c ****   presc = SDADCPrescTable[tmp];
 954              		.loc 1 1022 0
 955 00a4 4B4E     		ldr	r6, .L103+20
 956 00a6 345D     		ldrb	r4, [r6, r4]	@ zero_extendqisi2
 957              	.LVL94:
 958 00a8 E4B2     		uxtb	r4, r4
 959              	.LVL95:
1023:../stdperiph/source/stm32f37x_rcc.c ****   /* ADCCLK clock frequency */
1024:../stdperiph/source/stm32f37x_rcc.c ****   RCC_Clocks->SDADCCLK_Frequency = RCC_Clocks->SYSCLK_Frequency / presc;
 960              		.loc 1 1024 0
 961 00aa B5FBF4F4 		udiv	r4, r5, r4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 35


 962              	.LVL96:
 963 00ae 4461     		str	r4, [r0, #20]
1025:../stdperiph/source/stm32f37x_rcc.c ****   
1026:../stdperiph/source/stm32f37x_rcc.c ****   /* CECCLK clock frequency */
1027:../stdperiph/source/stm32f37x_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 964              		.loc 1 1027 0
 965 00b0 126B     		ldr	r2, [r2, #48]
 966 00b2 12F0400F 		tst	r2, #64
 967 00b6 03D1     		bne	.L83
1028:../stdperiph/source/stm32f37x_rcc.c ****   {
1029:../stdperiph/source/stm32f37x_rcc.c ****     /* CEC Clock is HSI/244 */
1030:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 968              		.loc 1 1030 0
 969 00b8 48F21202 		movw	r2, #32786
 970 00bc 8261     		str	r2, [r0, #24]
 971 00be 02E0     		b	.L84
 972              	.L83:
1031:../stdperiph/source/stm32f37x_rcc.c ****   }
1032:../stdperiph/source/stm32f37x_rcc.c ****   else
1033:../stdperiph/source/stm32f37x_rcc.c ****   {
1034:../stdperiph/source/stm32f37x_rcc.c ****     /* CECC Clock is LSE Osc. */
1035:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 973              		.loc 1 1035 0
 974 00c0 4FF40042 		mov	r2, #32768
 975 00c4 8261     		str	r2, [r0, #24]
 976              	.L84:
1036:../stdperiph/source/stm32f37x_rcc.c ****   }
1037:../stdperiph/source/stm32f37x_rcc.c ****   
1038:../stdperiph/source/stm32f37x_rcc.c ****   /* I2C1CLK clock frequency */
1039:../stdperiph/source/stm32f37x_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 977              		.loc 1 1039 0
 978 00c6 3E4A     		ldr	r2, .L103
 979 00c8 126B     		ldr	r2, [r2, #48]
 980 00ca 12F0100F 		tst	r2, #16
 981 00ce 02D1     		bne	.L85
1040:../stdperiph/source/stm32f37x_rcc.c ****   {
1041:../stdperiph/source/stm32f37x_rcc.c ****     /* I2C1 Clock is HSI Osc. */
1042:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 982              		.loc 1 1042 0
 983 00d0 3C4A     		ldr	r2, .L103+4
 984 00d2 C261     		str	r2, [r0, #28]
 985 00d4 00E0     		b	.L86
 986              	.L85:
1043:../stdperiph/source/stm32f37x_rcc.c ****   }
1044:../stdperiph/source/stm32f37x_rcc.c ****   else
1045:../stdperiph/source/stm32f37x_rcc.c ****   {
1046:../stdperiph/source/stm32f37x_rcc.c ****     /* I2C1 Clock is System Clock */
1047:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 987              		.loc 1 1047 0
 988 00d6 C561     		str	r5, [r0, #28]
 989              	.L86:
1048:../stdperiph/source/stm32f37x_rcc.c ****   }
1049:../stdperiph/source/stm32f37x_rcc.c **** 
1050:../stdperiph/source/stm32f37x_rcc.c ****   /* I2C2CLK clock frequency */
1051:../stdperiph/source/stm32f37x_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 990              		.loc 1 1051 0
 991 00d8 394A     		ldr	r2, .L103
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 36


 992 00da 126B     		ldr	r2, [r2, #48]
 993 00dc 12F0200F 		tst	r2, #32
 994 00e0 02D1     		bne	.L87
1052:../stdperiph/source/stm32f37x_rcc.c ****   {
1053:../stdperiph/source/stm32f37x_rcc.c ****     /* I2C2 Clock is HSI Osc. */
1054:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 995              		.loc 1 1054 0
 996 00e2 384A     		ldr	r2, .L103+4
 997 00e4 0262     		str	r2, [r0, #32]
 998 00e6 00E0     		b	.L88
 999              	.L87:
1055:../stdperiph/source/stm32f37x_rcc.c ****   }
1056:../stdperiph/source/stm32f37x_rcc.c ****   else
1057:../stdperiph/source/stm32f37x_rcc.c ****   {
1058:../stdperiph/source/stm32f37x_rcc.c ****     /* I2C2 Clock is System Clock */
1059:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1000              		.loc 1 1059 0
 1001 00e8 0562     		str	r5, [r0, #32]
 1002              	.L88:
1060:../stdperiph/source/stm32f37x_rcc.c ****   }
1061:../stdperiph/source/stm32f37x_rcc.c **** 
1062:../stdperiph/source/stm32f37x_rcc.c ****   /* USART1CLK clock frequency */
1063:../stdperiph/source/stm32f37x_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 1003              		.loc 1 1063 0
 1004 00ea 354A     		ldr	r2, .L103
 1005 00ec 126B     		ldr	r2, [r2, #48]
 1006 00ee 12F0030F 		tst	r2, #3
 1007 00f2 01D1     		bne	.L89
1064:../stdperiph/source/stm32f37x_rcc.c ****   {
1065:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is PCLK */
1066:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 1008              		.loc 1 1066 0
 1009 00f4 4362     		str	r3, [r0, #36]
 1010 00f6 19E0     		b	.L90
 1011              	.L89:
1067:../stdperiph/source/stm32f37x_rcc.c ****   }
1068:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 1012              		.loc 1 1068 0
 1013 00f8 314B     		ldr	r3, .L103
 1014 00fa 1B6B     		ldr	r3, [r3, #48]
 1015 00fc 03F00303 		and	r3, r3, #3
 1016 0100 012B     		cmp	r3, #1
 1017 0102 01D1     		bne	.L91
1069:../stdperiph/source/stm32f37x_rcc.c ****   {
1070:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is System Clock */
1071:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1018              		.loc 1 1071 0
 1019 0104 4562     		str	r5, [r0, #36]
 1020 0106 11E0     		b	.L90
 1021              	.L91:
1072:../stdperiph/source/stm32f37x_rcc.c ****   }
1073:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 1022              		.loc 1 1073 0
 1023 0108 2D4B     		ldr	r3, .L103
 1024 010a 1B6B     		ldr	r3, [r3, #48]
 1025 010c 03F00303 		and	r3, r3, #3
 1026 0110 022B     		cmp	r3, #2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 37


 1027 0112 03D1     		bne	.L92
1074:../stdperiph/source/stm32f37x_rcc.c ****   {
1075:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is LSE Osc. */
1076:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 1028              		.loc 1 1076 0
 1029 0114 4FF40043 		mov	r3, #32768
 1030 0118 4362     		str	r3, [r0, #36]
 1031 011a 07E0     		b	.L90
 1032              	.L92:
1077:../stdperiph/source/stm32f37x_rcc.c ****   }
1078:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 1033              		.loc 1 1078 0
 1034 011c 284B     		ldr	r3, .L103
 1035 011e 1B6B     		ldr	r3, [r3, #48]
 1036 0120 03F00303 		and	r3, r3, #3
 1037 0124 032B     		cmp	r3, #3
 1038 0126 01D1     		bne	.L90
1079:../stdperiph/source/stm32f37x_rcc.c ****   {
1080:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is HSI Osc. */
1081:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 1039              		.loc 1 1081 0
 1040 0128 264B     		ldr	r3, .L103+4
 1041 012a 4362     		str	r3, [r0, #36]
 1042              	.L90:
1082:../stdperiph/source/stm32f37x_rcc.c ****   }
1083:../stdperiph/source/stm32f37x_rcc.c **** 
1084:../stdperiph/source/stm32f37x_rcc.c ****   /* USART2CLK clock frequency */
1085:../stdperiph/source/stm32f37x_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 1043              		.loc 1 1085 0
 1044 012c 244B     		ldr	r3, .L103
 1045 012e 1B6B     		ldr	r3, [r3, #48]
 1046 0130 13F4403F 		tst	r3, #196608
 1047 0134 01D1     		bne	.L93
1086:../stdperiph/source/stm32f37x_rcc.c ****   {
1087:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is PCLK */
1088:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 1048              		.loc 1 1088 0
 1049 0136 8162     		str	r1, [r0, #40]
 1050 0138 1CE0     		b	.L94
 1051              	.L93:
1089:../stdperiph/source/stm32f37x_rcc.c ****   }
1090:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 1052              		.loc 1 1090 0
 1053 013a 214B     		ldr	r3, .L103
 1054 013c 1B6B     		ldr	r3, [r3, #48]
 1055 013e 03F44033 		and	r3, r3, #196608
 1056 0142 B3F5803F 		cmp	r3, #65536
 1057 0146 01D1     		bne	.L95
1091:../stdperiph/source/stm32f37x_rcc.c ****   {
1092:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is System Clock */
1093:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1058              		.loc 1 1093 0
 1059 0148 8562     		str	r5, [r0, #40]
 1060 014a 13E0     		b	.L94
 1061              	.L95:
1094:../stdperiph/source/stm32f37x_rcc.c ****   }
1095:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 38


 1062              		.loc 1 1095 0
 1063 014c 1C4B     		ldr	r3, .L103
 1064 014e 1B6B     		ldr	r3, [r3, #48]
 1065 0150 03F44033 		and	r3, r3, #196608
 1066 0154 B3F5003F 		cmp	r3, #131072
 1067 0158 03D1     		bne	.L96
1096:../stdperiph/source/stm32f37x_rcc.c ****   {
1097:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is LSE Osc. */
1098:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 1068              		.loc 1 1098 0
 1069 015a 4FF40043 		mov	r3, #32768
 1070 015e 8362     		str	r3, [r0, #40]
 1071 0160 08E0     		b	.L94
 1072              	.L96:
1099:../stdperiph/source/stm32f37x_rcc.c ****   }
1100:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 1073              		.loc 1 1100 0
 1074 0162 174B     		ldr	r3, .L103
 1075 0164 1B6B     		ldr	r3, [r3, #48]
 1076 0166 03F44033 		and	r3, r3, #196608
 1077 016a B3F5403F 		cmp	r3, #196608
 1078 016e 01D1     		bne	.L94
1101:../stdperiph/source/stm32f37x_rcc.c ****   {
1102:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is HSI Osc. */
1103:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 1079              		.loc 1 1103 0
 1080 0170 144B     		ldr	r3, .L103+4
 1081 0172 8362     		str	r3, [r0, #40]
 1082              	.L94:
1104:../stdperiph/source/stm32f37x_rcc.c ****   }    
1105:../stdperiph/source/stm32f37x_rcc.c **** 
1106:../stdperiph/source/stm32f37x_rcc.c ****   /* USART3CLK clock frequency */
1107:../stdperiph/source/stm32f37x_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 1083              		.loc 1 1107 0
 1084 0174 124B     		ldr	r3, .L103
 1085 0176 1B6B     		ldr	r3, [r3, #48]
 1086 0178 13F4402F 		tst	r3, #786432
 1087 017c 01D1     		bne	.L97
1108:../stdperiph/source/stm32f37x_rcc.c ****   {
1109:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is PCLK */
1110:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 1088              		.loc 1 1110 0
 1089 017e C162     		str	r1, [r0, #44]
 1090 0180 1CE0     		b	.L76
 1091              	.L97:
1111:../stdperiph/source/stm32f37x_rcc.c ****   }
1112:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 1092              		.loc 1 1112 0
 1093 0182 0F4B     		ldr	r3, .L103
 1094 0184 1B6B     		ldr	r3, [r3, #48]
 1095 0186 03F44023 		and	r3, r3, #786432
 1096 018a B3F5802F 		cmp	r3, #262144
 1097 018e 01D1     		bne	.L99
1113:../stdperiph/source/stm32f37x_rcc.c ****   {
1114:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is System Clock */
1115:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1098              		.loc 1 1115 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 39


 1099 0190 C562     		str	r5, [r0, #44]
 1100 0192 13E0     		b	.L76
 1101              	.L99:
1116:../stdperiph/source/stm32f37x_rcc.c ****   }
1117:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 1102              		.loc 1 1117 0
 1103 0194 0A4B     		ldr	r3, .L103
 1104 0196 1B6B     		ldr	r3, [r3, #48]
 1105 0198 03F44023 		and	r3, r3, #786432
 1106 019c B3F5002F 		cmp	r3, #524288
 1107 01a0 03D1     		bne	.L100
1118:../stdperiph/source/stm32f37x_rcc.c ****   {
1119:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is LSE Osc. */
1120:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 1108              		.loc 1 1120 0
 1109 01a2 4FF40043 		mov	r3, #32768
 1110 01a6 C362     		str	r3, [r0, #44]
 1111 01a8 08E0     		b	.L76
 1112              	.L100:
1121:../stdperiph/source/stm32f37x_rcc.c ****   }
1122:../stdperiph/source/stm32f37x_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 1113              		.loc 1 1122 0
 1114 01aa 054B     		ldr	r3, .L103
 1115 01ac 1B6B     		ldr	r3, [r3, #48]
 1116 01ae 03F44023 		and	r3, r3, #786432
 1117 01b2 B3F5402F 		cmp	r3, #786432
 1118 01b6 01D1     		bne	.L76
1123:../stdperiph/source/stm32f37x_rcc.c ****   {
1124:../stdperiph/source/stm32f37x_rcc.c ****     /* USART Clock is HSI Osc. */
1125:../stdperiph/source/stm32f37x_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 1119              		.loc 1 1125 0
 1120 01b8 024B     		ldr	r3, .L103+4
 1121 01ba C362     		str	r3, [r0, #44]
 1122              	.L76:
1126:../stdperiph/source/stm32f37x_rcc.c ****   }  
1127:../stdperiph/source/stm32f37x_rcc.c **** }
 1123              		.loc 1 1127 0
 1124 01bc 70BC     		pop	{r4, r5, r6}
 1125              	.LCFI1:
 1126              		.cfi_restore 6
 1127              		.cfi_restore 5
 1128              		.cfi_restore 4
 1129              		.cfi_def_cfa_offset 0
 1130 01be 7047     		bx	lr
 1131              	.L104:
 1132              		.align	2
 1133              	.L103:
 1134 01c0 00100240 		.word	1073876992
 1135 01c4 00127A00 		.word	8000000
 1136 01c8 00093D00 		.word	4000000
 1137 01cc 00000000 		.word	.LANCHOR0
 1138 01d0 00000000 		.word	.LANCHOR1
 1139 01d4 00000000 		.word	.LANCHOR2
 1140              		.cfi_endproc
 1141              	.LFE135:
 1143              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1144              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 40


 1145              		.global	RCC_RTCCLKConfig
 1146              		.thumb
 1147              		.thumb_func
 1149              	RCC_RTCCLKConfig:
 1150              	.LFB136:
1128:../stdperiph/source/stm32f37x_rcc.c **** 
1129:../stdperiph/source/stm32f37x_rcc.c **** /**
1130:../stdperiph/source/stm32f37x_rcc.c ****   * @}
1131:../stdperiph/source/stm32f37x_rcc.c ****   */
1132:../stdperiph/source/stm32f37x_rcc.c **** 
1133:../stdperiph/source/stm32f37x_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1134:../stdperiph/source/stm32f37x_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1135:../stdperiph/source/stm32f37x_rcc.c ****  *
1136:../stdperiph/source/stm32f37x_rcc.c **** @verbatim
1137:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
1138:../stdperiph/source/stm32f37x_rcc.c ****              #####Peripheral clocks configuration functions #####
1139:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
1140:../stdperiph/source/stm32f37x_rcc.c ****     [..] This section provides functions allowing to configure the Peripheral clocks. 
1141:../stdperiph/source/stm32f37x_rcc.c ****          (#) The RTC clock which is derived from the LSE, LSI or  HSE_Div32 (HSE
1142:../stdperiph/source/stm32f37x_rcc.c ****              divided by 32).
1143:../stdperiph/source/stm32f37x_rcc.c ****          (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1144:../stdperiph/source/stm32f37x_rcc.c ****              except internal SRAM, Flash and SWD. Before to start using a peripheral you
1145:../stdperiph/source/stm32f37x_rcc.c ****              have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd(),
1146:../stdperiph/source/stm32f37x_rcc.c ****              RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1147:../stdperiph/source/stm32f37x_rcc.c ****          (#) To reset the peripherals configuration (to the default state after device reset)
1148:../stdperiph/source/stm32f37x_rcc.c ****              you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1149:../stdperiph/source/stm32f37x_rcc.c ****              RCC_APB1PeriphResetCmd() functions.
1150:../stdperiph/source/stm32f37x_rcc.c **** 
1151:../stdperiph/source/stm32f37x_rcc.c **** @endverbatim
1152:../stdperiph/source/stm32f37x_rcc.c ****   * @{
1153:../stdperiph/source/stm32f37x_rcc.c ****   */
1154:../stdperiph/source/stm32f37x_rcc.c **** 
1155:../stdperiph/source/stm32f37x_rcc.c **** /**
1156:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1157:../stdperiph/source/stm32f37x_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1158:../stdperiph/source/stm32f37x_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1159:../stdperiph/source/stm32f37x_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1160:../stdperiph/source/stm32f37x_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1161:../stdperiph/source/stm32f37x_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the RTC
1162:../stdperiph/source/stm32f37x_rcc.c ****   *         is reset using RCC_BackupResetCmd function, or by a Power On Reset (POR)
1163:../stdperiph/source/stm32f37x_rcc.c ****   *             
1164:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1165:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
1166:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1167:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1168:../stdperiph/source/stm32f37x_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Div32: HSE divided by 32 selected as RTC clock
1169:../stdperiph/source/stm32f37x_rcc.c ****   *       
1170:../stdperiph/source/stm32f37x_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1171:../stdperiph/source/stm32f37x_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1172:../stdperiph/source/stm32f37x_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1173:../stdperiph/source/stm32f37x_rcc.c ****   *         cannot be used in STOP and STANDBY modes.
1174:../stdperiph/source/stm32f37x_rcc.c ****   *             
1175:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The maximum input clock frequency for RTC is 2MHz (when using HSE as
1176:../stdperiph/source/stm32f37x_rcc.c ****   *         RTC clock source).
1177:../stdperiph/source/stm32f37x_rcc.c ****   *                          
1178:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1179:../stdperiph/source/stm32f37x_rcc.c ****   */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 41


1180:../stdperiph/source/stm32f37x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1181:../stdperiph/source/stm32f37x_rcc.c **** {
 1151              		.loc 1 1181 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156              	.LVL97:
1182:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1183:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1184:../stdperiph/source/stm32f37x_rcc.c ****   
1185:../stdperiph/source/stm32f37x_rcc.c ****   /* Select the RTC clock source */
1186:../stdperiph/source/stm32f37x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1157              		.loc 1 1186 0
 1158 0000 024A     		ldr	r2, .L106
 1159 0002 136A     		ldr	r3, [r2, #32]
 1160 0004 1843     		orrs	r0, r0, r3
 1161              	.LVL98:
 1162 0006 1062     		str	r0, [r2, #32]
 1163 0008 7047     		bx	lr
 1164              	.L107:
 1165 000a 00BF     		.align	2
 1166              	.L106:
 1167 000c 00100240 		.word	1073876992
 1168              		.cfi_endproc
 1169              	.LFE136:
 1171              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1172              		.align	2
 1173              		.global	RCC_RTCCLKCmd
 1174              		.thumb
 1175              		.thumb_func
 1177              	RCC_RTCCLKCmd:
 1178              	.LFB137:
1187:../stdperiph/source/stm32f37x_rcc.c **** }
1188:../stdperiph/source/stm32f37x_rcc.c **** 
1189:../stdperiph/source/stm32f37x_rcc.c **** /**
1190:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the RTC clock.
1191:../stdperiph/source/stm32f37x_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1192:../stdperiph/source/stm32f37x_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1193:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the RTC clock.
1194:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1196:../stdperiph/source/stm32f37x_rcc.c ****   */
1197:../stdperiph/source/stm32f37x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1198:../stdperiph/source/stm32f37x_rcc.c **** {
 1179              		.loc 1 1198 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 0
 1182              		@ frame_needed = 0, uses_anonymous_args = 0
 1183              		@ link register save eliminated.
 1184              	.LVL99:
1199:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1200:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1201:../stdperiph/source/stm32f37x_rcc.c ****   
1202:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1185              		.loc 1 1202 0
 1186 0000 014B     		ldr	r3, .L109
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 42


 1187 0002 1860     		str	r0, [r3]
 1188 0004 7047     		bx	lr
 1189              	.L110:
 1190 0006 00BF     		.align	2
 1191              	.L109:
 1192 0008 3C044242 		.word	1111622716
 1193              		.cfi_endproc
 1194              	.LFE137:
 1196              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1197              		.align	2
 1198              		.global	RCC_BackupResetCmd
 1199              		.thumb
 1200              		.thumb_func
 1202              	RCC_BackupResetCmd:
 1203              	.LFB138:
1203:../stdperiph/source/stm32f37x_rcc.c **** }
1204:../stdperiph/source/stm32f37x_rcc.c **** 
1205:../stdperiph/source/stm32f37x_rcc.c **** /**
1206:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1207:../stdperiph/source/stm32f37x_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1208:../stdperiph/source/stm32f37x_rcc.c ****   *         and the RTC clock source selection in RCC_BDCR register.
1209:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1210:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1211:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1212:../stdperiph/source/stm32f37x_rcc.c ****   */
1213:../stdperiph/source/stm32f37x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1214:../stdperiph/source/stm32f37x_rcc.c **** {
 1204              		.loc 1 1214 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              		@ link register save eliminated.
 1209              	.LVL100:
1215:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1216:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1217:../stdperiph/source/stm32f37x_rcc.c ****   
1218:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1210              		.loc 1 1218 0
 1211 0000 014B     		ldr	r3, .L112
 1212 0002 1860     		str	r0, [r3]
 1213 0004 7047     		bx	lr
 1214              	.L113:
 1215 0006 00BF     		.align	2
 1216              	.L112:
 1217 0008 40044242 		.word	1111622720
 1218              		.cfi_endproc
 1219              	.LFE138:
 1221              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 1222              		.align	2
 1223              		.global	RCC_AHBPeriphClockCmd
 1224              		.thumb
 1225              		.thumb_func
 1227              	RCC_AHBPeriphClockCmd:
 1228              	.LFB139:
1219:../stdperiph/source/stm32f37x_rcc.c **** }
1220:../stdperiph/source/stm32f37x_rcc.c **** 
1221:../stdperiph/source/stm32f37x_rcc.c **** /**
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 43


1222:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1223:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1224:../stdperiph/source/stm32f37x_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1225:../stdperiph/source/stm32f37x_rcc.c ****   *         using it.    
1226:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1227:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1228:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA: GPIOA clock
1229:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB: GPIOB clock
1230:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC: GPIOC clock
1231:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD: GPIOD clock
1232:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE: GPIOE clock
1233:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF: GPIOF clock
1234:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_TS:    TS clock
1235:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_CRC:   CRC clock
1236:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_FLITF: (has effect only when the Flash memory is in power down m
1237:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_SRAM:  SRAM clock
1238:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_DMA2:  DMA2 clock
1239:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_DMA1:  DMA1 clock
1240:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1241:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1242:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1243:../stdperiph/source/stm32f37x_rcc.c ****   */
1244:../stdperiph/source/stm32f37x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1245:../stdperiph/source/stm32f37x_rcc.c **** {
 1229              		.loc 1 1245 0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              		@ link register save eliminated.
 1234              	.LVL101:
1246:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1247:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1248:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1249:../stdperiph/source/stm32f37x_rcc.c ****   
1250:../stdperiph/source/stm32f37x_rcc.c ****   if (NewState != DISABLE)
 1235              		.loc 1 1250 0
 1236 0000 21B1     		cbz	r1, .L115
1251:../stdperiph/source/stm32f37x_rcc.c ****   {
1252:../stdperiph/source/stm32f37x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1237              		.loc 1 1252 0
 1238 0002 054B     		ldr	r3, .L117
 1239 0004 5A69     		ldr	r2, [r3, #20]
 1240 0006 1043     		orrs	r0, r0, r2
 1241              	.LVL102:
 1242 0008 5861     		str	r0, [r3, #20]
 1243 000a 7047     		bx	lr
 1244              	.LVL103:
 1245              	.L115:
1253:../stdperiph/source/stm32f37x_rcc.c ****   }
1254:../stdperiph/source/stm32f37x_rcc.c ****   else
1255:../stdperiph/source/stm32f37x_rcc.c ****   {
1256:../stdperiph/source/stm32f37x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1246              		.loc 1 1256 0
 1247 000c 024A     		ldr	r2, .L117
 1248 000e 5369     		ldr	r3, [r2, #20]
 1249 0010 23EA0000 		bic	r0, r3, r0
 1250              	.LVL104:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 44


 1251 0014 5061     		str	r0, [r2, #20]
 1252 0016 7047     		bx	lr
 1253              	.L118:
 1254              		.align	2
 1255              	.L117:
 1256 0018 00100240 		.word	1073876992
 1257              		.cfi_endproc
 1258              	.LFE139:
 1260              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1261              		.align	2
 1262              		.global	RCC_APB2PeriphClockCmd
 1263              		.thumb
 1264              		.thumb_func
 1266              	RCC_APB2PeriphClockCmd:
 1267              	.LFB140:
1257:../stdperiph/source/stm32f37x_rcc.c ****   }
1258:../stdperiph/source/stm32f37x_rcc.c **** }
1259:../stdperiph/source/stm32f37x_rcc.c **** 
1260:../stdperiph/source/stm32f37x_rcc.c **** /**
1261:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1262:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1263:../stdperiph/source/stm32f37x_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1264:../stdperiph/source/stm32f37x_rcc.c ****   *         using it.
1265:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1266:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1267:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG:      SYSCFG clock
1268:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:        ADC1 clock
1269:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:        SPI1 clock
1270:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_USART1:      USART1 clock
1271:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:       TIM15 clock
1272:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:       TIM16 clock
1273:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:       TIM17 clock
1274:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM19:       TIM19 clock
1275:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SDADC1:      SDADC1 clock
1276:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SDADC2:      SDADC2 clock
1277:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SDADC3:      SDADC3 clock
1278:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1279:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1281:../stdperiph/source/stm32f37x_rcc.c ****   */
1282:../stdperiph/source/stm32f37x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1283:../stdperiph/source/stm32f37x_rcc.c **** {
 1268              		.loc 1 1283 0
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272              		@ link register save eliminated.
 1273              	.LVL105:
1284:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1285:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1286:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1287:../stdperiph/source/stm32f37x_rcc.c **** 
1288:../stdperiph/source/stm32f37x_rcc.c ****   if (NewState != DISABLE)
 1274              		.loc 1 1288 0
 1275 0000 21B1     		cbz	r1, .L120
1289:../stdperiph/source/stm32f37x_rcc.c ****   {
1290:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 45


 1276              		.loc 1 1290 0
 1277 0002 054B     		ldr	r3, .L122
 1278 0004 9A69     		ldr	r2, [r3, #24]
 1279 0006 1043     		orrs	r0, r0, r2
 1280              	.LVL106:
 1281 0008 9861     		str	r0, [r3, #24]
 1282 000a 7047     		bx	lr
 1283              	.LVL107:
 1284              	.L120:
1291:../stdperiph/source/stm32f37x_rcc.c ****   }
1292:../stdperiph/source/stm32f37x_rcc.c ****   else
1293:../stdperiph/source/stm32f37x_rcc.c ****   {
1294:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1285              		.loc 1 1294 0
 1286 000c 024A     		ldr	r2, .L122
 1287 000e 9369     		ldr	r3, [r2, #24]
 1288 0010 23EA0000 		bic	r0, r3, r0
 1289              	.LVL108:
 1290 0014 9061     		str	r0, [r2, #24]
 1291 0016 7047     		bx	lr
 1292              	.L123:
 1293              		.align	2
 1294              	.L122:
 1295 0018 00100240 		.word	1073876992
 1296              		.cfi_endproc
 1297              	.LFE140:
 1299              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1300              		.align	2
 1301              		.global	RCC_APB1PeriphClockCmd
 1302              		.thumb
 1303              		.thumb_func
 1305              	RCC_APB1PeriphClockCmd:
 1306              	.LFB141:
1295:../stdperiph/source/stm32f37x_rcc.c ****   }
1296:../stdperiph/source/stm32f37x_rcc.c **** }
1297:../stdperiph/source/stm32f37x_rcc.c **** 
1298:../stdperiph/source/stm32f37x_rcc.c **** /**
1299:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1300:../stdperiph/source/stm32f37x_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1301:../stdperiph/source/stm32f37x_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1302:../stdperiph/source/stm32f37x_rcc.c ****   *         using it.
1303:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1304:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1305:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:      TIM2 clock
1306:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:      TIM3 clock
1307:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM4:      TIM4 clock
1308:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM5:      TIM5 clock
1309:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:      TIM6 clock
1310:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:      TIM7 clock
1311:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM12:     TIM12 clock
1312:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM13:     TIM13 clock
1313:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:     TIM14 clock
1314:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM18:     TIM18 clock
1315:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:      WWDG clock
1316:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:      SPI2 clock
1317:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_SPI3:      SPI3 clock
1318:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_USART2:    USART2 clock
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 46


1319:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_USART3:    USART3 clock
1320:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:      I2C1 clock
1321:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:      I2C2 clock
1322:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_USB:       USB clock
1323:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_CAN1:      CAN1 clock
1324:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_DAC2:      DAC2 clock
1325:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_PWR:       PWR clock
1326:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_DAC1:      DAC1 clock
1327:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_CEC:       CEC clock
1328:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1329:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1330:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1331:../stdperiph/source/stm32f37x_rcc.c ****   */
1332:../stdperiph/source/stm32f37x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1333:../stdperiph/source/stm32f37x_rcc.c **** {
 1307              		.loc 1 1333 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 0
 1310              		@ frame_needed = 0, uses_anonymous_args = 0
 1311              		@ link register save eliminated.
 1312              	.LVL109:
1334:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1335:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1336:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1337:../stdperiph/source/stm32f37x_rcc.c **** 
1338:../stdperiph/source/stm32f37x_rcc.c ****   if (NewState != DISABLE)
 1313              		.loc 1 1338 0
 1314 0000 21B1     		cbz	r1, .L125
1339:../stdperiph/source/stm32f37x_rcc.c ****   {
1340:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1315              		.loc 1 1340 0
 1316 0002 054B     		ldr	r3, .L127
 1317 0004 DA69     		ldr	r2, [r3, #28]
 1318 0006 1043     		orrs	r0, r0, r2
 1319              	.LVL110:
 1320 0008 D861     		str	r0, [r3, #28]
 1321 000a 7047     		bx	lr
 1322              	.LVL111:
 1323              	.L125:
1341:../stdperiph/source/stm32f37x_rcc.c ****   }
1342:../stdperiph/source/stm32f37x_rcc.c ****   else
1343:../stdperiph/source/stm32f37x_rcc.c ****   {
1344:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1324              		.loc 1 1344 0
 1325 000c 024A     		ldr	r2, .L127
 1326 000e D369     		ldr	r3, [r2, #28]
 1327 0010 23EA0000 		bic	r0, r3, r0
 1328              	.LVL112:
 1329 0014 D061     		str	r0, [r2, #28]
 1330 0016 7047     		bx	lr
 1331              	.L128:
 1332              		.align	2
 1333              	.L127:
 1334 0018 00100240 		.word	1073876992
 1335              		.cfi_endproc
 1336              	.LFE141:
 1338              		.section	.text.RCC_AHBPeriphResetCmd,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 47


 1339              		.align	2
 1340              		.global	RCC_AHBPeriphResetCmd
 1341              		.thumb
 1342              		.thumb_func
 1344              	RCC_AHBPeriphResetCmd:
 1345              	.LFB142:
1345:../stdperiph/source/stm32f37x_rcc.c ****   }
1346:../stdperiph/source/stm32f37x_rcc.c **** }
1347:../stdperiph/source/stm32f37x_rcc.c **** 
1348:../stdperiph/source/stm32f37x_rcc.c **** /**
1349:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1350:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1351:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1352:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA:         GPIOA clock
1353:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB:         GPIOB clock
1354:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC:         GPIOC clock
1355:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD:         GPIOD clock
1356:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE:         GPIOE clock
1357:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF:         GPIOF clock
1358:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_AHBPeriph_TS:            TS clock
1359:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1360:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1361:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1362:../stdperiph/source/stm32f37x_rcc.c ****   */
1363:../stdperiph/source/stm32f37x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1364:../stdperiph/source/stm32f37x_rcc.c **** {
 1346              		.loc 1 1364 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351              	.LVL113:
1365:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1366:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
1367:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1368:../stdperiph/source/stm32f37x_rcc.c **** 
1369:../stdperiph/source/stm32f37x_rcc.c ****   if (NewState != DISABLE)
 1352              		.loc 1 1369 0
 1353 0000 21B1     		cbz	r1, .L130
1370:../stdperiph/source/stm32f37x_rcc.c ****   {
1371:../stdperiph/source/stm32f37x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
 1354              		.loc 1 1371 0
 1355 0002 054B     		ldr	r3, .L132
 1356 0004 9A6A     		ldr	r2, [r3, #40]
 1357 0006 1043     		orrs	r0, r0, r2
 1358              	.LVL114:
 1359 0008 9862     		str	r0, [r3, #40]
 1360 000a 7047     		bx	lr
 1361              	.LVL115:
 1362              	.L130:
1372:../stdperiph/source/stm32f37x_rcc.c ****   }
1373:../stdperiph/source/stm32f37x_rcc.c ****   else
1374:../stdperiph/source/stm32f37x_rcc.c ****   {
1375:../stdperiph/source/stm32f37x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
 1363              		.loc 1 1375 0
 1364 000c 024A     		ldr	r2, .L132
 1365 000e 936A     		ldr	r3, [r2, #40]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 48


 1366 0010 23EA0000 		bic	r0, r3, r0
 1367              	.LVL116:
 1368 0014 9062     		str	r0, [r2, #40]
 1369 0016 7047     		bx	lr
 1370              	.L133:
 1371              		.align	2
 1372              	.L132:
 1373 0018 00100240 		.word	1073876992
 1374              		.cfi_endproc
 1375              	.LFE142:
 1377              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1378              		.align	2
 1379              		.global	RCC_APB2PeriphResetCmd
 1380              		.thumb
 1381              		.thumb_func
 1383              	RCC_APB2PeriphResetCmd:
 1384              	.LFB143:
1376:../stdperiph/source/stm32f37x_rcc.c ****   }
1377:../stdperiph/source/stm32f37x_rcc.c **** }
1378:../stdperiph/source/stm32f37x_rcc.c **** 
1379:../stdperiph/source/stm32f37x_rcc.c **** /**
1380:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1381:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1382:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1383:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG:      SYSCFG clock
1384:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:        ADC1 clock
1385:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:        SPI1 clock
1386:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_USART1:      USART1 clock
1387:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:       TIM15 clock
1388:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:       TIM16 clock
1389:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:       TIM17 clock
1390:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_TIM19:       TIM19 clock
1391:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SDADC1:      SDADC1 clock
1392:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SDADC2:      SDADC2 clock
1393:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_APB2Periph_SDADC3:      SDADC3 clock
1394:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1395:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1396:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1397:../stdperiph/source/stm32f37x_rcc.c ****   */
1398:../stdperiph/source/stm32f37x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1399:../stdperiph/source/stm32f37x_rcc.c **** {
 1385              		.loc 1 1399 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389              		@ link register save eliminated.
 1390              	.LVL117:
1400:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1401:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1402:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1403:../stdperiph/source/stm32f37x_rcc.c **** 
1404:../stdperiph/source/stm32f37x_rcc.c ****   if (NewState != DISABLE)
 1391              		.loc 1 1404 0
 1392 0000 21B1     		cbz	r1, .L135
1405:../stdperiph/source/stm32f37x_rcc.c ****   {
1406:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1393              		.loc 1 1406 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 49


 1394 0002 054B     		ldr	r3, .L137
 1395 0004 DA68     		ldr	r2, [r3, #12]
 1396 0006 1043     		orrs	r0, r0, r2
 1397              	.LVL118:
 1398 0008 D860     		str	r0, [r3, #12]
 1399 000a 7047     		bx	lr
 1400              	.LVL119:
 1401              	.L135:
1407:../stdperiph/source/stm32f37x_rcc.c ****   }
1408:../stdperiph/source/stm32f37x_rcc.c ****   else
1409:../stdperiph/source/stm32f37x_rcc.c ****   {
1410:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1402              		.loc 1 1410 0
 1403 000c 024A     		ldr	r2, .L137
 1404 000e D368     		ldr	r3, [r2, #12]
 1405 0010 23EA0000 		bic	r0, r3, r0
 1406              	.LVL120:
 1407 0014 D060     		str	r0, [r2, #12]
 1408 0016 7047     		bx	lr
 1409              	.L138:
 1410              		.align	2
 1411              	.L137:
 1412 0018 00100240 		.word	1073876992
 1413              		.cfi_endproc
 1414              	.LFE143:
 1416              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1417              		.align	2
 1418              		.global	RCC_APB1PeriphResetCmd
 1419              		.thumb
 1420              		.thumb_func
 1422              	RCC_APB1PeriphResetCmd:
 1423              	.LFB144:
1411:../stdperiph/source/stm32f37x_rcc.c ****   }
1412:../stdperiph/source/stm32f37x_rcc.c **** }
1413:../stdperiph/source/stm32f37x_rcc.c **** 
1414:../stdperiph/source/stm32f37x_rcc.c **** /**
1415:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1416:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1417:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1418:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:      TIM2 clock
1419:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:      TIM3 clock
1420:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM4:      TIM4 clock
1421:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM5:      TIM5 clock  
1422:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:      TIM6 clock
1423:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:      TIM7 clock
1424:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM12:     TIM12 clock
1425:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM13:     TIM13 clock
1426:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:     TIM14 clock
1427:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_TIM18:     TIM18 clock
1428:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:      WWDG clock
1429:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:      SPI2 clock
1430:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_SPI3:      SPI3 clock
1431:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_USART2:    USART2 clock
1432:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_USART3:    USART3 clock
1433:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:      I2C1 clock
1434:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:      I2C2 clock
1435:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_USB:       USB clock
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 50


1436:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_CAN1:      CAN1 clock
1437:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_DAC2:      DAC2 clock
1438:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_PWR:       PWR clock
1439:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_DAC1:      DAC1 clock
1440:../stdperiph/source/stm32f37x_rcc.c ****   *           @arg RCC_APB1Periph_CEC:       CEC clock
1441:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1442:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1444:../stdperiph/source/stm32f37x_rcc.c ****   */
1445:../stdperiph/source/stm32f37x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1446:../stdperiph/source/stm32f37x_rcc.c **** {
 1424              		.loc 1 1446 0
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 0
 1427              		@ frame_needed = 0, uses_anonymous_args = 0
 1428              		@ link register save eliminated.
 1429              	.LVL121:
1447:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1448:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1449:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:../stdperiph/source/stm32f37x_rcc.c **** 
1451:../stdperiph/source/stm32f37x_rcc.c ****   if (NewState != DISABLE)
 1430              		.loc 1 1451 0
 1431 0000 21B1     		cbz	r1, .L140
1452:../stdperiph/source/stm32f37x_rcc.c ****   {
1453:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1432              		.loc 1 1453 0
 1433 0002 054B     		ldr	r3, .L142
 1434 0004 1A69     		ldr	r2, [r3, #16]
 1435 0006 1043     		orrs	r0, r0, r2
 1436              	.LVL122:
 1437 0008 1861     		str	r0, [r3, #16]
 1438 000a 7047     		bx	lr
 1439              	.LVL123:
 1440              	.L140:
1454:../stdperiph/source/stm32f37x_rcc.c ****   }
1455:../stdperiph/source/stm32f37x_rcc.c ****   else
1456:../stdperiph/source/stm32f37x_rcc.c ****   {
1457:../stdperiph/source/stm32f37x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1441              		.loc 1 1457 0
 1442 000c 024A     		ldr	r2, .L142
 1443 000e 1369     		ldr	r3, [r2, #16]
 1444 0010 23EA0000 		bic	r0, r3, r0
 1445              	.LVL124:
 1446 0014 1061     		str	r0, [r2, #16]
 1447 0016 7047     		bx	lr
 1448              	.L143:
 1449              		.align	2
 1450              	.L142:
 1451 0018 00100240 		.word	1073876992
 1452              		.cfi_endproc
 1453              	.LFE144:
 1455              		.section	.text.RCC_ITConfig,"ax",%progbits
 1456              		.align	2
 1457              		.global	RCC_ITConfig
 1458              		.thumb
 1459              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 51


 1461              	RCC_ITConfig:
 1462              	.LFB145:
1458:../stdperiph/source/stm32f37x_rcc.c ****   }
1459:../stdperiph/source/stm32f37x_rcc.c **** }
1460:../stdperiph/source/stm32f37x_rcc.c **** 
1461:../stdperiph/source/stm32f37x_rcc.c **** /**
1462:../stdperiph/source/stm32f37x_rcc.c ****   * @}
1463:../stdperiph/source/stm32f37x_rcc.c ****   */
1464:../stdperiph/source/stm32f37x_rcc.c **** 
1465:../stdperiph/source/stm32f37x_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1466:../stdperiph/source/stm32f37x_rcc.c ****  *  @brief   Interrupts and flags management functions 
1467:../stdperiph/source/stm32f37x_rcc.c ****  *
1468:../stdperiph/source/stm32f37x_rcc.c **** @verbatim
1469:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
1470:../stdperiph/source/stm32f37x_rcc.c ****              ##### Interrupts and flags management functions #####
1471:../stdperiph/source/stm32f37x_rcc.c ****  ===============================================================================
1472:../stdperiph/source/stm32f37x_rcc.c **** @endverbatim
1473:../stdperiph/source/stm32f37x_rcc.c ****   * @{
1474:../stdperiph/source/stm32f37x_rcc.c ****   */
1475:../stdperiph/source/stm32f37x_rcc.c **** 
1476:../stdperiph/source/stm32f37x_rcc.c **** /**
1477:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1478:../stdperiph/source/stm32f37x_rcc.c ****   * @note   The CSS interrupt doesn't have an enable bit; once the CSS is enabled
1479:../stdperiph/source/stm32f37x_rcc.c ****   *         and if the HSE clock fails, the CSS interrupt occurs and an NMI is
1480:../stdperiph/source/stm32f37x_rcc.c ****   *         automatically generated. The NMI will be executed indefinitely, and 
1481:../stdperiph/source/stm32f37x_rcc.c ****   *         since NMI has higher priority than any other IRQ (and main program)
1482:../stdperiph/source/stm32f37x_rcc.c ****   *         the application will be stacked in the NMI ISR unless the CSS interrupt
1483:../stdperiph/source/stm32f37x_rcc.c ****   *         pending bit is cleared.
1484:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1485:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1486:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1487:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1488:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1489:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1490:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1491:../stdperiph/source/stm32f37x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1492:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1493:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1494:../stdperiph/source/stm32f37x_rcc.c ****   */
1495:../stdperiph/source/stm32f37x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1496:../stdperiph/source/stm32f37x_rcc.c **** {
 1463              		.loc 1 1496 0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
 1468              	.LVL125:
1497:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1498:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1499:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1500:../stdperiph/source/stm32f37x_rcc.c ****   
1501:../stdperiph/source/stm32f37x_rcc.c ****   if (NewState != DISABLE)
 1469              		.loc 1 1501 0
 1470 0000 21B1     		cbz	r1, .L145
1502:../stdperiph/source/stm32f37x_rcc.c ****   {
1503:../stdperiph/source/stm32f37x_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
1504:../stdperiph/source/stm32f37x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 52


 1471              		.loc 1 1504 0
 1472 0002 054B     		ldr	r3, .L147
 1473 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1474 0006 1043     		orrs	r0, r0, r2
 1475              	.LVL126:
 1476 0008 1870     		strb	r0, [r3]
 1477 000a 7047     		bx	lr
 1478              	.LVL127:
 1479              	.L145:
1505:../stdperiph/source/stm32f37x_rcc.c ****   }
1506:../stdperiph/source/stm32f37x_rcc.c ****   else
1507:../stdperiph/source/stm32f37x_rcc.c ****   {
1508:../stdperiph/source/stm32f37x_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
1509:../stdperiph/source/stm32f37x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1480              		.loc 1 1509 0
 1481 000c 024A     		ldr	r2, .L147
 1482 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1483 0010 23EA0000 		bic	r0, r3, r0
 1484              	.LVL128:
 1485 0014 1070     		strb	r0, [r2]
 1486 0016 7047     		bx	lr
 1487              	.L148:
 1488              		.align	2
 1489              	.L147:
 1490 0018 09100240 		.word	1073877001
 1491              		.cfi_endproc
 1492              	.LFE145:
 1494              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1495              		.align	2
 1496              		.global	RCC_GetFlagStatus
 1497              		.thumb
 1498              		.thumb_func
 1500              	RCC_GetFlagStatus:
 1501              	.LFB146:
1510:../stdperiph/source/stm32f37x_rcc.c ****   }
1511:../stdperiph/source/stm32f37x_rcc.c **** }
1512:../stdperiph/source/stm32f37x_rcc.c **** 
1513:../stdperiph/source/stm32f37x_rcc.c **** /**
1514:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1515:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1516:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
1517:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready  
1518:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1519:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_PLLRDY: PLL clock ready
1520:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1521:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1522:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_OBLRST: Option Byte Loader (OBL) reset 
1523:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_PINRST: Pin reset
1524:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_V18PWRRSTF: Voltage regulator reset
1525:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_PORRST: POR/PDR reset
1526:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_SFTRST: Software reset
1527:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1528:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1529:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_FLAG_LPWRRST: Low Power reset
1530:../stdperiph/source/stm32f37x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1531:../stdperiph/source/stm32f37x_rcc.c ****   */
1532:../stdperiph/source/stm32f37x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 53


1533:../stdperiph/source/stm32f37x_rcc.c **** {
 1502              		.loc 1 1533 0
 1503              		.cfi_startproc
 1504              		@ args = 0, pretend = 0, frame = 0
 1505              		@ frame_needed = 0, uses_anonymous_args = 0
 1506              		@ link register save eliminated.
 1507              	.LVL129:
1534:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t tmp = 0;
1535:../stdperiph/source/stm32f37x_rcc.c ****   uint32_t statusreg = 0;
1536:../stdperiph/source/stm32f37x_rcc.c ****   FlagStatus bitstatus = RESET;
1537:../stdperiph/source/stm32f37x_rcc.c **** 
1538:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1539:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1540:../stdperiph/source/stm32f37x_rcc.c **** 
1541:../stdperiph/source/stm32f37x_rcc.c ****   /* Get the RCC register index */
1542:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC_FLAG >> 5;
1543:../stdperiph/source/stm32f37x_rcc.c **** 
1544:../stdperiph/source/stm32f37x_rcc.c ****    if (tmp == 0)               /* The flag to check is in CR register */
 1508              		.loc 1 1544 0
 1509 0000 4309     		lsrs	r3, r0, #5
 1510              	.LVL130:
 1511 0002 02D1     		bne	.L150
1545:../stdperiph/source/stm32f37x_rcc.c ****   {
1546:../stdperiph/source/stm32f37x_rcc.c ****     statusreg = RCC->CR;
 1512              		.loc 1 1546 0
 1513 0004 0A4B     		ldr	r3, .L155
 1514              	.LVL131:
 1515 0006 1B68     		ldr	r3, [r3]
 1516              	.LVL132:
 1517 0008 06E0     		b	.L151
 1518              	.LVL133:
 1519              	.L150:
1547:../stdperiph/source/stm32f37x_rcc.c ****   }
1548:../stdperiph/source/stm32f37x_rcc.c ****   else if (tmp == 1)          /* The flag to check is in BDCR register */
 1520              		.loc 1 1548 0
 1521 000a 012B     		cmp	r3, #1
 1522 000c 02D1     		bne	.L152
1549:../stdperiph/source/stm32f37x_rcc.c ****   {
1550:../stdperiph/source/stm32f37x_rcc.c ****     statusreg = RCC->BDCR;
 1523              		.loc 1 1550 0
 1524 000e 084B     		ldr	r3, .L155
 1525              	.LVL134:
 1526 0010 1B6A     		ldr	r3, [r3, #32]
 1527              	.LVL135:
 1528 0012 01E0     		b	.L151
 1529              	.LVL136:
 1530              	.L152:
1551:../stdperiph/source/stm32f37x_rcc.c ****   }
1552:../stdperiph/source/stm32f37x_rcc.c ****   else                       /* The flag to check is in CSR register */
1553:../stdperiph/source/stm32f37x_rcc.c ****   {
1554:../stdperiph/source/stm32f37x_rcc.c ****     statusreg = RCC->CSR;
 1531              		.loc 1 1554 0
 1532 0014 064B     		ldr	r3, .L155
 1533              	.LVL137:
 1534 0016 5B6A     		ldr	r3, [r3, #36]
 1535              	.LVL138:
 1536              	.L151:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 54


1555:../stdperiph/source/stm32f37x_rcc.c ****   }
1556:../stdperiph/source/stm32f37x_rcc.c **** 
1557:../stdperiph/source/stm32f37x_rcc.c ****   /* Get the flag position */
1558:../stdperiph/source/stm32f37x_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1537              		.loc 1 1558 0
 1538 0018 00F01F00 		and	r0, r0, #31
 1539              	.LVL139:
1559:../stdperiph/source/stm32f37x_rcc.c **** 
1560:../stdperiph/source/stm32f37x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1540              		.loc 1 1560 0
 1541 001c 23FA00F0 		lsr	r0, r3, r0
 1542              	.LVL140:
 1543 0020 10F0010F 		tst	r0, #1
 1544 0024 01D0     		beq	.L154
1561:../stdperiph/source/stm32f37x_rcc.c ****   {
1562:../stdperiph/source/stm32f37x_rcc.c ****     bitstatus = SET;
 1545              		.loc 1 1562 0
 1546 0026 0120     		movs	r0, #1
 1547 0028 7047     		bx	lr
 1548              	.L154:
1563:../stdperiph/source/stm32f37x_rcc.c ****   }
1564:../stdperiph/source/stm32f37x_rcc.c ****   else
1565:../stdperiph/source/stm32f37x_rcc.c ****   {
1566:../stdperiph/source/stm32f37x_rcc.c ****     bitstatus = RESET;
 1549              		.loc 1 1566 0
 1550 002a 0020     		movs	r0, #0
 1551              	.LVL141:
1567:../stdperiph/source/stm32f37x_rcc.c ****   }
1568:../stdperiph/source/stm32f37x_rcc.c ****   /* Return the flag status */
1569:../stdperiph/source/stm32f37x_rcc.c ****   return bitstatus;
1570:../stdperiph/source/stm32f37x_rcc.c **** }
 1552              		.loc 1 1570 0
 1553 002c 7047     		bx	lr
 1554              	.L156:
 1555 002e 00BF     		.align	2
 1556              	.L155:
 1557 0030 00100240 		.word	1073876992
 1558              		.cfi_endproc
 1559              	.LFE146:
 1561              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1562              		.align	2
 1563              		.global	RCC_WaitForHSEStartUp
 1564              		.thumb
 1565              		.thumb_func
 1567              	RCC_WaitForHSEStartUp:
 1568              	.LFB113:
 260:../stdperiph/source/stm32f37x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 1569              		.loc 1 260 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 8
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
 1573 0000 00B5     		push	{lr}
 1574              	.LCFI2:
 1575              		.cfi_def_cfa_offset 4
 1576              		.cfi_offset 14, -4
 1577 0002 83B0     		sub	sp, sp, #12
 1578              	.LCFI3:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 55


 1579              		.cfi_def_cfa_offset 16
 261:../stdperiph/source/stm32f37x_rcc.c ****   ErrorStatus status = ERROR;
 1580              		.loc 1 261 0
 1581 0004 0023     		movs	r3, #0
 1582 0006 0193     		str	r3, [sp, #4]
 1583              	.LVL142:
 1584              	.L159:
 268:../stdperiph/source/stm32f37x_rcc.c ****     StartUpCounter++;  
 1585              		.loc 1 268 0 discriminator 2
 1586 0008 1120     		movs	r0, #17
 1587 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 1588              	.LVL143:
 269:../stdperiph/source/stm32f37x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1589              		.loc 1 269 0 discriminator 2
 1590 000e 019B     		ldr	r3, [sp, #4]
 1591 0010 0133     		adds	r3, r3, #1
 1592 0012 0193     		str	r3, [sp, #4]
 270:../stdperiph/source/stm32f37x_rcc.c ****   
 1593              		.loc 1 270 0 discriminator 2
 1594 0014 019B     		ldr	r3, [sp, #4]
 1595 0016 B3F5A06F 		cmp	r3, #1280
 1596 001a 01D0     		beq	.L158
 270:../stdperiph/source/stm32f37x_rcc.c ****   
 1597              		.loc 1 270 0 is_stmt 0 discriminator 1
 1598 001c 0028     		cmp	r0, #0
 1599 001e F3D0     		beq	.L159
 1600              	.L158:
 272:../stdperiph/source/stm32f37x_rcc.c ****   {
 1601              		.loc 1 272 0 is_stmt 1
 1602 0020 1120     		movs	r0, #17
 1603              	.LVL144:
 1604 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1605              	.LVL145:
 1606 0026 08B1     		cbz	r0, .L161
 274:../stdperiph/source/stm32f37x_rcc.c ****   }
 1607              		.loc 1 274 0
 1608 0028 0120     		movs	r0, #1
 1609 002a 00E0     		b	.L160
 1610              	.L161:
 278:../stdperiph/source/stm32f37x_rcc.c ****   }  
 1611              		.loc 1 278 0
 1612 002c 0020     		movs	r0, #0
 1613              	.L160:
 1614              	.LVL146:
 281:../stdperiph/source/stm32f37x_rcc.c **** 
 1615              		.loc 1 281 0
 1616 002e 03B0     		add	sp, sp, #12
 1617              	.LCFI4:
 1618              		.cfi_def_cfa_offset 4
 1619              		@ sp needed
 1620 0030 5DF804FB 		ldr	pc, [sp], #4
 1621              		.cfi_endproc
 1622              	.LFE113:
 1624              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1625              		.align	2
 1626              		.global	RCC_ClearFlag
 1627              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 56


 1628              		.thumb_func
 1630              	RCC_ClearFlag:
 1631              	.LFB147:
1571:../stdperiph/source/stm32f37x_rcc.c **** 
1572:../stdperiph/source/stm32f37x_rcc.c **** /**
1573:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Clears the RCC reset flags.
1574:../stdperiph/source/stm32f37x_rcc.c ****   *         The reset flags are: RCC_FLAG_OBLRST, RCC_FLAG_PINRST, RCC_FLAG_PORRST, 
1575:../stdperiph/source/stm32f37x_rcc.c ****   *         RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST, RCC_FLAG_V18PWRR
1576:../stdperiph/source/stm32f37x_rcc.c ****   * @param  None
1577:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1578:../stdperiph/source/stm32f37x_rcc.c ****   */
1579:../stdperiph/source/stm32f37x_rcc.c **** void RCC_ClearFlag(void)
1580:../stdperiph/source/stm32f37x_rcc.c **** {
 1632              		.loc 1 1580 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636              		@ link register save eliminated.
1581:../stdperiph/source/stm32f37x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1582:../stdperiph/source/stm32f37x_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1637              		.loc 1 1582 0
 1638 0000 024A     		ldr	r2, .L164
 1639 0002 536A     		ldr	r3, [r2, #36]
 1640 0004 43F08073 		orr	r3, r3, #16777216
 1641 0008 5362     		str	r3, [r2, #36]
 1642 000a 7047     		bx	lr
 1643              	.L165:
 1644              		.align	2
 1645              	.L164:
 1646 000c 00100240 		.word	1073876992
 1647              		.cfi_endproc
 1648              	.LFE147:
 1650              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1651              		.align	2
 1652              		.global	RCC_GetITStatus
 1653              		.thumb
 1654              		.thumb_func
 1656              	RCC_GetITStatus:
 1657              	.LFB148:
1583:../stdperiph/source/stm32f37x_rcc.c **** }
1584:../stdperiph/source/stm32f37x_rcc.c **** 
1585:../stdperiph/source/stm32f37x_rcc.c **** /**
1586:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1587:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1588:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be one of the following values:
1589:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1590:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1591:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1592:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1593:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1594:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1595:../stdperiph/source/stm32f37x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1596:../stdperiph/source/stm32f37x_rcc.c ****   */
1597:../stdperiph/source/stm32f37x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1598:../stdperiph/source/stm32f37x_rcc.c **** {
 1658              		.loc 1 1598 0
 1659              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 57


 1660              		@ args = 0, pretend = 0, frame = 0
 1661              		@ frame_needed = 0, uses_anonymous_args = 0
 1662              		@ link register save eliminated.
 1663              	.LVL147:
1599:../stdperiph/source/stm32f37x_rcc.c ****   ITStatus bitstatus = RESET;
1600:../stdperiph/source/stm32f37x_rcc.c ****   
1601:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1602:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1603:../stdperiph/source/stm32f37x_rcc.c ****   
1604:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1605:../stdperiph/source/stm32f37x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1664              		.loc 1 1605 0
 1665 0000 034B     		ldr	r3, .L169
 1666 0002 9B68     		ldr	r3, [r3, #8]
 1667 0004 1842     		tst	r0, r3
 1668 0006 01D0     		beq	.L168
1606:../stdperiph/source/stm32f37x_rcc.c ****   {
1607:../stdperiph/source/stm32f37x_rcc.c ****     bitstatus = SET;
 1669              		.loc 1 1607 0
 1670 0008 0120     		movs	r0, #1
 1671              	.LVL148:
 1672 000a 7047     		bx	lr
 1673              	.LVL149:
 1674              	.L168:
1608:../stdperiph/source/stm32f37x_rcc.c ****   }
1609:../stdperiph/source/stm32f37x_rcc.c ****   else
1610:../stdperiph/source/stm32f37x_rcc.c ****   {
1611:../stdperiph/source/stm32f37x_rcc.c ****     bitstatus = RESET;
 1675              		.loc 1 1611 0
 1676 000c 0020     		movs	r0, #0
 1677              	.LVL150:
1612:../stdperiph/source/stm32f37x_rcc.c ****   }
1613:../stdperiph/source/stm32f37x_rcc.c ****   /* Return the RCC_IT status */
1614:../stdperiph/source/stm32f37x_rcc.c ****   return  bitstatus;
1615:../stdperiph/source/stm32f37x_rcc.c **** }
 1678              		.loc 1 1615 0
 1679 000e 7047     		bx	lr
 1680              	.L170:
 1681              		.align	2
 1682              	.L169:
 1683 0010 00100240 		.word	1073876992
 1684              		.cfi_endproc
 1685              	.LFE148:
 1687              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1688              		.align	2
 1689              		.global	RCC_ClearITPendingBit
 1690              		.thumb
 1691              		.thumb_func
 1693              	RCC_ClearITPendingBit:
 1694              	.LFB149:
1616:../stdperiph/source/stm32f37x_rcc.c **** 
1617:../stdperiph/source/stm32f37x_rcc.c **** /**
1618:../stdperiph/source/stm32f37x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1619:../stdperiph/source/stm32f37x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1620:../stdperiph/source/stm32f37x_rcc.c ****   *          This parameter can be any combination of the following values:
1621:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1622:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 58


1623:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1624:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1625:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1626:../stdperiph/source/stm32f37x_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1627:../stdperiph/source/stm32f37x_rcc.c ****   * @retval None
1628:../stdperiph/source/stm32f37x_rcc.c ****   */
1629:../stdperiph/source/stm32f37x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1630:../stdperiph/source/stm32f37x_rcc.c **** {
 1695              		.loc 1 1630 0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 0, uses_anonymous_args = 0
 1699              		@ link register save eliminated.
 1700              	.LVL151:
1631:../stdperiph/source/stm32f37x_rcc.c ****   /* Check the parameters */
1632:../stdperiph/source/stm32f37x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1633:../stdperiph/source/stm32f37x_rcc.c ****   
1634:../stdperiph/source/stm32f37x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1635:../stdperiph/source/stm32f37x_rcc.c ****      pending bits */
1636:../stdperiph/source/stm32f37x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1701              		.loc 1 1636 0
 1702 0000 014B     		ldr	r3, .L172
 1703 0002 1870     		strb	r0, [r3]
 1704 0004 7047     		bx	lr
 1705              	.L173:
 1706 0006 00BF     		.align	2
 1707              	.L172:
 1708 0008 0A100240 		.word	1073877002
 1709              		.cfi_endproc
 1710              	.LFE149:
 1712              		.section	.data.ADCPrescTable,"aw",%progbits
 1713              		.align	2
 1714              		.set	.LANCHOR1,. + 0
 1717              	ADCPrescTable:
 1718 0000 02       		.byte	2
 1719 0001 04       		.byte	4
 1720 0002 06       		.byte	6
 1721 0003 08       		.byte	8
 1722              		.section	.data.SDADCPrescTable,"aw",%progbits
 1723              		.align	2
 1724              		.set	.LANCHOR2,. + 0
 1727              	SDADCPrescTable:
 1728 0000 02       		.byte	2
 1729 0001 04       		.byte	4
 1730 0002 06       		.byte	6
 1731 0003 08       		.byte	8
 1732 0004 0A       		.byte	10
 1733 0005 0C       		.byte	12
 1734 0006 0E       		.byte	14
 1735 0007 10       		.byte	16
 1736 0008 14       		.byte	20
 1737 0009 18       		.byte	24
 1738 000a 1C       		.byte	28
 1739 000b 20       		.byte	32
 1740 000c 24       		.byte	36
 1741 000d 28       		.byte	40
 1742 000e 2C       		.byte	44
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 59


 1743 000f 30       		.byte	48
 1744              		.section	.data.APBAHBPrescTable,"aw",%progbits
 1745              		.align	2
 1746              		.set	.LANCHOR0,. + 0
 1749              	APBAHBPrescTable:
 1750 0000 00       		.byte	0
 1751 0001 00       		.byte	0
 1752 0002 00       		.byte	0
 1753 0003 00       		.byte	0
 1754 0004 01       		.byte	1
 1755 0005 02       		.byte	2
 1756 0006 03       		.byte	3
 1757 0007 04       		.byte	4
 1758 0008 01       		.byte	1
 1759 0009 02       		.byte	2
 1760 000a 03       		.byte	3
 1761 000b 04       		.byte	4
 1762 000c 06       		.byte	6
 1763 000d 07       		.byte	7
 1764 000e 08       		.byte	8
 1765 000f 09       		.byte	9
 1766              		.text
 1767              	.Letext0:
 1768              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 1769              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 1770              		.file 4 "../cmsis/include/stm32f37x.h"
 1771              		.file 5 "../stdperiph/include/stm32f37x_rcc.h"
 1772              		.file 6 "../cmsis/include/core_cm4.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 60


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f37x_rcc.c
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:22     .text.RCC_DeInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:27     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:73     .text.RCC_DeInit:00000048 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:78     .text.RCC_HSEConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:83     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:101    .text.RCC_HSEConfig:0000000c $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:106    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:111    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:135    .text.RCC_AdjustHSICalibrationValue:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:140    .text.RCC_HSICmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:145    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:160    .text.RCC_HSICmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:165    .text.RCC_LSEConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:170    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:196    .text.RCC_LSEConfig:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:201    .text.RCC_LSEDriveConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:206    .text.RCC_LSEDriveConfig:00000000 RCC_LSEDriveConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:228    .text.RCC_LSEDriveConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:233    .text.RCC_LSICmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:238    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:253    .text.RCC_LSICmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:258    .text.RCC_PLLConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:263    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:286    .text.RCC_PLLConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:291    .text.RCC_PLLCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:296    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:311    .text.RCC_PLLCmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:316    .text.RCC_PREDIV1Config:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:321    .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:345    .text.RCC_PREDIV1Config:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:350    .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:355    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:370    .text.RCC_ClockSecuritySystemCmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:375    .text.RCC_MCOConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:380    .text.RCC_MCOConfig:00000000 RCC_MCOConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:395    .text.RCC_MCOConfig:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:400    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:405    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:429    .text.RCC_SYSCLKConfig:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:434    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:439    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:455    .text.RCC_GetSYSCLKSource:0000000c $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:460    .text.RCC_HCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:465    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:489    .text.RCC_HCLKConfig:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:494    .text.RCC_PCLK1Config:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:499    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:523    .text.RCC_PCLK1Config:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:528    .text.RCC_PCLK2Config:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:533    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:557    .text.RCC_PCLK2Config:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:562    .text.RCC_ADCCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:567    .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:589    .text.RCC_ADCCLKConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:594    .text.RCC_SDADCCLKConfig:00000000 $t
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 61


C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:599    .text.RCC_SDADCCLKConfig:00000000 RCC_SDADCCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:621    .text.RCC_SDADCCLKConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:626    .text.RCC_CECCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:631    .text.RCC_CECCLKConfig:00000000 RCC_CECCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:653    .text.RCC_CECCLKConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:658    .text.RCC_I2CCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:663    .text.RCC_I2CCLKConfig:00000000 RCC_I2CCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:697    .text.RCC_I2CCLKConfig:00000024 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:702    .text.RCC_USARTCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:707    .text.RCC_USARTCLKConfig:00000000 RCC_USARTCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:762    .text.RCC_USARTCLKConfig:0000003c $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:767    .text.RCC_USBCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:772    .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:787    .text.RCC_USBCLKConfig:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:792    .text.RCC_GetClocksFreq:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:797    .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1134   .text.RCC_GetClocksFreq:000001c0 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1144   .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1149   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1167   .text.RCC_RTCCLKConfig:0000000c $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1172   .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1177   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1192   .text.RCC_RTCCLKCmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1197   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1202   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1217   .text.RCC_BackupResetCmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1222   .text.RCC_AHBPeriphClockCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1227   .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1256   .text.RCC_AHBPeriphClockCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1261   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1266   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1295   .text.RCC_APB2PeriphClockCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1300   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1305   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1334   .text.RCC_APB1PeriphClockCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1339   .text.RCC_AHBPeriphResetCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1344   .text.RCC_AHBPeriphResetCmd:00000000 RCC_AHBPeriphResetCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1373   .text.RCC_AHBPeriphResetCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1378   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1383   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1412   .text.RCC_APB2PeriphResetCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1417   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1422   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1451   .text.RCC_APB1PeriphResetCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1456   .text.RCC_ITConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1461   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1490   .text.RCC_ITConfig:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1495   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1500   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1557   .text.RCC_GetFlagStatus:00000030 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1562   .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1567   .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1625   .text.RCC_ClearFlag:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1630   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1646   .text.RCC_ClearFlag:0000000c $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1651   .text.RCC_GetITStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1656   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s 			page 62


C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1683   .text.RCC_GetITStatus:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1688   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1693   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1708   .text.RCC_ClearITPendingBit:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1713   .data.ADCPrescTable:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1717   .data.ADCPrescTable:00000000 ADCPrescTable
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1723   .data.SDADCPrescTable:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1727   .data.SDADCPrescTable:00000000 SDADCPrescTable
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1745   .data.APBAHBPrescTable:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccZYbO9A.s:1749   .data.APBAHBPrescTable:00000000 APBAHBPrescTable
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
