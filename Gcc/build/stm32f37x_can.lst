ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f37x_can.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.CheckITStatus,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	CheckITStatus:
  27              	.LFB135:
  28              		.file 1 "../stdperiph/source/stm32f37x_can.c"
   1:../stdperiph/source/stm32f37x_can.c **** /**
   2:../stdperiph/source/stm32f37x_can.c ****   ******************************************************************************
   3:../stdperiph/source/stm32f37x_can.c ****   * @file    stm32f37x_can.c
   4:../stdperiph/source/stm32f37x_can.c ****   * @author  MCD Application Team
   5:../stdperiph/source/stm32f37x_can.c ****   * @version V1.0.0
   6:../stdperiph/source/stm32f37x_can.c ****   * @date    20-September-2012
   7:../stdperiph/source/stm32f37x_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../stdperiph/source/stm32f37x_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:           
   9:../stdperiph/source/stm32f37x_can.c ****   *           + Initialization and Configuration 
  10:../stdperiph/source/stm32f37x_can.c ****   *           + CAN Frames Transmission 
  11:../stdperiph/source/stm32f37x_can.c ****   *           + CAN Frames Reception    
  12:../stdperiph/source/stm32f37x_can.c ****   *           + Operation modes switch  
  13:../stdperiph/source/stm32f37x_can.c ****   *           + Error management          
  14:../stdperiph/source/stm32f37x_can.c ****   *           + Interrupts and flags        
  15:../stdperiph/source/stm32f37x_can.c ****   *         
  16:../stdperiph/source/stm32f37x_can.c ****   *  @verbatim
  17:../stdperiph/source/stm32f37x_can.c **** ================================================================================
  18:../stdperiph/source/stm32f37x_can.c ****                       ##### How to use this driver #####
  19:../stdperiph/source/stm32f37x_can.c **** ================================================================================
  20:../stdperiph/source/stm32f37x_can.c ****     [..]
  21:../stdperiph/source/stm32f37x_can.c ****     (#) Enable the CAN controller interface clock using 
  22:../stdperiph/source/stm32f37x_can.c ****         RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:../stdperiph/source/stm32f37x_can.c **** 
  24:../stdperiph/source/stm32f37x_can.c ****     (#) CAN pins configuration
  25:../stdperiph/source/stm32f37x_can.c ****        (++) Enable the clock for the CAN GPIOs using the following function:
  26:../stdperiph/source/stm32f37x_can.c ****             RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  27:../stdperiph/source/stm32f37x_can.c ****        (++) Connect the involved CAN pins to AF9 using the following function 
  28:../stdperiph/source/stm32f37x_can.c ****             GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
  29:../stdperiph/source/stm32f37x_can.c ****        (++) Configure these CAN pins in alternate function mode by calling
  30:../stdperiph/source/stm32f37x_can.c ****             the function  GPIO_Init();   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 2


  31:../stdperiph/source/stm32f37x_can.c ****     (#) Initialise and configure the CAN using CAN_Init() and 
  32:../stdperiph/source/stm32f37x_can.c ****         CAN_FilterInit() functions.   
  33:../stdperiph/source/stm32f37x_can.c **** 
  34:../stdperiph/source/stm32f37x_can.c ****     (#) Transmit the desired CAN frame using CAN_Transmit() function.
  35:../stdperiph/source/stm32f37x_can.c **** 
  36:../stdperiph/source/stm32f37x_can.c ****     (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  37:../stdperiph/source/stm32f37x_can.c ****         function.
  38:../stdperiph/source/stm32f37x_can.c **** 
  39:../stdperiph/source/stm32f37x_can.c ****     (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  40:../stdperiph/source/stm32f37x_can.c ****         function.  
  41:../stdperiph/source/stm32f37x_can.c **** 
  42:../stdperiph/source/stm32f37x_can.c ****     (#) Receive a CAN frame using CAN_Recieve() function.
  43:../stdperiph/source/stm32f37x_can.c **** 
  44:../stdperiph/source/stm32f37x_can.c ****     (#) Release the receive FIFOs using CAN_FIFORelease() function.
  45:../stdperiph/source/stm32f37x_can.c **** 
  46:../stdperiph/source/stm32f37x_can.c ****     (#) Return the number of pending received frames using 
  47:../stdperiph/source/stm32f37x_can.c ****         CAN_MessagePending() function.            
  48:../stdperiph/source/stm32f37x_can.c **** 
  49:../stdperiph/source/stm32f37x_can.c ****     (#) To control CAN events you can use one of the following two methods:
  50:../stdperiph/source/stm32f37x_can.c ****        (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  51:../stdperiph/source/stm32f37x_can.c ****        (++) Use CAN interrupts through the function CAN_ITConfig() at 
  52:../stdperiph/source/stm32f37x_can.c ****             initialization phase and CAN_GetITStatus() function into 
  53:../stdperiph/source/stm32f37x_can.c ****             interrupt routines to check if the event has occurred or not.
  54:../stdperiph/source/stm32f37x_can.c ****             After checking on a flag you should clear it using CAN_ClearFlag()
  55:../stdperiph/source/stm32f37x_can.c ****             function. And after checking on an interrupt event you should 
  56:../stdperiph/source/stm32f37x_can.c ****             clear it using CAN_ClearITPendingBit() function.            
  57:../stdperiph/source/stm32f37x_can.c **** 
  58:../stdperiph/source/stm32f37x_can.c ****   *  @endverbatim
  59:../stdperiph/source/stm32f37x_can.c ****   *         
  60:../stdperiph/source/stm32f37x_can.c ****   ******************************************************************************
  61:../stdperiph/source/stm32f37x_can.c ****   * @attention
  62:../stdperiph/source/stm32f37x_can.c ****   *
  63:../stdperiph/source/stm32f37x_can.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  64:../stdperiph/source/stm32f37x_can.c ****   *
  65:../stdperiph/source/stm32f37x_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  66:../stdperiph/source/stm32f37x_can.c ****   * You may not use this file except in compliance with the License.
  67:../stdperiph/source/stm32f37x_can.c ****   * You may obtain a copy of the License at:
  68:../stdperiph/source/stm32f37x_can.c ****   *
  69:../stdperiph/source/stm32f37x_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  70:../stdperiph/source/stm32f37x_can.c ****   *
  71:../stdperiph/source/stm32f37x_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  72:../stdperiph/source/stm32f37x_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  73:../stdperiph/source/stm32f37x_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  74:../stdperiph/source/stm32f37x_can.c ****   * See the License for the specific language governing permissions and
  75:../stdperiph/source/stm32f37x_can.c ****   * limitations under the License.
  76:../stdperiph/source/stm32f37x_can.c ****   *
  77:../stdperiph/source/stm32f37x_can.c ****   ******************************************************************************
  78:../stdperiph/source/stm32f37x_can.c ****   */
  79:../stdperiph/source/stm32f37x_can.c **** 
  80:../stdperiph/source/stm32f37x_can.c **** /* Includes ------------------------------------------------------------------*/
  81:../stdperiph/source/stm32f37x_can.c **** #include "stm32f37x_can.h"
  82:../stdperiph/source/stm32f37x_can.c **** #include "stm32f37x_rcc.h"
  83:../stdperiph/source/stm32f37x_can.c **** 
  84:../stdperiph/source/stm32f37x_can.c **** /** @addtogroup STM32F37x_StdPeriph_Driver
  85:../stdperiph/source/stm32f37x_can.c ****   * @{
  86:../stdperiph/source/stm32f37x_can.c ****   */
  87:../stdperiph/source/stm32f37x_can.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 3


  88:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN 
  89:../stdperiph/source/stm32f37x_can.c ****   * @brief CAN driver modules
  90:../stdperiph/source/stm32f37x_can.c ****   * @{
  91:../stdperiph/source/stm32f37x_can.c ****   */ 
  92:../stdperiph/source/stm32f37x_can.c **** /* Private typedef -----------------------------------------------------------*/
  93:../stdperiph/source/stm32f37x_can.c **** /* Private define ------------------------------------------------------------*/
  94:../stdperiph/source/stm32f37x_can.c **** 
  95:../stdperiph/source/stm32f37x_can.c **** /* CAN Master Control Register bits */
  96:../stdperiph/source/stm32f37x_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
  97:../stdperiph/source/stm32f37x_can.c **** 
  98:../stdperiph/source/stm32f37x_can.c **** /* CAN Mailbox Transmit Request */
  99:../stdperiph/source/stm32f37x_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
 100:../stdperiph/source/stm32f37x_can.c **** 
 101:../stdperiph/source/stm32f37x_can.c **** /* CAN Filter Master Register bits */
 102:../stdperiph/source/stm32f37x_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 103:../stdperiph/source/stm32f37x_can.c **** 
 104:../stdperiph/source/stm32f37x_can.c **** /* Time out for INAK bit */
 105:../stdperiph/source/stm32f37x_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 106:../stdperiph/source/stm32f37x_can.c **** /* Time out for SLAK bit */
 107:../stdperiph/source/stm32f37x_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 108:../stdperiph/source/stm32f37x_can.c **** 
 109:../stdperiph/source/stm32f37x_can.c **** /* Flags in TSR register */
 110:../stdperiph/source/stm32f37x_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 111:../stdperiph/source/stm32f37x_can.c **** /* Flags in RF1R register */
 112:../stdperiph/source/stm32f37x_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 113:../stdperiph/source/stm32f37x_can.c **** /* Flags in RF0R register */
 114:../stdperiph/source/stm32f37x_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 115:../stdperiph/source/stm32f37x_can.c **** /* Flags in MSR register */
 116:../stdperiph/source/stm32f37x_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 117:../stdperiph/source/stm32f37x_can.c **** /* Flags in ESR register */
 118:../stdperiph/source/stm32f37x_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 119:../stdperiph/source/stm32f37x_can.c **** 
 120:../stdperiph/source/stm32f37x_can.c **** /* Mailboxes definition */
 121:../stdperiph/source/stm32f37x_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 122:../stdperiph/source/stm32f37x_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 123:../stdperiph/source/stm32f37x_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 124:../stdperiph/source/stm32f37x_can.c **** 
 125:../stdperiph/source/stm32f37x_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 126:../stdperiph/source/stm32f37x_can.c **** 
 127:../stdperiph/source/stm32f37x_can.c **** /* Private macro -------------------------------------------------------------*/
 128:../stdperiph/source/stm32f37x_can.c **** /* Private variables ---------------------------------------------------------*/
 129:../stdperiph/source/stm32f37x_can.c **** /* Private function prototypes -----------------------------------------------*/
 130:../stdperiph/source/stm32f37x_can.c **** /* Private functions ---------------------------------------------------------*/
 131:../stdperiph/source/stm32f37x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 132:../stdperiph/source/stm32f37x_can.c **** 
 133:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN_Private_Functions
 134:../stdperiph/source/stm32f37x_can.c ****   * @{
 135:../stdperiph/source/stm32f37x_can.c ****   */
 136:../stdperiph/source/stm32f37x_can.c **** 
 137:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 138:../stdperiph/source/stm32f37x_can.c ****  *  @brief    Initialization and Configuration functions 
 139:../stdperiph/source/stm32f37x_can.c ****  *
 140:../stdperiph/source/stm32f37x_can.c **** @verbatim    
 141:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================
 142:../stdperiph/source/stm32f37x_can.c ****           ##### Initialization and Configuration functions #####
 143:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================
 144:../stdperiph/source/stm32f37x_can.c ****     [..] This section provides functions allowing to 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 4


 145:../stdperiph/source/stm32f37x_can.c ****          (#) Initialize the CAN peripherals : Prescaler, operating mode, the maximum number 
 146:../stdperiph/source/stm32f37x_can.c ****              of time quanta to perform resynchronization, the number of time quanta in
 147:../stdperiph/source/stm32f37x_can.c ****              Bit Segment 1 and 2 and many other modes. 
 148:../stdperiph/source/stm32f37x_can.c ****          (#) Configures the CAN reception filter.
 149:../stdperiph/source/stm32f37x_can.c ****          (#) Select the start bank filter for slave CAN.
 150:../stdperiph/source/stm32f37x_can.c ****          (#) Enables or disables the Debug Freeze mode for CAN
 151:../stdperiph/source/stm32f37x_can.c ****          (#) Enables or disables the CAN Time Trigger Operation communication mode
 152:../stdperiph/source/stm32f37x_can.c ****    
 153:../stdperiph/source/stm32f37x_can.c **** @endverbatim
 154:../stdperiph/source/stm32f37x_can.c ****   * @{
 155:../stdperiph/source/stm32f37x_can.c ****   */
 156:../stdperiph/source/stm32f37x_can.c ****   
 157:../stdperiph/source/stm32f37x_can.c **** /**
 158:../stdperiph/source/stm32f37x_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 159:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 160:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 161:../stdperiph/source/stm32f37x_can.c ****   */
 162:../stdperiph/source/stm32f37x_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 163:../stdperiph/source/stm32f37x_can.c **** {
 164:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 165:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 166:../stdperiph/source/stm32f37x_can.c ****  
 167:../stdperiph/source/stm32f37x_can.c ****   if (CANx == CAN1)
 168:../stdperiph/source/stm32f37x_can.c ****   {
 169:../stdperiph/source/stm32f37x_can.c ****     /* Enable CAN1 reset state */
 170:../stdperiph/source/stm32f37x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 171:../stdperiph/source/stm32f37x_can.c ****     /* Release CAN1 from reset state */
 172:../stdperiph/source/stm32f37x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 173:../stdperiph/source/stm32f37x_can.c ****   }
 174:../stdperiph/source/stm32f37x_can.c **** }
 175:../stdperiph/source/stm32f37x_can.c **** 
 176:../stdperiph/source/stm32f37x_can.c **** /**
 177:../stdperiph/source/stm32f37x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 178:../stdperiph/source/stm32f37x_can.c ****   *         parameters in the CAN_InitStruct.
 179:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 180:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 181:../stdperiph/source/stm32f37x_can.c ****   *         the configuration information for the CAN peripheral.
 182:../stdperiph/source/stm32f37x_can.c ****   * @retval Constant indicates initialization succeed which will be 
 183:../stdperiph/source/stm32f37x_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 184:../stdperiph/source/stm32f37x_can.c ****   */
 185:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 186:../stdperiph/source/stm32f37x_can.c **** {
 187:../stdperiph/source/stm32f37x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 188:../stdperiph/source/stm32f37x_can.c ****   uint32_t wait_ack = 0x00000000;
 189:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 190:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 191:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 192:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 193:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 194:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 195:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 196:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 197:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 198:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 199:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 200:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 201:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 5


 202:../stdperiph/source/stm32f37x_can.c **** 
 203:../stdperiph/source/stm32f37x_can.c ****   /* Exit from sleep mode */
 204:../stdperiph/source/stm32f37x_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 205:../stdperiph/source/stm32f37x_can.c **** 
 206:../stdperiph/source/stm32f37x_can.c ****   /* Request initialisation */
 207:../stdperiph/source/stm32f37x_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 208:../stdperiph/source/stm32f37x_can.c **** 
 209:../stdperiph/source/stm32f37x_can.c ****   /* Wait the acknowledge */
 210:../stdperiph/source/stm32f37x_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 211:../stdperiph/source/stm32f37x_can.c ****   {
 212:../stdperiph/source/stm32f37x_can.c ****     wait_ack++;
 213:../stdperiph/source/stm32f37x_can.c ****   }
 214:../stdperiph/source/stm32f37x_can.c **** 
 215:../stdperiph/source/stm32f37x_can.c ****   /* Check acknowledge */
 216:../stdperiph/source/stm32f37x_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 217:../stdperiph/source/stm32f37x_can.c ****   {
 218:../stdperiph/source/stm32f37x_can.c ****     InitStatus = CAN_InitStatus_Failed;
 219:../stdperiph/source/stm32f37x_can.c ****   }
 220:../stdperiph/source/stm32f37x_can.c ****   else 
 221:../stdperiph/source/stm32f37x_can.c ****   {
 222:../stdperiph/source/stm32f37x_can.c ****     /* Set the time triggered communication mode */
 223:../stdperiph/source/stm32f37x_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 224:../stdperiph/source/stm32f37x_can.c ****     {
 225:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 226:../stdperiph/source/stm32f37x_can.c ****     }
 227:../stdperiph/source/stm32f37x_can.c ****     else
 228:../stdperiph/source/stm32f37x_can.c ****     {
 229:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 230:../stdperiph/source/stm32f37x_can.c ****     }
 231:../stdperiph/source/stm32f37x_can.c **** 
 232:../stdperiph/source/stm32f37x_can.c ****     /* Set the automatic bus-off management */
 233:../stdperiph/source/stm32f37x_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 234:../stdperiph/source/stm32f37x_can.c ****     {
 235:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 236:../stdperiph/source/stm32f37x_can.c ****     }
 237:../stdperiph/source/stm32f37x_can.c ****     else
 238:../stdperiph/source/stm32f37x_can.c ****     {
 239:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 240:../stdperiph/source/stm32f37x_can.c ****     }
 241:../stdperiph/source/stm32f37x_can.c **** 
 242:../stdperiph/source/stm32f37x_can.c ****     /* Set the automatic wake-up mode */
 243:../stdperiph/source/stm32f37x_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 244:../stdperiph/source/stm32f37x_can.c ****     {
 245:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 246:../stdperiph/source/stm32f37x_can.c ****     }
 247:../stdperiph/source/stm32f37x_can.c ****     else
 248:../stdperiph/source/stm32f37x_can.c ****     {
 249:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 250:../stdperiph/source/stm32f37x_can.c ****     }
 251:../stdperiph/source/stm32f37x_can.c **** 
 252:../stdperiph/source/stm32f37x_can.c ****     /* Set the no automatic retransmission */
 253:../stdperiph/source/stm32f37x_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 254:../stdperiph/source/stm32f37x_can.c ****     {
 255:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR |= CAN_MCR_NART;
 256:../stdperiph/source/stm32f37x_can.c ****     }
 257:../stdperiph/source/stm32f37x_can.c ****     else
 258:../stdperiph/source/stm32f37x_can.c ****     {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 6


 259:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 260:../stdperiph/source/stm32f37x_can.c ****     }
 261:../stdperiph/source/stm32f37x_can.c **** 
 262:../stdperiph/source/stm32f37x_can.c ****     /* Set the receive FIFO locked mode */
 263:../stdperiph/source/stm32f37x_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 264:../stdperiph/source/stm32f37x_can.c ****     {
 265:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 266:../stdperiph/source/stm32f37x_can.c ****     }
 267:../stdperiph/source/stm32f37x_can.c ****     else
 268:../stdperiph/source/stm32f37x_can.c ****     {
 269:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 270:../stdperiph/source/stm32f37x_can.c ****     }
 271:../stdperiph/source/stm32f37x_can.c **** 
 272:../stdperiph/source/stm32f37x_can.c ****     /* Set the transmit FIFO priority */
 273:../stdperiph/source/stm32f37x_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 274:../stdperiph/source/stm32f37x_can.c ****     {
 275:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 276:../stdperiph/source/stm32f37x_can.c ****     }
 277:../stdperiph/source/stm32f37x_can.c ****     else
 278:../stdperiph/source/stm32f37x_can.c ****     {
 279:../stdperiph/source/stm32f37x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 280:../stdperiph/source/stm32f37x_can.c ****     }
 281:../stdperiph/source/stm32f37x_can.c **** 
 282:../stdperiph/source/stm32f37x_can.c ****     /* Set the bit timing register */
 283:../stdperiph/source/stm32f37x_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 284:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 285:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 286:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 287:../stdperiph/source/stm32f37x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 288:../stdperiph/source/stm32f37x_can.c **** 
 289:../stdperiph/source/stm32f37x_can.c ****     /* Request leave initialisation */
 290:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 291:../stdperiph/source/stm32f37x_can.c **** 
 292:../stdperiph/source/stm32f37x_can.c ****    /* Wait the acknowledge */
 293:../stdperiph/source/stm32f37x_can.c ****    wait_ack = 0;
 294:../stdperiph/source/stm32f37x_can.c **** 
 295:../stdperiph/source/stm32f37x_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 296:../stdperiph/source/stm32f37x_can.c ****    {
 297:../stdperiph/source/stm32f37x_can.c ****      wait_ack++;
 298:../stdperiph/source/stm32f37x_can.c ****    }
 299:../stdperiph/source/stm32f37x_can.c **** 
 300:../stdperiph/source/stm32f37x_can.c ****     /* ...and check acknowledged */
 301:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 302:../stdperiph/source/stm32f37x_can.c ****     {
 303:../stdperiph/source/stm32f37x_can.c ****       InitStatus = CAN_InitStatus_Failed;
 304:../stdperiph/source/stm32f37x_can.c ****     }
 305:../stdperiph/source/stm32f37x_can.c ****     else
 306:../stdperiph/source/stm32f37x_can.c ****     {
 307:../stdperiph/source/stm32f37x_can.c ****       InitStatus = CAN_InitStatus_Success ;
 308:../stdperiph/source/stm32f37x_can.c ****     }
 309:../stdperiph/source/stm32f37x_can.c ****   }
 310:../stdperiph/source/stm32f37x_can.c **** 
 311:../stdperiph/source/stm32f37x_can.c ****   /* At this step, return the status of initialization */
 312:../stdperiph/source/stm32f37x_can.c ****   return InitStatus;
 313:../stdperiph/source/stm32f37x_can.c **** }
 314:../stdperiph/source/stm32f37x_can.c **** 
 315:../stdperiph/source/stm32f37x_can.c **** /**
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 7


 316:../stdperiph/source/stm32f37x_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 317:../stdperiph/source/stm32f37x_can.c ****   *         parameters in the CAN_FilterInitStruct.
 318:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 319:../stdperiph/source/stm32f37x_can.c ****   *         contains the configuration information.
 320:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 321:../stdperiph/source/stm32f37x_can.c ****   */
 322:../stdperiph/source/stm32f37x_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 323:../stdperiph/source/stm32f37x_can.c **** {
 324:../stdperiph/source/stm32f37x_can.c ****   uint32_t filter_number_bit_pos = 0;
 325:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 326:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 327:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 328:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 329:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 330:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 331:../stdperiph/source/stm32f37x_can.c **** 
 332:../stdperiph/source/stm32f37x_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 333:../stdperiph/source/stm32f37x_can.c **** 
 334:../stdperiph/source/stm32f37x_can.c ****   /* Initialisation mode for the filter */
 335:../stdperiph/source/stm32f37x_can.c ****   CAN1->FMR |= FMR_FINIT;
 336:../stdperiph/source/stm32f37x_can.c **** 
 337:../stdperiph/source/stm32f37x_can.c ****   /* Filter Deactivation */
 338:../stdperiph/source/stm32f37x_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 339:../stdperiph/source/stm32f37x_can.c **** 
 340:../stdperiph/source/stm32f37x_can.c ****   /* Filter Scale */
 341:../stdperiph/source/stm32f37x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 342:../stdperiph/source/stm32f37x_can.c ****   {
 343:../stdperiph/source/stm32f37x_can.c ****     /* 16-bit scale for the filter */
 344:../stdperiph/source/stm32f37x_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 345:../stdperiph/source/stm32f37x_can.c **** 
 346:../stdperiph/source/stm32f37x_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 347:../stdperiph/source/stm32f37x_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 348:../stdperiph/source/stm32f37x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 349:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 350:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 351:../stdperiph/source/stm32f37x_can.c **** 
 352:../stdperiph/source/stm32f37x_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 353:../stdperiph/source/stm32f37x_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 354:../stdperiph/source/stm32f37x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 355:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 356:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 357:../stdperiph/source/stm32f37x_can.c ****   }
 358:../stdperiph/source/stm32f37x_can.c **** 
 359:../stdperiph/source/stm32f37x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 360:../stdperiph/source/stm32f37x_can.c ****   {
 361:../stdperiph/source/stm32f37x_can.c ****     /* 32-bit scale for the filter */
 362:../stdperiph/source/stm32f37x_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 363:../stdperiph/source/stm32f37x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 364:../stdperiph/source/stm32f37x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 365:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 366:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 367:../stdperiph/source/stm32f37x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 368:../stdperiph/source/stm32f37x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 369:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 370:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 371:../stdperiph/source/stm32f37x_can.c ****   }
 372:../stdperiph/source/stm32f37x_can.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 8


 373:../stdperiph/source/stm32f37x_can.c ****   /* Filter Mode */
 374:../stdperiph/source/stm32f37x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 375:../stdperiph/source/stm32f37x_can.c ****   {
 376:../stdperiph/source/stm32f37x_can.c ****     /*Id/Mask mode for the filter*/
 377:../stdperiph/source/stm32f37x_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 378:../stdperiph/source/stm32f37x_can.c ****   }
 379:../stdperiph/source/stm32f37x_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 380:../stdperiph/source/stm32f37x_can.c ****   {
 381:../stdperiph/source/stm32f37x_can.c ****     /*Identifier list mode for the filter*/
 382:../stdperiph/source/stm32f37x_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 383:../stdperiph/source/stm32f37x_can.c ****   }
 384:../stdperiph/source/stm32f37x_can.c **** 
 385:../stdperiph/source/stm32f37x_can.c ****   /* Filter FIFO assignment */
 386:../stdperiph/source/stm32f37x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 387:../stdperiph/source/stm32f37x_can.c ****   {
 388:../stdperiph/source/stm32f37x_can.c ****     /* FIFO 0 assignation for the filter */
 389:../stdperiph/source/stm32f37x_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 390:../stdperiph/source/stm32f37x_can.c ****   }
 391:../stdperiph/source/stm32f37x_can.c **** 
 392:../stdperiph/source/stm32f37x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 393:../stdperiph/source/stm32f37x_can.c ****   {
 394:../stdperiph/source/stm32f37x_can.c ****     /* FIFO 1 assignation for the filter */
 395:../stdperiph/source/stm32f37x_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 396:../stdperiph/source/stm32f37x_can.c ****   }
 397:../stdperiph/source/stm32f37x_can.c ****   
 398:../stdperiph/source/stm32f37x_can.c ****   /* Filter activation */
 399:../stdperiph/source/stm32f37x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 400:../stdperiph/source/stm32f37x_can.c ****   {
 401:../stdperiph/source/stm32f37x_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 402:../stdperiph/source/stm32f37x_can.c ****   }
 403:../stdperiph/source/stm32f37x_can.c **** 
 404:../stdperiph/source/stm32f37x_can.c ****   /* Leave the initialisation mode for the filter */
 405:../stdperiph/source/stm32f37x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 406:../stdperiph/source/stm32f37x_can.c **** }
 407:../stdperiph/source/stm32f37x_can.c **** 
 408:../stdperiph/source/stm32f37x_can.c **** /**
 409:../stdperiph/source/stm32f37x_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 410:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 411:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 412:../stdperiph/source/stm32f37x_can.c ****   */
 413:../stdperiph/source/stm32f37x_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 414:../stdperiph/source/stm32f37x_can.c **** {
 415:../stdperiph/source/stm32f37x_can.c ****   /* Reset CAN init structure parameters values */
 416:../stdperiph/source/stm32f37x_can.c ****   
 417:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the time triggered communication mode */
 418:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 419:../stdperiph/source/stm32f37x_can.c ****   
 420:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the automatic bus-off management */
 421:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 422:../stdperiph/source/stm32f37x_can.c ****   
 423:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the automatic wake-up mode */
 424:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 425:../stdperiph/source/stm32f37x_can.c ****   
 426:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the no automatic retransmission */
 427:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 428:../stdperiph/source/stm32f37x_can.c ****   
 429:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the receive FIFO locked mode */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 9


 430:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 431:../stdperiph/source/stm32f37x_can.c ****   
 432:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the transmit FIFO priority */
 433:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 434:../stdperiph/source/stm32f37x_can.c ****   
 435:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the CAN_Mode member */
 436:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 437:../stdperiph/source/stm32f37x_can.c ****   
 438:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the CAN_SJW member */
 439:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 440:../stdperiph/source/stm32f37x_can.c ****   
 441:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the CAN_BS1 member */
 442:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 443:../stdperiph/source/stm32f37x_can.c ****   
 444:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the CAN_BS2 member */
 445:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 446:../stdperiph/source/stm32f37x_can.c ****   
 447:../stdperiph/source/stm32f37x_can.c ****   /* Initialize the CAN_Prescaler member */
 448:../stdperiph/source/stm32f37x_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 449:../stdperiph/source/stm32f37x_can.c **** }
 450:../stdperiph/source/stm32f37x_can.c **** 
 451:../stdperiph/source/stm32f37x_can.c **** /**
 452:../stdperiph/source/stm32f37x_can.c ****   * @brief  Select the start bank filter for slave CAN.
 453:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 454:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 455:../stdperiph/source/stm32f37x_can.c ****   */
 456:../stdperiph/source/stm32f37x_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 457:../stdperiph/source/stm32f37x_can.c **** {
 458:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 459:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 460:../stdperiph/source/stm32f37x_can.c ****   
 461:../stdperiph/source/stm32f37x_can.c ****   /* Enter Initialisation mode for the filter */
 462:../stdperiph/source/stm32f37x_can.c ****   CAN1->FMR |= FMR_FINIT;
 463:../stdperiph/source/stm32f37x_can.c ****   
 464:../stdperiph/source/stm32f37x_can.c ****   /* Select the start slave bank */
 465:../stdperiph/source/stm32f37x_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 466:../stdperiph/source/stm32f37x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 467:../stdperiph/source/stm32f37x_can.c ****   
 468:../stdperiph/source/stm32f37x_can.c ****   /* Leave Initialisation mode for the filter */
 469:../stdperiph/source/stm32f37x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 470:../stdperiph/source/stm32f37x_can.c **** }
 471:../stdperiph/source/stm32f37x_can.c **** 
 472:../stdperiph/source/stm32f37x_can.c **** /**
 473:../stdperiph/source/stm32f37x_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 474:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 475:../stdperiph/source/stm32f37x_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 476:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 477:../stdperiph/source/stm32f37x_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 478:../stdperiph/source/stm32f37x_can.c ****   *          or DISABLE (CAN is working during debug).
 479:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 480:../stdperiph/source/stm32f37x_can.c ****   */
 481:../stdperiph/source/stm32f37x_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 482:../stdperiph/source/stm32f37x_can.c **** {
 483:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 484:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 485:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:../stdperiph/source/stm32f37x_can.c ****   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 10


 487:../stdperiph/source/stm32f37x_can.c ****   if (NewState != DISABLE)
 488:../stdperiph/source/stm32f37x_can.c ****   {
 489:../stdperiph/source/stm32f37x_can.c ****     /* Enable Debug Freeze  */
 490:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR |= MCR_DBF;
 491:../stdperiph/source/stm32f37x_can.c ****   }
 492:../stdperiph/source/stm32f37x_can.c ****   else
 493:../stdperiph/source/stm32f37x_can.c ****   {
 494:../stdperiph/source/stm32f37x_can.c ****     /* Disable Debug Freeze */
 495:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR &= ~MCR_DBF;
 496:../stdperiph/source/stm32f37x_can.c ****   }
 497:../stdperiph/source/stm32f37x_can.c **** }
 498:../stdperiph/source/stm32f37x_can.c **** 
 499:../stdperiph/source/stm32f37x_can.c **** 
 500:../stdperiph/source/stm32f37x_can.c **** /**
 501:../stdperiph/source/stm32f37x_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 502:../stdperiph/source/stm32f37x_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 503:../stdperiph/source/stm32f37x_can.c ****   *         sent over the CAN bus.  
 504:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 505:../stdperiph/source/stm32f37x_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 506:../stdperiph/source/stm32f37x_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 507:../stdperiph/source/stm32f37x_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 508:../stdperiph/source/stm32f37x_can.c ****   *         in data byte 7. 
 509:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 510:../stdperiph/source/stm32f37x_can.c ****   */
 511:../stdperiph/source/stm32f37x_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 512:../stdperiph/source/stm32f37x_can.c **** {
 513:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 514:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 515:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../stdperiph/source/stm32f37x_can.c ****   if (NewState != DISABLE)
 517:../stdperiph/source/stm32f37x_can.c ****   {
 518:../stdperiph/source/stm32f37x_can.c ****     /* Enable the TTCM mode */
 519:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 520:../stdperiph/source/stm32f37x_can.c **** 
 521:../stdperiph/source/stm32f37x_can.c ****     /* Set TGT bits */
 522:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 523:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 524:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 525:../stdperiph/source/stm32f37x_can.c ****   }
 526:../stdperiph/source/stm32f37x_can.c ****   else
 527:../stdperiph/source/stm32f37x_can.c ****   {
 528:../stdperiph/source/stm32f37x_can.c ****     /* Disable the TTCM mode */
 529:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 530:../stdperiph/source/stm32f37x_can.c **** 
 531:../stdperiph/source/stm32f37x_can.c ****     /* Reset TGT bits */
 532:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 533:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 534:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 535:../stdperiph/source/stm32f37x_can.c ****   }
 536:../stdperiph/source/stm32f37x_can.c **** }
 537:../stdperiph/source/stm32f37x_can.c **** /**
 538:../stdperiph/source/stm32f37x_can.c ****   * @}
 539:../stdperiph/source/stm32f37x_can.c ****   */
 540:../stdperiph/source/stm32f37x_can.c **** 
 541:../stdperiph/source/stm32f37x_can.c **** 
 542:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 543:../stdperiph/source/stm32f37x_can.c ****  *  @brief    CAN Frames Transmission functions 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 11


 544:../stdperiph/source/stm32f37x_can.c ****  *
 545:../stdperiph/source/stm32f37x_can.c **** @verbatim    
 546:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================
 547:../stdperiph/source/stm32f37x_can.c ****           ##### CAN Frames Transmission functions ##### 
 548:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================  
 549:../stdperiph/source/stm32f37x_can.c ****     [..] This section provides functions allowing to 
 550:../stdperiph/source/stm32f37x_can.c ****          (#) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 551:../stdperiph/source/stm32f37x_can.c ****          (#) Check the transmission status of a CAN Frame
 552:../stdperiph/source/stm32f37x_can.c ****          (#) Cancel a transmit request
 553:../stdperiph/source/stm32f37x_can.c **** 
 554:../stdperiph/source/stm32f37x_can.c **** @endverbatim
 555:../stdperiph/source/stm32f37x_can.c ****   * @{
 556:../stdperiph/source/stm32f37x_can.c ****   */
 557:../stdperiph/source/stm32f37x_can.c **** 
 558:../stdperiph/source/stm32f37x_can.c **** /**
 559:../stdperiph/source/stm32f37x_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 560:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 561:../stdperiph/source/stm32f37x_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 562:../stdperiph/source/stm32f37x_can.c ****   * @retval The number of the mailbox that is used for transmission or
 563:../stdperiph/source/stm32f37x_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 564:../stdperiph/source/stm32f37x_can.c ****   */
 565:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 566:../stdperiph/source/stm32f37x_can.c **** {
 567:../stdperiph/source/stm32f37x_can.c ****   uint8_t transmit_mailbox = 0;
 568:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 569:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 570:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 571:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 572:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 573:../stdperiph/source/stm32f37x_can.c **** 
 574:../stdperiph/source/stm32f37x_can.c ****   /* Select one empty transmit mailbox */
 575:../stdperiph/source/stm32f37x_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 576:../stdperiph/source/stm32f37x_can.c ****   {
 577:../stdperiph/source/stm32f37x_can.c ****     transmit_mailbox = 0;
 578:../stdperiph/source/stm32f37x_can.c ****   }
 579:../stdperiph/source/stm32f37x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 580:../stdperiph/source/stm32f37x_can.c ****   {
 581:../stdperiph/source/stm32f37x_can.c ****     transmit_mailbox = 1;
 582:../stdperiph/source/stm32f37x_can.c ****   }
 583:../stdperiph/source/stm32f37x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 584:../stdperiph/source/stm32f37x_can.c ****   {
 585:../stdperiph/source/stm32f37x_can.c ****     transmit_mailbox = 2;
 586:../stdperiph/source/stm32f37x_can.c ****   }
 587:../stdperiph/source/stm32f37x_can.c ****   else
 588:../stdperiph/source/stm32f37x_can.c ****   {
 589:../stdperiph/source/stm32f37x_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 590:../stdperiph/source/stm32f37x_can.c ****   }
 591:../stdperiph/source/stm32f37x_can.c **** 
 592:../stdperiph/source/stm32f37x_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 593:../stdperiph/source/stm32f37x_can.c ****   {
 594:../stdperiph/source/stm32f37x_can.c ****     /* Set up the Id */
 595:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 596:../stdperiph/source/stm32f37x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 597:../stdperiph/source/stm32f37x_can.c ****     {
 598:../stdperiph/source/stm32f37x_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 599:../stdperiph/source/stm32f37x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 600:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->RTR);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 12


 601:../stdperiph/source/stm32f37x_can.c ****     }
 602:../stdperiph/source/stm32f37x_can.c ****     else
 603:../stdperiph/source/stm32f37x_can.c ****     {
 604:../stdperiph/source/stm32f37x_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 605:../stdperiph/source/stm32f37x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 606:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->IDE | \
 607:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->RTR);
 608:../stdperiph/source/stm32f37x_can.c ****     }
 609:../stdperiph/source/stm32f37x_can.c ****     
 610:../stdperiph/source/stm32f37x_can.c ****     /* Set up the DLC */
 611:../stdperiph/source/stm32f37x_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 612:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 613:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 614:../stdperiph/source/stm32f37x_can.c **** 
 615:../stdperiph/source/stm32f37x_can.c ****     /* Set up the data field */
 616:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 617:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 618:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 619:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 620:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 621:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 622:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 623:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 624:../stdperiph/source/stm32f37x_can.c ****     /* Request transmission */
 625:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 626:../stdperiph/source/stm32f37x_can.c ****   }
 627:../stdperiph/source/stm32f37x_can.c ****   return transmit_mailbox;
 628:../stdperiph/source/stm32f37x_can.c **** }
 629:../stdperiph/source/stm32f37x_can.c **** 
 630:../stdperiph/source/stm32f37x_can.c **** /**
 631:../stdperiph/source/stm32f37x_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 632:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 633:../stdperiph/source/stm32f37x_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 634:../stdperiph/source/stm32f37x_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 635:../stdperiph/source/stm32f37x_can.c ****   *         CAN_TxStatus_Failed in an other case.
 636:../stdperiph/source/stm32f37x_can.c ****   */
 637:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 638:../stdperiph/source/stm32f37x_can.c **** {
 639:../stdperiph/source/stm32f37x_can.c ****   uint32_t state = 0;
 640:../stdperiph/source/stm32f37x_can.c **** 
 641:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 642:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 643:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 644:../stdperiph/source/stm32f37x_can.c ****  
 645:../stdperiph/source/stm32f37x_can.c ****   switch (TransmitMailbox)
 646:../stdperiph/source/stm32f37x_can.c ****   {
 647:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_0): 
 648:../stdperiph/source/stm32f37x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 649:../stdperiph/source/stm32f37x_can.c ****       break;
 650:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_1): 
 651:../stdperiph/source/stm32f37x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 652:../stdperiph/source/stm32f37x_can.c ****       break;
 653:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_2): 
 654:../stdperiph/source/stm32f37x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 655:../stdperiph/source/stm32f37x_can.c ****       break;
 656:../stdperiph/source/stm32f37x_can.c ****     default:
 657:../stdperiph/source/stm32f37x_can.c ****       state = CAN_TxStatus_Failed;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 13


 658:../stdperiph/source/stm32f37x_can.c ****       break;
 659:../stdperiph/source/stm32f37x_can.c ****   }
 660:../stdperiph/source/stm32f37x_can.c ****   switch (state)
 661:../stdperiph/source/stm32f37x_can.c ****   {
 662:../stdperiph/source/stm32f37x_can.c ****       /* transmit pending  */
 663:../stdperiph/source/stm32f37x_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 664:../stdperiph/source/stm32f37x_can.c ****       break;
 665:../stdperiph/source/stm32f37x_can.c ****       /* transmit failed  */
 666:../stdperiph/source/stm32f37x_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 667:../stdperiph/source/stm32f37x_can.c ****       break;
 668:../stdperiph/source/stm32f37x_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 669:../stdperiph/source/stm32f37x_can.c ****       break;
 670:../stdperiph/source/stm32f37x_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 671:../stdperiph/source/stm32f37x_can.c ****       break;
 672:../stdperiph/source/stm32f37x_can.c ****       /* transmit succeeded  */
 673:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 674:../stdperiph/source/stm32f37x_can.c ****       break;
 675:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 676:../stdperiph/source/stm32f37x_can.c ****       break;
 677:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 678:../stdperiph/source/stm32f37x_can.c ****       break;
 679:../stdperiph/source/stm32f37x_can.c ****     default: state = CAN_TxStatus_Failed;
 680:../stdperiph/source/stm32f37x_can.c ****       break;
 681:../stdperiph/source/stm32f37x_can.c ****   }
 682:../stdperiph/source/stm32f37x_can.c ****   return (uint8_t) state;
 683:../stdperiph/source/stm32f37x_can.c **** }
 684:../stdperiph/source/stm32f37x_can.c **** 
 685:../stdperiph/source/stm32f37x_can.c **** /**
 686:../stdperiph/source/stm32f37x_can.c ****   * @brief  Cancels a transmit request.
 687:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 688:../stdperiph/source/stm32f37x_can.c ****   * @param  Mailbox: Mailbox number.
 689:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 690:../stdperiph/source/stm32f37x_can.c ****   */
 691:../stdperiph/source/stm32f37x_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 692:../stdperiph/source/stm32f37x_can.c **** {
 693:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 694:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 695:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 696:../stdperiph/source/stm32f37x_can.c ****   /* abort transmission */
 697:../stdperiph/source/stm32f37x_can.c ****   switch (Mailbox)
 698:../stdperiph/source/stm32f37x_can.c ****   {
 699:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 700:../stdperiph/source/stm32f37x_can.c ****       break;
 701:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 702:../stdperiph/source/stm32f37x_can.c ****       break;
 703:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 704:../stdperiph/source/stm32f37x_can.c ****       break;
 705:../stdperiph/source/stm32f37x_can.c ****     default:
 706:../stdperiph/source/stm32f37x_can.c ****       break;
 707:../stdperiph/source/stm32f37x_can.c ****   }
 708:../stdperiph/source/stm32f37x_can.c **** }
 709:../stdperiph/source/stm32f37x_can.c **** /**
 710:../stdperiph/source/stm32f37x_can.c ****   * @}
 711:../stdperiph/source/stm32f37x_can.c ****   */
 712:../stdperiph/source/stm32f37x_can.c **** 
 713:../stdperiph/source/stm32f37x_can.c **** 
 714:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 14


 715:../stdperiph/source/stm32f37x_can.c ****  *  @brief    CAN Frames Reception functions 
 716:../stdperiph/source/stm32f37x_can.c ****  *
 717:../stdperiph/source/stm32f37x_can.c **** @verbatim    
 718:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================
 719:../stdperiph/source/stm32f37x_can.c ****           ##### CAN Frames Reception functions ##### 
 720:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================  
 721:../stdperiph/source/stm32f37x_can.c ****     [..] This section provides functions allowing to 
 722:../stdperiph/source/stm32f37x_can.c ****          (#) Receive a correct CAN frame
 723:../stdperiph/source/stm32f37x_can.c ****          (#) Release a specified receive FIFO (2 FIFOs are available)
 724:../stdperiph/source/stm32f37x_can.c ****          (#) Return the number of the pending received CAN frames
 725:../stdperiph/source/stm32f37x_can.c **** 
 726:../stdperiph/source/stm32f37x_can.c **** @endverbatim
 727:../stdperiph/source/stm32f37x_can.c ****   * @{
 728:../stdperiph/source/stm32f37x_can.c ****   */
 729:../stdperiph/source/stm32f37x_can.c **** 
 730:../stdperiph/source/stm32f37x_can.c **** /**
 731:../stdperiph/source/stm32f37x_can.c ****   * @brief  Receives a correct CAN frame.
 732:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 733:../stdperiph/source/stm32f37x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 734:../stdperiph/source/stm32f37x_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 735:../stdperiph/source/stm32f37x_can.c ****   *         CAN DLC, CAN data and FMI number.
 736:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 737:../stdperiph/source/stm32f37x_can.c ****   */
 738:../stdperiph/source/stm32f37x_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 739:../stdperiph/source/stm32f37x_can.c **** {
 740:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 741:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 742:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 743:../stdperiph/source/stm32f37x_can.c ****   /* Get the Id */
 744:../stdperiph/source/stm32f37x_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 745:../stdperiph/source/stm32f37x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 746:../stdperiph/source/stm32f37x_can.c ****   {
 747:../stdperiph/source/stm32f37x_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 748:../stdperiph/source/stm32f37x_can.c ****   }
 749:../stdperiph/source/stm32f37x_can.c ****   else
 750:../stdperiph/source/stm32f37x_can.c ****   {
 751:../stdperiph/source/stm32f37x_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 752:../stdperiph/source/stm32f37x_can.c ****   }
 753:../stdperiph/source/stm32f37x_can.c ****   
 754:../stdperiph/source/stm32f37x_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 755:../stdperiph/source/stm32f37x_can.c ****   /* Get the DLC */
 756:../stdperiph/source/stm32f37x_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 757:../stdperiph/source/stm32f37x_can.c ****   /* Get the FMI */
 758:../stdperiph/source/stm32f37x_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 759:../stdperiph/source/stm32f37x_can.c ****   /* Get the data field */
 760:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 761:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 762:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 763:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 764:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 765:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 766:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 767:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 768:../stdperiph/source/stm32f37x_can.c ****   /* Release the FIFO */
 769:../stdperiph/source/stm32f37x_can.c ****   /* Release FIFO0 */
 770:../stdperiph/source/stm32f37x_can.c ****   if (FIFONumber == CAN_FIFO0)
 771:../stdperiph/source/stm32f37x_can.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 15


 772:../stdperiph/source/stm32f37x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 773:../stdperiph/source/stm32f37x_can.c ****   }
 774:../stdperiph/source/stm32f37x_can.c ****   /* Release FIFO1 */
 775:../stdperiph/source/stm32f37x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 776:../stdperiph/source/stm32f37x_can.c ****   {
 777:../stdperiph/source/stm32f37x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 778:../stdperiph/source/stm32f37x_can.c ****   }
 779:../stdperiph/source/stm32f37x_can.c **** }
 780:../stdperiph/source/stm32f37x_can.c **** 
 781:../stdperiph/source/stm32f37x_can.c **** /**
 782:../stdperiph/source/stm32f37x_can.c ****   * @brief  Releases the specified receive FIFO.
 783:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 784:../stdperiph/source/stm32f37x_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 785:../stdperiph/source/stm32f37x_can.c ****   * @retval None
 786:../stdperiph/source/stm32f37x_can.c ****   */
 787:../stdperiph/source/stm32f37x_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 788:../stdperiph/source/stm32f37x_can.c **** {
 789:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 790:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 791:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 792:../stdperiph/source/stm32f37x_can.c ****   /* Release FIFO0 */
 793:../stdperiph/source/stm32f37x_can.c ****   if (FIFONumber == CAN_FIFO0)
 794:../stdperiph/source/stm32f37x_can.c ****   {
 795:../stdperiph/source/stm32f37x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 796:../stdperiph/source/stm32f37x_can.c ****   }
 797:../stdperiph/source/stm32f37x_can.c ****   /* Release FIFO1 */
 798:../stdperiph/source/stm32f37x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 799:../stdperiph/source/stm32f37x_can.c ****   {
 800:../stdperiph/source/stm32f37x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 801:../stdperiph/source/stm32f37x_can.c ****   }
 802:../stdperiph/source/stm32f37x_can.c **** }
 803:../stdperiph/source/stm32f37x_can.c **** 
 804:../stdperiph/source/stm32f37x_can.c **** /**
 805:../stdperiph/source/stm32f37x_can.c ****   * @brief  Returns the number of pending received messages.
 806:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 807:../stdperiph/source/stm32f37x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 808:../stdperiph/source/stm32f37x_can.c ****   * @retval NbMessage : which is the number of pending message.
 809:../stdperiph/source/stm32f37x_can.c ****   */
 810:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 811:../stdperiph/source/stm32f37x_can.c **** {
 812:../stdperiph/source/stm32f37x_can.c ****   uint8_t message_pending=0;
 813:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 814:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 815:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 816:../stdperiph/source/stm32f37x_can.c ****   if (FIFONumber == CAN_FIFO0)
 817:../stdperiph/source/stm32f37x_can.c ****   {
 818:../stdperiph/source/stm32f37x_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 819:../stdperiph/source/stm32f37x_can.c ****   }
 820:../stdperiph/source/stm32f37x_can.c ****   else if (FIFONumber == CAN_FIFO1)
 821:../stdperiph/source/stm32f37x_can.c ****   {
 822:../stdperiph/source/stm32f37x_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 823:../stdperiph/source/stm32f37x_can.c ****   }
 824:../stdperiph/source/stm32f37x_can.c ****   else
 825:../stdperiph/source/stm32f37x_can.c ****   {
 826:../stdperiph/source/stm32f37x_can.c ****     message_pending = 0;
 827:../stdperiph/source/stm32f37x_can.c ****   }
 828:../stdperiph/source/stm32f37x_can.c ****   return message_pending;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 16


 829:../stdperiph/source/stm32f37x_can.c **** }
 830:../stdperiph/source/stm32f37x_can.c **** /**
 831:../stdperiph/source/stm32f37x_can.c ****   * @}
 832:../stdperiph/source/stm32f37x_can.c ****   */
 833:../stdperiph/source/stm32f37x_can.c **** 
 834:../stdperiph/source/stm32f37x_can.c **** 
 835:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 836:../stdperiph/source/stm32f37x_can.c ****  *  @brief    CAN Operation modes functions 
 837:../stdperiph/source/stm32f37x_can.c ****  *
 838:../stdperiph/source/stm32f37x_can.c **** @verbatim    
 839:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================
 840:../stdperiph/source/stm32f37x_can.c ****           ##### CAN Operation modes functions  ##### 
 841:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================  
 842:../stdperiph/source/stm32f37x_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
 843:../stdperiph/source/stm32f37x_can.c ****          (#) sleep mode
 844:../stdperiph/source/stm32f37x_can.c ****          (#) normal mode 
 845:../stdperiph/source/stm32f37x_can.c ****          (#) initialization mode
 846:../stdperiph/source/stm32f37x_can.c **** 
 847:../stdperiph/source/stm32f37x_can.c **** @endverbatim
 848:../stdperiph/source/stm32f37x_can.c ****   * @{
 849:../stdperiph/source/stm32f37x_can.c ****   */
 850:../stdperiph/source/stm32f37x_can.c ****   
 851:../stdperiph/source/stm32f37x_can.c ****   
 852:../stdperiph/source/stm32f37x_can.c **** /**
 853:../stdperiph/source/stm32f37x_can.c ****   * @brief  Selects the CAN Operation mode.
 854:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
 855:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be one of @ref CAN_OperatingMode_status.
 856:../stdperiph/source/stm32f37x_can.c ****   * @retval status of the requested mode which can be 
 857:../stdperiph/source/stm32f37x_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
 858:../stdperiph/source/stm32f37x_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
 859:../stdperiph/source/stm32f37x_can.c ****   */
 860:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 861:../stdperiph/source/stm32f37x_can.c **** {
 862:../stdperiph/source/stm32f37x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 863:../stdperiph/source/stm32f37x_can.c ****   
 864:../stdperiph/source/stm32f37x_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 865:../stdperiph/source/stm32f37x_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 866:../stdperiph/source/stm32f37x_can.c **** 
 867:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 868:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 869:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 870:../stdperiph/source/stm32f37x_can.c **** 
 871:../stdperiph/source/stm32f37x_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 872:../stdperiph/source/stm32f37x_can.c ****   {
 873:../stdperiph/source/stm32f37x_can.c ****     /* Request initialisation */
 874:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 875:../stdperiph/source/stm32f37x_can.c **** 
 876:../stdperiph/source/stm32f37x_can.c ****     /* Wait the acknowledge */
 877:../stdperiph/source/stm32f37x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 878:../stdperiph/source/stm32f37x_can.c ****     {
 879:../stdperiph/source/stm32f37x_can.c ****       timeout--;
 880:../stdperiph/source/stm32f37x_can.c ****     }
 881:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 882:../stdperiph/source/stm32f37x_can.c ****     {
 883:../stdperiph/source/stm32f37x_can.c ****       status = CAN_ModeStatus_Failed;
 884:../stdperiph/source/stm32f37x_can.c ****     }
 885:../stdperiph/source/stm32f37x_can.c ****     else
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 17


 886:../stdperiph/source/stm32f37x_can.c ****     {
 887:../stdperiph/source/stm32f37x_can.c ****       status = CAN_ModeStatus_Success;
 888:../stdperiph/source/stm32f37x_can.c ****     }
 889:../stdperiph/source/stm32f37x_can.c ****   }
 890:../stdperiph/source/stm32f37x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 891:../stdperiph/source/stm32f37x_can.c ****   {
 892:../stdperiph/source/stm32f37x_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 893:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 894:../stdperiph/source/stm32f37x_can.c **** 
 895:../stdperiph/source/stm32f37x_can.c ****     /* Wait the acknowledge */
 896:../stdperiph/source/stm32f37x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 897:../stdperiph/source/stm32f37x_can.c ****     {
 898:../stdperiph/source/stm32f37x_can.c ****       timeout--;
 899:../stdperiph/source/stm32f37x_can.c ****     }
 900:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 901:../stdperiph/source/stm32f37x_can.c ****     {
 902:../stdperiph/source/stm32f37x_can.c ****       status = CAN_ModeStatus_Failed;
 903:../stdperiph/source/stm32f37x_can.c ****     }
 904:../stdperiph/source/stm32f37x_can.c ****     else
 905:../stdperiph/source/stm32f37x_can.c ****     {
 906:../stdperiph/source/stm32f37x_can.c ****       status = CAN_ModeStatus_Success;
 907:../stdperiph/source/stm32f37x_can.c ****     }
 908:../stdperiph/source/stm32f37x_can.c ****   }
 909:../stdperiph/source/stm32f37x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 910:../stdperiph/source/stm32f37x_can.c ****   {
 911:../stdperiph/source/stm32f37x_can.c ****     /* Request Sleep mode */
 912:../stdperiph/source/stm32f37x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 913:../stdperiph/source/stm32f37x_can.c **** 
 914:../stdperiph/source/stm32f37x_can.c ****     /* Wait the acknowledge */
 915:../stdperiph/source/stm32f37x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 916:../stdperiph/source/stm32f37x_can.c ****     {
 917:../stdperiph/source/stm32f37x_can.c ****       timeout--;
 918:../stdperiph/source/stm32f37x_can.c ****     }
 919:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 920:../stdperiph/source/stm32f37x_can.c ****     {
 921:../stdperiph/source/stm32f37x_can.c ****       status = CAN_ModeStatus_Failed;
 922:../stdperiph/source/stm32f37x_can.c ****     }
 923:../stdperiph/source/stm32f37x_can.c ****     else
 924:../stdperiph/source/stm32f37x_can.c ****     {
 925:../stdperiph/source/stm32f37x_can.c ****       status = CAN_ModeStatus_Success;
 926:../stdperiph/source/stm32f37x_can.c ****     }
 927:../stdperiph/source/stm32f37x_can.c ****   }
 928:../stdperiph/source/stm32f37x_can.c ****   else
 929:../stdperiph/source/stm32f37x_can.c ****   {
 930:../stdperiph/source/stm32f37x_can.c ****     status = CAN_ModeStatus_Failed;
 931:../stdperiph/source/stm32f37x_can.c ****   }
 932:../stdperiph/source/stm32f37x_can.c **** 
 933:../stdperiph/source/stm32f37x_can.c ****   return  (uint8_t) status;
 934:../stdperiph/source/stm32f37x_can.c **** }
 935:../stdperiph/source/stm32f37x_can.c **** 
 936:../stdperiph/source/stm32f37x_can.c **** /**
 937:../stdperiph/source/stm32f37x_can.c ****   * @brief  Enters the Sleep (low power) mode.
 938:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 939:../stdperiph/source/stm32f37x_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
 940:../stdperiph/source/stm32f37x_can.c ****   */
 941:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 942:../stdperiph/source/stm32f37x_can.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 18


 943:../stdperiph/source/stm32f37x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 944:../stdperiph/source/stm32f37x_can.c ****   
 945:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 946:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 947:../stdperiph/source/stm32f37x_can.c ****     
 948:../stdperiph/source/stm32f37x_can.c ****   /* Request Sleep mode */
 949:../stdperiph/source/stm32f37x_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 950:../stdperiph/source/stm32f37x_can.c ****    
 951:../stdperiph/source/stm32f37x_can.c ****   /* Sleep mode status */
 952:../stdperiph/source/stm32f37x_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 953:../stdperiph/source/stm32f37x_can.c ****   {
 954:../stdperiph/source/stm32f37x_can.c ****     /* Sleep mode not entered */
 955:../stdperiph/source/stm32f37x_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 956:../stdperiph/source/stm32f37x_can.c ****   }
 957:../stdperiph/source/stm32f37x_can.c ****   /* return sleep mode status */
 958:../stdperiph/source/stm32f37x_can.c ****    return (uint8_t)sleepstatus;
 959:../stdperiph/source/stm32f37x_can.c **** }
 960:../stdperiph/source/stm32f37x_can.c **** 
 961:../stdperiph/source/stm32f37x_can.c **** /**
 962:../stdperiph/source/stm32f37x_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
 963:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
 964:../stdperiph/source/stm32f37x_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
 965:../stdperiph/source/stm32f37x_can.c ****   */
 966:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 967:../stdperiph/source/stm32f37x_can.c **** {
 968:../stdperiph/source/stm32f37x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 969:../stdperiph/source/stm32f37x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 970:../stdperiph/source/stm32f37x_can.c ****   
 971:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 972:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 973:../stdperiph/source/stm32f37x_can.c ****     
 974:../stdperiph/source/stm32f37x_can.c ****   /* Wake up request */
 975:../stdperiph/source/stm32f37x_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 976:../stdperiph/source/stm32f37x_can.c ****     
 977:../stdperiph/source/stm32f37x_can.c ****   /* Sleep mode status */
 978:../stdperiph/source/stm32f37x_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 979:../stdperiph/source/stm32f37x_can.c ****   {
 980:../stdperiph/source/stm32f37x_can.c ****    wait_slak--;
 981:../stdperiph/source/stm32f37x_can.c ****   }
 982:../stdperiph/source/stm32f37x_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 983:../stdperiph/source/stm32f37x_can.c ****   {
 984:../stdperiph/source/stm32f37x_can.c ****    /* wake up done : Sleep mode exited */
 985:../stdperiph/source/stm32f37x_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 986:../stdperiph/source/stm32f37x_can.c ****   }
 987:../stdperiph/source/stm32f37x_can.c ****   /* return wakeup status */
 988:../stdperiph/source/stm32f37x_can.c ****   return (uint8_t)wakeupstatus;
 989:../stdperiph/source/stm32f37x_can.c **** }
 990:../stdperiph/source/stm32f37x_can.c **** /**
 991:../stdperiph/source/stm32f37x_can.c ****   * @}
 992:../stdperiph/source/stm32f37x_can.c ****   */
 993:../stdperiph/source/stm32f37x_can.c **** 
 994:../stdperiph/source/stm32f37x_can.c **** 
 995:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
 996:../stdperiph/source/stm32f37x_can.c ****  *  @brief    CAN Bus Error management functions 
 997:../stdperiph/source/stm32f37x_can.c ****  *
 998:../stdperiph/source/stm32f37x_can.c **** @verbatim    
 999:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 19


1000:../stdperiph/source/stm32f37x_can.c ****           ##### CAN Bus Error management functions  ##### 
1001:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================  
1002:../stdperiph/source/stm32f37x_can.c ****     [..] This section provides functions allowing to 
1003:../stdperiph/source/stm32f37x_can.c ****          (#) Return the CANx's last error code (LEC)
1004:../stdperiph/source/stm32f37x_can.c ****          (#) Return the CANx Receive Error Counter (REC)
1005:../stdperiph/source/stm32f37x_can.c ****          (#) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1006:../stdperiph/source/stm32f37x_can.c ****     [..] 
1007:../stdperiph/source/stm32f37x_can.c ****          (@) If TEC is greater than 255, The CAN is in bus-off state.
1008:../stdperiph/source/stm32f37x_can.c ****          (@) If REC or TEC are greater than 96, an Error warning flag occurs.
1009:../stdperiph/source/stm32f37x_can.c ****          (@) If REC or TEC are greater than 127, an Error Passive Flag occurs.
1010:../stdperiph/source/stm32f37x_can.c **** 
1011:../stdperiph/source/stm32f37x_can.c **** @endverbatim
1012:../stdperiph/source/stm32f37x_can.c ****   * @{
1013:../stdperiph/source/stm32f37x_can.c ****   */
1014:../stdperiph/source/stm32f37x_can.c ****   
1015:../stdperiph/source/stm32f37x_can.c **** /**
1016:../stdperiph/source/stm32f37x_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1017:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 to select the CAN1 peripheral.
1018:../stdperiph/source/stm32f37x_can.c ****   * @retval Error code: 
1019:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_NoErr: No Error  
1020:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_StuffErr: Stuff Error
1021:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_FormErr: Form Error
1022:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_ACKErr : Acknowledgment Error
1023:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_BitRecessiveErr: Bit Recessive Error
1024:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_BitDominantErr: Bit Dominant Error
1025:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_CRCErr: CRC Error
1026:../stdperiph/source/stm32f37x_can.c ****   *          - CAN_ErrorCode_SoftwareSetErr: Software Set Error  
1027:../stdperiph/source/stm32f37x_can.c ****   */
1028:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1029:../stdperiph/source/stm32f37x_can.c **** {
1030:../stdperiph/source/stm32f37x_can.c ****   uint8_t errorcode=0;
1031:../stdperiph/source/stm32f37x_can.c ****   
1032:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1033:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1034:../stdperiph/source/stm32f37x_can.c ****   
1035:../stdperiph/source/stm32f37x_can.c ****   /* Get the error code*/
1036:../stdperiph/source/stm32f37x_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1037:../stdperiph/source/stm32f37x_can.c ****   
1038:../stdperiph/source/stm32f37x_can.c ****   /* Return the error code*/
1039:../stdperiph/source/stm32f37x_can.c ****   return errorcode;
1040:../stdperiph/source/stm32f37x_can.c **** }
1041:../stdperiph/source/stm32f37x_can.c **** 
1042:../stdperiph/source/stm32f37x_can.c **** /**
1043:../stdperiph/source/stm32f37x_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1044:../stdperiph/source/stm32f37x_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1045:../stdperiph/source/stm32f37x_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1046:../stdperiph/source/stm32f37x_can.c ****   *         standard. After every successful reception, the counter is 
1047:../stdperiph/source/stm32f37x_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1048:../stdperiph/source/stm32f37x_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1049:../stdperiph/source/stm32f37x_can.c ****   *         error passive state.  
1050:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
1051:../stdperiph/source/stm32f37x_can.c ****   * @retval CAN Receive Error Counter. 
1052:../stdperiph/source/stm32f37x_can.c ****   */
1053:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1054:../stdperiph/source/stm32f37x_can.c **** {
1055:../stdperiph/source/stm32f37x_can.c ****   uint8_t counter=0;
1056:../stdperiph/source/stm32f37x_can.c ****   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 20


1057:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1058:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1059:../stdperiph/source/stm32f37x_can.c ****   
1060:../stdperiph/source/stm32f37x_can.c ****   /* Get the Receive Error Counter*/
1061:../stdperiph/source/stm32f37x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1062:../stdperiph/source/stm32f37x_can.c ****   
1063:../stdperiph/source/stm32f37x_can.c ****   /* Return the Receive Error Counter*/
1064:../stdperiph/source/stm32f37x_can.c ****   return counter;
1065:../stdperiph/source/stm32f37x_can.c **** }
1066:../stdperiph/source/stm32f37x_can.c **** 
1067:../stdperiph/source/stm32f37x_can.c **** 
1068:../stdperiph/source/stm32f37x_can.c **** /**
1069:../stdperiph/source/stm32f37x_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1070:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1071:../stdperiph/source/stm32f37x_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1072:../stdperiph/source/stm32f37x_can.c ****   */
1073:../stdperiph/source/stm32f37x_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1074:../stdperiph/source/stm32f37x_can.c **** {
1075:../stdperiph/source/stm32f37x_can.c ****   uint8_t counter=0;
1076:../stdperiph/source/stm32f37x_can.c ****   
1077:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1078:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1079:../stdperiph/source/stm32f37x_can.c ****   
1080:../stdperiph/source/stm32f37x_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1081:../stdperiph/source/stm32f37x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1082:../stdperiph/source/stm32f37x_can.c ****   
1083:../stdperiph/source/stm32f37x_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1084:../stdperiph/source/stm32f37x_can.c ****   return counter;
1085:../stdperiph/source/stm32f37x_can.c **** }
1086:../stdperiph/source/stm32f37x_can.c **** /**
1087:../stdperiph/source/stm32f37x_can.c ****   * @}
1088:../stdperiph/source/stm32f37x_can.c ****   */
1089:../stdperiph/source/stm32f37x_can.c **** 
1090:../stdperiph/source/stm32f37x_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1091:../stdperiph/source/stm32f37x_can.c ****  *  @brief   Interrupts and flags management functions
1092:../stdperiph/source/stm32f37x_can.c ****  *
1093:../stdperiph/source/stm32f37x_can.c **** @verbatim   
1094:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================
1095:../stdperiph/source/stm32f37x_can.c ****           ##### Interrupts and flags management functions #####
1096:../stdperiph/source/stm32f37x_can.c ****  ===============================================================================  
1097:../stdperiph/source/stm32f37x_can.c **** 
1098:../stdperiph/source/stm32f37x_can.c ****     [..] This section provides functions allowing to configure the CAN Interrupts and 
1099:../stdperiph/source/stm32f37x_can.c ****          to get the status and clear flags and Interrupts pending bits.
1100:../stdperiph/source/stm32f37x_can.c ****          
1101:../stdperiph/source/stm32f37x_can.c ****          The CAN provides 14 Interrupts sources and 15 Flags:
1102:../stdperiph/source/stm32f37x_can.c **** 
1103:../stdperiph/source/stm32f37x_can.c ****   *** Flags ***
1104:../stdperiph/source/stm32f37x_can.c ****   =============
1105:../stdperiph/source/stm32f37x_can.c ****     [..]The 15 flags can be divided on 4 groups: 
1106:../stdperiph/source/stm32f37x_can.c **** 
1107:../stdperiph/source/stm32f37x_can.c ****         (+)Transmit Flags
1108:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_RQCP0, 
1109:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_RQCP1, 
1110:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1111:../stdperiph/source/stm32f37x_can.c ****                 Set when when the last request (transmit or abort) has 
1112:../stdperiph/source/stm32f37x_can.c ****                 been performed. 
1113:../stdperiph/source/stm32f37x_can.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 21


1114:../stdperiph/source/stm32f37x_can.c ****         (+)Receive Flags
1115:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_FMP0,
1116:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1117:../stdperiph/source/stm32f37x_can.c ****                 set to signal that messages are pending in the receive 
1118:../stdperiph/source/stm32f37x_can.c ****                 FIFO.
1119:../stdperiph/source/stm32f37x_can.c ****                 These Flags are cleared only by hardware. 
1120:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_FF0,
1121:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1122:../stdperiph/source/stm32f37x_can.c ****                 set when three messages are stored in the selected 
1123:../stdperiph/source/stm32f37x_can.c ****                 FIFO.
1124:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_FOV0
1125:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1126:../stdperiph/source/stm32f37x_can.c ****                 set when a new message has been received and passed 
1127:../stdperiph/source/stm32f37x_can.c ****                 the filter while the FIFO was full.         
1128:../stdperiph/source/stm32f37x_can.c **** 
1129:../stdperiph/source/stm32f37x_can.c ****         (+)Operating Mode Flags
1130:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_WKU    : Wake up Flag
1131:../stdperiph/source/stm32f37x_can.c ****                 set to signal that a SOF bit has been detected while 
1132:../stdperiph/source/stm32f37x_can.c ****                 the CAN hardware was in Sleep mode. 
1133:../stdperiph/source/stm32f37x_can.c ****                 
1134:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1135:../stdperiph/source/stm32f37x_can.c ****                 Set to signal that the CAN has entered Sleep Mode. 
1136:../stdperiph/source/stm32f37x_can.c ****     
1137:../stdperiph/source/stm32f37x_can.c ****         (+)Error Flags
1138:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_EWG    : Error Warning Flag
1139:../stdperiph/source/stm32f37x_can.c ****                 Set when the warning limit has been reached (Receive 
1140:../stdperiph/source/stm32f37x_can.c ****                 Error Counter or Transmit Error Counter greater than 96). 
1141:../stdperiph/source/stm32f37x_can.c ****                 This Flag is cleared only by hardware.
1142:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_EPV    : Error Passive Flag
1143:../stdperiph/source/stm32f37x_can.c ****                 Set when the Error Passive limit has been reached 
1144:../stdperiph/source/stm32f37x_can.c ****                 (Receive Error Counter or Transmit Error Counter 
1145:../stdperiph/source/stm32f37x_can.c ****                 greater than 127).
1146:../stdperiph/source/stm32f37x_can.c ****                 This Flag is cleared only by hardware.
1147:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_BOF    : Bus-Off Flag
1148:../stdperiph/source/stm32f37x_can.c ****                 set when CAN enters the bus-off state. The bus-off 
1149:../stdperiph/source/stm32f37x_can.c ****                 state is entered on TEC overflow, greater than 255.
1150:../stdperiph/source/stm32f37x_can.c ****                 This Flag is cleared only by hardware.
1151:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_FLAG_LEC    : Last error code Flag
1152:../stdperiph/source/stm32f37x_can.c ****                 set If a message has been transferred (reception or
1153:../stdperiph/source/stm32f37x_can.c ****                 transmission) with error, and the error code is hold.              
1154:../stdperiph/source/stm32f37x_can.c ****                 
1155:../stdperiph/source/stm32f37x_can.c ****   *** Interrupts ***
1156:../stdperiph/source/stm32f37x_can.c ****   ==================
1157:../stdperiph/source/stm32f37x_can.c ****     [..]The 14 interrupts can be divided on 4 groups: 
1158:../stdperiph/source/stm32f37x_can.c ****   
1159:../stdperiph/source/stm32f37x_can.c ****         (+)Transmit interrupt
1160:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1161:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending when 
1162:../stdperiph/source/stm32f37x_can.c ****                 no transmit request are pending for Tx mailboxes.      
1163:../stdperiph/source/stm32f37x_can.c **** 
1164:../stdperiph/source/stm32f37x_can.c ****         (+)Receive Interrupts
1165:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_FMP0,
1166:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_FMP1  :  FIFO 0 and FIFO1 message pending Interrupts
1167:../stdperiph/source/stm32f37x_can.c ****                 if enabled, these interrupt sources are pending when 
1168:../stdperiph/source/stm32f37x_can.c ****                 messages are pending in the receive FIFO.
1169:../stdperiph/source/stm32f37x_can.c ****                 The corresponding interrupt pending bits are cleared 
1170:../stdperiph/source/stm32f37x_can.c ****                 only by hardware.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 22


1171:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_FF0,              
1172:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_FF1   :  FIFO 0 and FIFO1 full Interrupts
1173:../stdperiph/source/stm32f37x_can.c ****                 if enabled, these interrupt sources are pending when
1174:../stdperiph/source/stm32f37x_can.c ****                 three messages are stored in the selected FIFO.
1175:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_FOV0,        
1176:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1177:../stdperiph/source/stm32f37x_can.c ****                 if enabled, these interrupt sources are pending when
1178:../stdperiph/source/stm32f37x_can.c ****                 a new message has been received and passed the filter
1179:../stdperiph/source/stm32f37x_can.c ****                 while the FIFO was full.
1180:../stdperiph/source/stm32f37x_can.c **** 
1181:../stdperiph/source/stm32f37x_can.c ****         (+)Operating Mode Interrupts
1182:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_WKU     :  Wake-up Interrupt
1183:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending when 
1184:../stdperiph/source/stm32f37x_can.c ****                 a SOF bit has been detected while the CAN hardware was 
1185:../stdperiph/source/stm32f37x_can.c ****                 in Sleep mode.
1186:../stdperiph/source/stm32f37x_can.c ****                                   
1187:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1188:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending when 
1189:../stdperiph/source/stm32f37x_can.c ****                 the CAN has entered Sleep Mode.       
1190:../stdperiph/source/stm32f37x_can.c **** 
1191:../stdperiph/source/stm32f37x_can.c ****         (+)Error Interrupts 
1192:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_EWG     :  Error warning Interrupt 
1193:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending when
1194:../stdperiph/source/stm32f37x_can.c ****                 the warning limit has been reached (Receive Error 
1195:../stdperiph/source/stm32f37x_can.c ****                 Counter or Transmit Error Counter=96). 
1196:../stdperiph/source/stm32f37x_can.c ****                 
1197:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_EPV     :  Error passive Interrupt        
1198:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending when
1199:../stdperiph/source/stm32f37x_can.c ****                 the Error Passive limit has been reached (Receive 
1200:../stdperiph/source/stm32f37x_can.c ****                 Error Counter or Transmit Error Counter>127).
1201:../stdperiph/source/stm32f37x_can.c ****                 
1202:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_BOF     :  Bus-off Interrupt
1203:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending when
1204:../stdperiph/source/stm32f37x_can.c ****                 CAN enters the bus-off state. The bus-off state is 
1205:../stdperiph/source/stm32f37x_can.c ****                 entered on TEC overflow, greater than 255.
1206:../stdperiph/source/stm32f37x_can.c ****                 This Flag is cleared only by hardware.
1207:../stdperiph/source/stm32f37x_can.c ****                 
1208:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_LEC     :  Last error code Interrupt        
1209:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending  when
1210:../stdperiph/source/stm32f37x_can.c ****                 a message has been transferred (reception or
1211:../stdperiph/source/stm32f37x_can.c ****                 transmission) with error, and the error code is hold.
1212:../stdperiph/source/stm32f37x_can.c ****                 
1213:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_IT_ERR     :  Error Interrupt
1214:../stdperiph/source/stm32f37x_can.c ****                 if enabled, this interrupt source is pending when 
1215:../stdperiph/source/stm32f37x_can.c ****                 an error condition is pending.      
1216:../stdperiph/source/stm32f37x_can.c **** 
1217:../stdperiph/source/stm32f37x_can.c ****   *** Managing the CAN controller events ***
1218:../stdperiph/source/stm32f37x_can.c ****   ==========================================
1219:../stdperiph/source/stm32f37x_can.c ****     [..]The user should identify which mode will be used in his application to manage 
1220:../stdperiph/source/stm32f37x_can.c ****         the CAN controller events: Polling mode or Interrupt mode.
1221:../stdperiph/source/stm32f37x_can.c ****         (+)In the Polling Mode it is advised to use the following functions:
1222:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_GetFlagStatus() : to check if flags events occur. 
1223:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_ClearFlag()     : to clear the flags events.
1224:../stdperiph/source/stm32f37x_can.c **** 
1225:../stdperiph/source/stm32f37x_can.c ****         (+)In the Interrupt Mode it is advised to use the following functions:
1226:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_ITConfig()       : to enable or disable the interrupt source.
1227:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_GetITStatus()    : to check if Interrupt occurs.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 23


1228:../stdperiph/source/stm32f37x_can.c ****            (##) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit (corresponding Flag).
1229:../stdperiph/source/stm32f37x_can.c ****              -@@-This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1230:../stdperiph/source/stm32f37x_can.c ****                  pending bits since there are cleared only by hardware. 
1231:../stdperiph/source/stm32f37x_can.c ****   
1232:../stdperiph/source/stm32f37x_can.c **** @endverbatim
1233:../stdperiph/source/stm32f37x_can.c ****   * @{
1234:../stdperiph/source/stm32f37x_can.c ****   */ 
1235:../stdperiph/source/stm32f37x_can.c **** /**
1236:../stdperiph/source/stm32f37x_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1237:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1238:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1239:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be: 
1240:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1241:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1242:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1243:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1244:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1245:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1246:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1247:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1248:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1249:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1250:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1251:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1252:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1253:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1254:../stdperiph/source/stm32f37x_can.c ****   * @param  NewState: new state of the CAN interrupts.
1255:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1256:../stdperiph/source/stm32f37x_can.c ****   * @retval None
1257:../stdperiph/source/stm32f37x_can.c ****   */
1258:../stdperiph/source/stm32f37x_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1259:../stdperiph/source/stm32f37x_can.c **** {
1260:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1261:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1262:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1263:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1264:../stdperiph/source/stm32f37x_can.c **** 
1265:../stdperiph/source/stm32f37x_can.c ****   if (NewState != DISABLE)
1266:../stdperiph/source/stm32f37x_can.c ****   {
1267:../stdperiph/source/stm32f37x_can.c ****     /* Enable the selected CANx interrupt */
1268:../stdperiph/source/stm32f37x_can.c ****     CANx->IER |= CAN_IT;
1269:../stdperiph/source/stm32f37x_can.c ****   }
1270:../stdperiph/source/stm32f37x_can.c ****   else
1271:../stdperiph/source/stm32f37x_can.c ****   {
1272:../stdperiph/source/stm32f37x_can.c ****     /* Disable the selected CANx interrupt */
1273:../stdperiph/source/stm32f37x_can.c ****     CANx->IER &= ~CAN_IT;
1274:../stdperiph/source/stm32f37x_can.c ****   }
1275:../stdperiph/source/stm32f37x_can.c **** }
1276:../stdperiph/source/stm32f37x_can.c **** /**
1277:../stdperiph/source/stm32f37x_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1278:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1279:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1280:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be one of the following values:
1281:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1282:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1283:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1284:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 24


1285:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1286:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1287:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1288:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1289:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1290:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1291:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1292:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1293:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1294:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1295:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag      
1296:../stdperiph/source/stm32f37x_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1297:../stdperiph/source/stm32f37x_can.c ****   */
1298:../stdperiph/source/stm32f37x_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1299:../stdperiph/source/stm32f37x_can.c **** {
1300:../stdperiph/source/stm32f37x_can.c ****   FlagStatus bitstatus = RESET;
1301:../stdperiph/source/stm32f37x_can.c ****   
1302:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1303:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1304:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1305:../stdperiph/source/stm32f37x_can.c ****   
1306:../stdperiph/source/stm32f37x_can.c **** 
1307:../stdperiph/source/stm32f37x_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1308:../stdperiph/source/stm32f37x_can.c ****   { 
1309:../stdperiph/source/stm32f37x_can.c ****     /* Check the status of the specified CAN flag */
1310:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1311:../stdperiph/source/stm32f37x_can.c ****     { 
1312:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is set */
1313:../stdperiph/source/stm32f37x_can.c ****       bitstatus = SET;
1314:../stdperiph/source/stm32f37x_can.c ****     }
1315:../stdperiph/source/stm32f37x_can.c ****     else
1316:../stdperiph/source/stm32f37x_can.c ****     { 
1317:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is reset */
1318:../stdperiph/source/stm32f37x_can.c ****       bitstatus = RESET;
1319:../stdperiph/source/stm32f37x_can.c ****     }
1320:../stdperiph/source/stm32f37x_can.c ****   }
1321:../stdperiph/source/stm32f37x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1322:../stdperiph/source/stm32f37x_can.c ****   { 
1323:../stdperiph/source/stm32f37x_can.c ****     /* Check the status of the specified CAN flag */
1324:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1325:../stdperiph/source/stm32f37x_can.c ****     { 
1326:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is set */
1327:../stdperiph/source/stm32f37x_can.c ****       bitstatus = SET;
1328:../stdperiph/source/stm32f37x_can.c ****     }
1329:../stdperiph/source/stm32f37x_can.c ****     else
1330:../stdperiph/source/stm32f37x_can.c ****     { 
1331:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is reset */
1332:../stdperiph/source/stm32f37x_can.c ****       bitstatus = RESET;
1333:../stdperiph/source/stm32f37x_can.c ****     }
1334:../stdperiph/source/stm32f37x_can.c ****   }
1335:../stdperiph/source/stm32f37x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1336:../stdperiph/source/stm32f37x_can.c ****   { 
1337:../stdperiph/source/stm32f37x_can.c ****     /* Check the status of the specified CAN flag */
1338:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1339:../stdperiph/source/stm32f37x_can.c ****     { 
1340:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is set */
1341:../stdperiph/source/stm32f37x_can.c ****       bitstatus = SET;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 25


1342:../stdperiph/source/stm32f37x_can.c ****     }
1343:../stdperiph/source/stm32f37x_can.c ****     else
1344:../stdperiph/source/stm32f37x_can.c ****     { 
1345:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is reset */
1346:../stdperiph/source/stm32f37x_can.c ****       bitstatus = RESET;
1347:../stdperiph/source/stm32f37x_can.c ****     }
1348:../stdperiph/source/stm32f37x_can.c ****   }
1349:../stdperiph/source/stm32f37x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1350:../stdperiph/source/stm32f37x_can.c ****   { 
1351:../stdperiph/source/stm32f37x_can.c ****     /* Check the status of the specified CAN flag */
1352:../stdperiph/source/stm32f37x_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1353:../stdperiph/source/stm32f37x_can.c ****     { 
1354:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is set */
1355:../stdperiph/source/stm32f37x_can.c ****       bitstatus = SET;
1356:../stdperiph/source/stm32f37x_can.c ****     }
1357:../stdperiph/source/stm32f37x_can.c ****     else
1358:../stdperiph/source/stm32f37x_can.c ****     { 
1359:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is reset */
1360:../stdperiph/source/stm32f37x_can.c ****       bitstatus = RESET;
1361:../stdperiph/source/stm32f37x_can.c ****     }
1362:../stdperiph/source/stm32f37x_can.c ****   }
1363:../stdperiph/source/stm32f37x_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1364:../stdperiph/source/stm32f37x_can.c ****   { 
1365:../stdperiph/source/stm32f37x_can.c ****     /* Check the status of the specified CAN flag */
1366:../stdperiph/source/stm32f37x_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1367:../stdperiph/source/stm32f37x_can.c ****     { 
1368:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is set */
1369:../stdperiph/source/stm32f37x_can.c ****       bitstatus = SET;
1370:../stdperiph/source/stm32f37x_can.c ****     }
1371:../stdperiph/source/stm32f37x_can.c ****     else
1372:../stdperiph/source/stm32f37x_can.c ****     { 
1373:../stdperiph/source/stm32f37x_can.c ****       /* CAN_FLAG is reset */
1374:../stdperiph/source/stm32f37x_can.c ****       bitstatus = RESET;
1375:../stdperiph/source/stm32f37x_can.c ****     }
1376:../stdperiph/source/stm32f37x_can.c ****   }
1377:../stdperiph/source/stm32f37x_can.c ****   /* Return the CAN_FLAG status */
1378:../stdperiph/source/stm32f37x_can.c ****   return  bitstatus;
1379:../stdperiph/source/stm32f37x_can.c **** }
1380:../stdperiph/source/stm32f37x_can.c **** 
1381:../stdperiph/source/stm32f37x_can.c **** /**
1382:../stdperiph/source/stm32f37x_can.c ****   * @brief  Clears the CAN's pending flags.
1383:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1384:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1385:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be one of the following values:
1386:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1387:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1388:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1389:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1390:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1391:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1392:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1393:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1394:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1395:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag        
1396:../stdperiph/source/stm32f37x_can.c ****   * @retval None
1397:../stdperiph/source/stm32f37x_can.c ****   */
1398:../stdperiph/source/stm32f37x_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 26


1399:../stdperiph/source/stm32f37x_can.c **** {
1400:../stdperiph/source/stm32f37x_can.c ****   uint32_t flagtmp=0;
1401:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1402:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1403:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1404:../stdperiph/source/stm32f37x_can.c ****   
1405:../stdperiph/source/stm32f37x_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1406:../stdperiph/source/stm32f37x_can.c ****   {
1407:../stdperiph/source/stm32f37x_can.c ****     /* Clear the selected CAN flags */
1408:../stdperiph/source/stm32f37x_can.c ****     CANx->ESR = (uint32_t)RESET;
1409:../stdperiph/source/stm32f37x_can.c ****   }
1410:../stdperiph/source/stm32f37x_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1411:../stdperiph/source/stm32f37x_can.c ****   {
1412:../stdperiph/source/stm32f37x_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1413:../stdperiph/source/stm32f37x_can.c **** 
1414:../stdperiph/source/stm32f37x_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1415:../stdperiph/source/stm32f37x_can.c ****     {
1416:../stdperiph/source/stm32f37x_can.c ****       /* Receive Flags */
1417:../stdperiph/source/stm32f37x_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1418:../stdperiph/source/stm32f37x_can.c ****     }
1419:../stdperiph/source/stm32f37x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1420:../stdperiph/source/stm32f37x_can.c ****     {
1421:../stdperiph/source/stm32f37x_can.c ****       /* Receive Flags */
1422:../stdperiph/source/stm32f37x_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1423:../stdperiph/source/stm32f37x_can.c ****     }
1424:../stdperiph/source/stm32f37x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1425:../stdperiph/source/stm32f37x_can.c ****     {
1426:../stdperiph/source/stm32f37x_can.c ****       /* Transmit Flags */
1427:../stdperiph/source/stm32f37x_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1428:../stdperiph/source/stm32f37x_can.c ****     }
1429:../stdperiph/source/stm32f37x_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1430:../stdperiph/source/stm32f37x_can.c ****     {
1431:../stdperiph/source/stm32f37x_can.c ****       /* Operating mode Flags */
1432:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1433:../stdperiph/source/stm32f37x_can.c ****     }
1434:../stdperiph/source/stm32f37x_can.c ****   }
1435:../stdperiph/source/stm32f37x_can.c **** }
1436:../stdperiph/source/stm32f37x_can.c **** 
1437:../stdperiph/source/stm32f37x_can.c **** /**
1438:../stdperiph/source/stm32f37x_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1439:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1440:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1441:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be one of the following values:
1442:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1443:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1444:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1445:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1446:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1447:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1448:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1449:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1450:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1451:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1452:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1453:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1454:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1455:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 27


1456:../stdperiph/source/stm32f37x_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1457:../stdperiph/source/stm32f37x_can.c ****   */
1458:../stdperiph/source/stm32f37x_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1459:../stdperiph/source/stm32f37x_can.c **** {
1460:../stdperiph/source/stm32f37x_can.c ****   ITStatus itstatus = RESET;
1461:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1462:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1463:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1464:../stdperiph/source/stm32f37x_can.c ****   
1465:../stdperiph/source/stm32f37x_can.c ****   /* check the interrupt enable bit */
1466:../stdperiph/source/stm32f37x_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1467:../stdperiph/source/stm32f37x_can.c ****  {
1468:../stdperiph/source/stm32f37x_can.c ****    /* in case the Interrupt is enabled, .... */
1469:../stdperiph/source/stm32f37x_can.c ****     switch (CAN_IT)
1470:../stdperiph/source/stm32f37x_can.c ****     {
1471:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_TME:
1472:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_TSR_RQCPx bits */
1473:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1474:../stdperiph/source/stm32f37x_can.c ****         break;
1475:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FMP0:
1476:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1477:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1478:../stdperiph/source/stm32f37x_can.c ****         break;
1479:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FF0:
1480:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1481:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1482:../stdperiph/source/stm32f37x_can.c ****         break;
1483:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FOV0:
1484:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1485:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1486:../stdperiph/source/stm32f37x_can.c ****         break;
1487:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FMP1:
1488:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1489:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1490:../stdperiph/source/stm32f37x_can.c ****         break;
1491:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FF1:
1492:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1493:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1494:../stdperiph/source/stm32f37x_can.c ****         break;
1495:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FOV1:
1496:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1497:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1498:../stdperiph/source/stm32f37x_can.c ****         break;
1499:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_WKU:
1500:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_MSR_WKUI bit */
1501:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1502:../stdperiph/source/stm32f37x_can.c ****         break;
1503:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_SLK:
1504:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_MSR_SLAKI bit */
1505:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1506:../stdperiph/source/stm32f37x_can.c ****         break;
1507:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_EWG:
1508:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_ESR_EWGF bit */
1509:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1510:../stdperiph/source/stm32f37x_can.c ****         break;
1511:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_EPV:
1512:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_ESR_EPVF bit */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 28


1513:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1514:../stdperiph/source/stm32f37x_can.c ****         break;
1515:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_BOF:
1516:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_ESR_BOFF bit */
1517:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1518:../stdperiph/source/stm32f37x_can.c ****         break;
1519:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_LEC:
1520:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_ESR_LEC bit */
1521:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1522:../stdperiph/source/stm32f37x_can.c ****         break;
1523:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_ERR:
1524:../stdperiph/source/stm32f37x_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1525:../stdperiph/source/stm32f37x_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1526:../stdperiph/source/stm32f37x_can.c ****         break;
1527:../stdperiph/source/stm32f37x_can.c ****       default:
1528:../stdperiph/source/stm32f37x_can.c ****         /* in case of error, return RESET */
1529:../stdperiph/source/stm32f37x_can.c ****         itstatus = RESET;
1530:../stdperiph/source/stm32f37x_can.c ****         break;
1531:../stdperiph/source/stm32f37x_can.c ****     }
1532:../stdperiph/source/stm32f37x_can.c ****   }
1533:../stdperiph/source/stm32f37x_can.c ****   else
1534:../stdperiph/source/stm32f37x_can.c ****   {
1535:../stdperiph/source/stm32f37x_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1536:../stdperiph/source/stm32f37x_can.c ****     itstatus  = RESET;
1537:../stdperiph/source/stm32f37x_can.c ****   }
1538:../stdperiph/source/stm32f37x_can.c ****   
1539:../stdperiph/source/stm32f37x_can.c ****   /* Return the CAN_IT status */
1540:../stdperiph/source/stm32f37x_can.c ****   return  itstatus;
1541:../stdperiph/source/stm32f37x_can.c **** }
1542:../stdperiph/source/stm32f37x_can.c **** 
1543:../stdperiph/source/stm32f37x_can.c **** /**
1544:../stdperiph/source/stm32f37x_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1545:../stdperiph/source/stm32f37x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1546:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1547:../stdperiph/source/stm32f37x_can.c ****   *          This parameter can be one of the following values:
1548:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1549:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1550:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1551:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1552:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1553:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1554:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1555:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1556:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1557:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1558:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1559:../stdperiph/source/stm32f37x_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt 
1560:../stdperiph/source/stm32f37x_can.c ****   * @retval None
1561:../stdperiph/source/stm32f37x_can.c ****   */
1562:../stdperiph/source/stm32f37x_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1563:../stdperiph/source/stm32f37x_can.c **** {
1564:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
1565:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1566:../stdperiph/source/stm32f37x_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1567:../stdperiph/source/stm32f37x_can.c **** 
1568:../stdperiph/source/stm32f37x_can.c ****   switch (CAN_IT)
1569:../stdperiph/source/stm32f37x_can.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 29


1570:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_TME:
1571:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1572:../stdperiph/source/stm32f37x_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1573:../stdperiph/source/stm32f37x_can.c ****       break;
1574:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FF0:
1575:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1576:../stdperiph/source/stm32f37x_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1577:../stdperiph/source/stm32f37x_can.c ****       break;
1578:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FOV0:
1579:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1580:../stdperiph/source/stm32f37x_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1581:../stdperiph/source/stm32f37x_can.c ****       break;
1582:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FF1:
1583:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1584:../stdperiph/source/stm32f37x_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1585:../stdperiph/source/stm32f37x_can.c ****       break;
1586:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FOV1:
1587:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1588:../stdperiph/source/stm32f37x_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1589:../stdperiph/source/stm32f37x_can.c ****       break;
1590:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_WKU:
1591:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1592:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1593:../stdperiph/source/stm32f37x_can.c ****       break;
1594:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_SLK:
1595:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1596:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1597:../stdperiph/source/stm32f37x_can.c ****       break;
1598:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_EWG:
1599:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1600:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1601:../stdperiph/source/stm32f37x_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1602:../stdperiph/source/stm32f37x_can.c ****       break;
1603:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_EPV:
1604:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1605:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1606:../stdperiph/source/stm32f37x_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1607:../stdperiph/source/stm32f37x_can.c ****       break;
1608:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_BOF:
1609:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1610:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1611:../stdperiph/source/stm32f37x_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1612:../stdperiph/source/stm32f37x_can.c ****        break;
1613:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_LEC:
1614:../stdperiph/source/stm32f37x_can.c ****       /*  Clear LEC bits */
1615:../stdperiph/source/stm32f37x_can.c ****       CANx->ESR = RESET; 
1616:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1617:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1618:../stdperiph/source/stm32f37x_can.c ****       break;
1619:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_ERR:
1620:../stdperiph/source/stm32f37x_can.c ****       /*Clear LEC bits */
1621:../stdperiph/source/stm32f37x_can.c ****       CANx->ESR = RESET; 
1622:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1623:../stdperiph/source/stm32f37x_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1624:../stdperiph/source/stm32f37x_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1625:../stdperiph/source/stm32f37x_can.c ****        break;
1626:../stdperiph/source/stm32f37x_can.c ****     default:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 30


1627:../stdperiph/source/stm32f37x_can.c ****        break;
1628:../stdperiph/source/stm32f37x_can.c ****    }
1629:../stdperiph/source/stm32f37x_can.c **** }
1630:../stdperiph/source/stm32f37x_can.c ****  /**
1631:../stdperiph/source/stm32f37x_can.c ****   * @}
1632:../stdperiph/source/stm32f37x_can.c ****   */
1633:../stdperiph/source/stm32f37x_can.c **** 
1634:../stdperiph/source/stm32f37x_can.c **** /**
1635:../stdperiph/source/stm32f37x_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1636:../stdperiph/source/stm32f37x_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1637:../stdperiph/source/stm32f37x_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1638:../stdperiph/source/stm32f37x_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1639:../stdperiph/source/stm32f37x_can.c ****   */
1640:../stdperiph/source/stm32f37x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1641:../stdperiph/source/stm32f37x_can.c **** {
  29              		.loc 1 1641 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
1642:../stdperiph/source/stm32f37x_can.c ****   ITStatus pendingbitstatus = RESET;
1643:../stdperiph/source/stm32f37x_can.c ****   
1644:../stdperiph/source/stm32f37x_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  35              		.loc 1 1644 0
  36 0000 0842     		tst	r0, r1
  37 0002 01D0     		beq	.L3
1645:../stdperiph/source/stm32f37x_can.c ****   {
1646:../stdperiph/source/stm32f37x_can.c ****     /* CAN_IT is set */
1647:../stdperiph/source/stm32f37x_can.c ****     pendingbitstatus = SET;
  38              		.loc 1 1647 0
  39 0004 0120     		movs	r0, #1
  40              	.LVL1:
  41 0006 7047     		bx	lr
  42              	.LVL2:
  43              	.L3:
1648:../stdperiph/source/stm32f37x_can.c ****   }
1649:../stdperiph/source/stm32f37x_can.c ****   else
1650:../stdperiph/source/stm32f37x_can.c ****   {
1651:../stdperiph/source/stm32f37x_can.c ****     /* CAN_IT is reset */
1652:../stdperiph/source/stm32f37x_can.c ****     pendingbitstatus = RESET;
  44              		.loc 1 1652 0
  45 0008 0020     		movs	r0, #0
  46              	.LVL3:
1653:../stdperiph/source/stm32f37x_can.c ****   }
1654:../stdperiph/source/stm32f37x_can.c ****   return pendingbitstatus;
1655:../stdperiph/source/stm32f37x_can.c **** }
  47              		.loc 1 1655 0
  48 000a 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE135:
  52              		.section	.text.CAN_DeInit,"ax",%progbits
  53              		.align	2
  54              		.global	CAN_DeInit
  55              		.thumb
  56              		.thumb_func
  58              	CAN_DeInit:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 31


  59              	.LFB111:
 163:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
  60              		.loc 1 163 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL4:
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
 167:../stdperiph/source/stm32f37x_can.c ****   {
  70              		.loc 1 167 0
  71 0002 074B     		ldr	r3, .L7
  72 0004 9842     		cmp	r0, r3
  73 0006 09D1     		bne	.L4
 170:../stdperiph/source/stm32f37x_can.c ****     /* Release CAN1 from reset state */
  74              		.loc 1 170 0
  75 0008 0121     		movs	r1, #1
  76 000a 4FF00070 		mov	r0, #33554432
  77              	.LVL5:
  78 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  79              	.LVL6:
 172:../stdperiph/source/stm32f37x_can.c ****   }
  80              		.loc 1 172 0
  81 0012 0021     		movs	r1, #0
  82 0014 4FF00070 		mov	r0, #33554432
  83 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  84              	.LVL7:
  85              	.L4:
  86 001c 08BD     		pop	{r3, pc}
  87              	.L8:
  88 001e 00BF     		.align	2
  89              	.L7:
  90 0020 00640040 		.word	1073767424
  91              		.cfi_endproc
  92              	.LFE111:
  94              		.section	.text.CAN_Init,"ax",%progbits
  95              		.align	2
  96              		.global	CAN_Init
  97              		.thumb
  98              		.thumb_func
 100              	CAN_Init:
 101              	.LFB112:
 186:../stdperiph/source/stm32f37x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 102              		.loc 1 186 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.LVL8:
 204:../stdperiph/source/stm32f37x_can.c **** 
 108              		.loc 1 204 0
 109 0000 0368     		ldr	r3, [r0]
 110 0002 23F00203 		bic	r3, r3, #2
 111 0006 0360     		str	r3, [r0]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 32


 207:../stdperiph/source/stm32f37x_can.c **** 
 112              		.loc 1 207 0
 113 0008 0368     		ldr	r3, [r0]
 114 000a 43F00103 		orr	r3, r3, #1
 115 000e 0360     		str	r3, [r0]
 188:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 116              		.loc 1 188 0
 117 0010 0023     		movs	r3, #0
 210:../stdperiph/source/stm32f37x_can.c ****   {
 118              		.loc 1 210 0
 119 0012 00E0     		b	.L10
 120              	.LVL9:
 121              	.L12:
 212:../stdperiph/source/stm32f37x_can.c ****   }
 122              		.loc 1 212 0
 123 0014 0133     		adds	r3, r3, #1
 124              	.LVL10:
 125              	.L10:
 210:../stdperiph/source/stm32f37x_can.c ****   {
 126              		.loc 1 210 0
 127 0016 4268     		ldr	r2, [r0, #4]
 128 0018 12F0010F 		tst	r2, #1
 129 001c 03D1     		bne	.L11
 210:../stdperiph/source/stm32f37x_can.c ****   {
 130              		.loc 1 210 0 is_stmt 0 discriminator 1
 131 001e 4FF6FF72 		movw	r2, #65535
 132 0022 9342     		cmp	r3, r2
 133 0024 F6D1     		bne	.L12
 134              	.L11:
 216:../stdperiph/source/stm32f37x_can.c ****   {
 135              		.loc 1 216 0 is_stmt 1
 136 0026 4368     		ldr	r3, [r0, #4]
 137              	.LVL11:
 138 0028 13F0010F 		tst	r3, #1
 139 002c 6BD0     		beq	.L29
 223:../stdperiph/source/stm32f37x_can.c ****     {
 140              		.loc 1 223 0
 141 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 142 0030 012B     		cmp	r3, #1
 143 0032 04D1     		bne	.L14
 225:../stdperiph/source/stm32f37x_can.c ****     }
 144              		.loc 1 225 0
 145 0034 0368     		ldr	r3, [r0]
 146 0036 43F08003 		orr	r3, r3, #128
 147 003a 0360     		str	r3, [r0]
 148 003c 03E0     		b	.L15
 149              	.L14:
 229:../stdperiph/source/stm32f37x_can.c ****     }
 150              		.loc 1 229 0
 151 003e 0368     		ldr	r3, [r0]
 152 0040 23F08003 		bic	r3, r3, #128
 153 0044 0360     		str	r3, [r0]
 154              	.L15:
 233:../stdperiph/source/stm32f37x_can.c ****     {
 155              		.loc 1 233 0
 156 0046 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 157 0048 012B     		cmp	r3, #1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 33


 158 004a 04D1     		bne	.L16
 235:../stdperiph/source/stm32f37x_can.c ****     }
 159              		.loc 1 235 0
 160 004c 0368     		ldr	r3, [r0]
 161 004e 43F04003 		orr	r3, r3, #64
 162 0052 0360     		str	r3, [r0]
 163 0054 03E0     		b	.L17
 164              	.L16:
 239:../stdperiph/source/stm32f37x_can.c ****     }
 165              		.loc 1 239 0
 166 0056 0368     		ldr	r3, [r0]
 167 0058 23F04003 		bic	r3, r3, #64
 168 005c 0360     		str	r3, [r0]
 169              	.L17:
 243:../stdperiph/source/stm32f37x_can.c ****     {
 170              		.loc 1 243 0
 171 005e 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 172 0060 012B     		cmp	r3, #1
 173 0062 04D1     		bne	.L18
 245:../stdperiph/source/stm32f37x_can.c ****     }
 174              		.loc 1 245 0
 175 0064 0368     		ldr	r3, [r0]
 176 0066 43F02003 		orr	r3, r3, #32
 177 006a 0360     		str	r3, [r0]
 178 006c 03E0     		b	.L19
 179              	.L18:
 249:../stdperiph/source/stm32f37x_can.c ****     }
 180              		.loc 1 249 0
 181 006e 0368     		ldr	r3, [r0]
 182 0070 23F02003 		bic	r3, r3, #32
 183 0074 0360     		str	r3, [r0]
 184              	.L19:
 253:../stdperiph/source/stm32f37x_can.c ****     {
 185              		.loc 1 253 0
 186 0076 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 187 0078 012B     		cmp	r3, #1
 188 007a 04D1     		bne	.L20
 255:../stdperiph/source/stm32f37x_can.c ****     }
 189              		.loc 1 255 0
 190 007c 0368     		ldr	r3, [r0]
 191 007e 43F01003 		orr	r3, r3, #16
 192 0082 0360     		str	r3, [r0]
 193 0084 03E0     		b	.L21
 194              	.L20:
 259:../stdperiph/source/stm32f37x_can.c ****     }
 195              		.loc 1 259 0
 196 0086 0368     		ldr	r3, [r0]
 197 0088 23F01003 		bic	r3, r3, #16
 198 008c 0360     		str	r3, [r0]
 199              	.L21:
 263:../stdperiph/source/stm32f37x_can.c ****     {
 200              		.loc 1 263 0
 201 008e 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 202 0090 012B     		cmp	r3, #1
 203 0092 04D1     		bne	.L22
 265:../stdperiph/source/stm32f37x_can.c ****     }
 204              		.loc 1 265 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 34


 205 0094 0368     		ldr	r3, [r0]
 206 0096 43F00803 		orr	r3, r3, #8
 207 009a 0360     		str	r3, [r0]
 208 009c 03E0     		b	.L23
 209              	.L22:
 269:../stdperiph/source/stm32f37x_can.c ****     }
 210              		.loc 1 269 0
 211 009e 0368     		ldr	r3, [r0]
 212 00a0 23F00803 		bic	r3, r3, #8
 213 00a4 0360     		str	r3, [r0]
 214              	.L23:
 273:../stdperiph/source/stm32f37x_can.c ****     {
 215              		.loc 1 273 0
 216 00a6 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 217 00a8 012B     		cmp	r3, #1
 218 00aa 04D1     		bne	.L24
 275:../stdperiph/source/stm32f37x_can.c ****     }
 219              		.loc 1 275 0
 220 00ac 0368     		ldr	r3, [r0]
 221 00ae 43F00403 		orr	r3, r3, #4
 222 00b2 0360     		str	r3, [r0]
 223 00b4 03E0     		b	.L25
 224              	.L24:
 279:../stdperiph/source/stm32f37x_can.c ****     }
 225              		.loc 1 279 0
 226 00b6 0368     		ldr	r3, [r0]
 227 00b8 23F00403 		bic	r3, r3, #4
 228 00bc 0360     		str	r3, [r0]
 229              	.L25:
 283:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 230              		.loc 1 283 0
 231 00be 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 284:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 232              		.loc 1 284 0
 233 00c0 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 234 00c2 1B06     		lsls	r3, r3, #24
 283:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 235              		.loc 1 283 0
 236 00c4 43EA8273 		orr	r3, r3, r2, lsl #30
 285:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 237              		.loc 1 285 0
 238 00c8 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 284:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 239              		.loc 1 284 0
 240 00ca 43EA0243 		orr	r3, r3, r2, lsl #16
 286:../stdperiph/source/stm32f37x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 241              		.loc 1 286 0
 242 00ce 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 285:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 243              		.loc 1 285 0
 244 00d0 43EA0253 		orr	r3, r3, r2, lsl #20
 287:../stdperiph/source/stm32f37x_can.c **** 
 245              		.loc 1 287 0
 246 00d4 0A88     		ldrh	r2, [r1]
 247 00d6 013A     		subs	r2, r2, #1
 286:../stdperiph/source/stm32f37x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 248              		.loc 1 286 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 35


 249 00d8 1343     		orrs	r3, r3, r2
 283:../stdperiph/source/stm32f37x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 250              		.loc 1 283 0
 251 00da C361     		str	r3, [r0, #28]
 290:../stdperiph/source/stm32f37x_can.c **** 
 252              		.loc 1 290 0
 253 00dc 0368     		ldr	r3, [r0]
 254 00de 23F00103 		bic	r3, r3, #1
 255 00e2 0360     		str	r3, [r0]
 256              	.LVL12:
 293:../stdperiph/source/stm32f37x_can.c **** 
 257              		.loc 1 293 0
 258 00e4 0023     		movs	r3, #0
 295:../stdperiph/source/stm32f37x_can.c ****    {
 259              		.loc 1 295 0
 260 00e6 00E0     		b	.L26
 261              	.LVL13:
 262              	.L28:
 297:../stdperiph/source/stm32f37x_can.c ****    }
 263              		.loc 1 297 0
 264 00e8 0133     		adds	r3, r3, #1
 265              	.LVL14:
 266              	.L26:
 295:../stdperiph/source/stm32f37x_can.c ****    {
 267              		.loc 1 295 0
 268 00ea 4268     		ldr	r2, [r0, #4]
 269 00ec 12F0010F 		tst	r2, #1
 270 00f0 03D0     		beq	.L27
 295:../stdperiph/source/stm32f37x_can.c ****    {
 271              		.loc 1 295 0 is_stmt 0 discriminator 1
 272 00f2 4FF6FF72 		movw	r2, #65535
 273 00f6 9342     		cmp	r3, r2
 274 00f8 F6D1     		bne	.L28
 275              	.L27:
 301:../stdperiph/source/stm32f37x_can.c ****     {
 276              		.loc 1 301 0 is_stmt 1
 277 00fa 4368     		ldr	r3, [r0, #4]
 278              	.LVL15:
 279 00fc 13F0010F 		tst	r3, #1
 280 0100 03D0     		beq	.L30
 303:../stdperiph/source/stm32f37x_can.c ****     }
 281              		.loc 1 303 0
 282 0102 0020     		movs	r0, #0
 283              	.LVL16:
 284 0104 7047     		bx	lr
 285              	.LVL17:
 286              	.L29:
 218:../stdperiph/source/stm32f37x_can.c ****   }
 287              		.loc 1 218 0
 288 0106 0020     		movs	r0, #0
 289              	.LVL18:
 290 0108 7047     		bx	lr
 291              	.LVL19:
 292              	.L30:
 307:../stdperiph/source/stm32f37x_can.c ****     }
 293              		.loc 1 307 0
 294 010a 0120     		movs	r0, #1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 36


 295              	.LVL20:
 313:../stdperiph/source/stm32f37x_can.c **** 
 296              		.loc 1 313 0
 297 010c 7047     		bx	lr
 298              		.cfi_endproc
 299              	.LFE112:
 301 010e 00BF     		.section	.text.CAN_FilterInit,"ax",%progbits
 302              		.align	2
 303              		.global	CAN_FilterInit
 304              		.thumb
 305              		.thumb_func
 307              	CAN_FilterInit:
 308              	.LFB113:
 323:../stdperiph/source/stm32f37x_can.c ****   uint32_t filter_number_bit_pos = 0;
 309              		.loc 1 323 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 314              	.LVL21:
 315 0000 70B4     		push	{r4, r5, r6}
 316              	.LCFI1:
 317              		.cfi_def_cfa_offset 12
 318              		.cfi_offset 4, -12
 319              		.cfi_offset 5, -8
 320              		.cfi_offset 6, -4
 321              	.LVL22:
 332:../stdperiph/source/stm32f37x_can.c **** 
 322              		.loc 1 332 0
 323 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 324 0004 0122     		movs	r2, #1
 325 0006 02FA03F3 		lsl	r3, r2, r3
 326              	.LVL23:
 335:../stdperiph/source/stm32f37x_can.c **** 
 327              		.loc 1 335 0
 328 000a 394A     		ldr	r2, .L40
 329 000c D2F80012 		ldr	r1, [r2, #512]
 330 0010 41F00101 		orr	r1, r1, #1
 331 0014 C2F80012 		str	r1, [r2, #512]
 338:../stdperiph/source/stm32f37x_can.c **** 
 332              		.loc 1 338 0
 333 0018 D2F81C12 		ldr	r1, [r2, #540]
 334 001c DC43     		mvns	r4, r3
 335 001e 2140     		ands	r1, r1, r4
 336 0020 C2F81C12 		str	r1, [r2, #540]
 341:../stdperiph/source/stm32f37x_can.c ****   {
 337              		.loc 1 341 0
 338 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 339 0026 B2B9     		cbnz	r2, .L32
 344:../stdperiph/source/stm32f37x_can.c **** 
 340              		.loc 1 344 0
 341 0028 314A     		ldr	r2, .L40
 342 002a D2F80C12 		ldr	r1, [r2, #524]
 343 002e 2140     		ands	r1, r1, r4
 344 0030 C2F80C12 		str	r1, [r2, #524]
 348:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 345              		.loc 1 348 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 37


 346 0034 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 349:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 347              		.loc 1 349 0
 348 0036 C688     		ldrh	r6, [r0, #6]
 350:../stdperiph/source/stm32f37x_can.c **** 
 349              		.loc 1 350 0
 350 0038 4588     		ldrh	r5, [r0, #2]
 349:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 351              		.loc 1 349 0
 352 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 348:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 353              		.loc 1 348 0
 354 003e 4831     		adds	r1, r1, #72
 355 0040 42F83150 		str	r5, [r2, r1, lsl #3]
 354:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 356              		.loc 1 354 0
 357 0044 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 355:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 358              		.loc 1 355 0
 359 0046 8688     		ldrh	r6, [r0, #4]
 356:../stdperiph/source/stm32f37x_can.c ****   }
 360              		.loc 1 356 0
 361 0048 0188     		ldrh	r1, [r0]
 355:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 362              		.loc 1 355 0
 363 004a 41EA0641 		orr	r1, r1, r6, lsl #16
 354:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 364              		.loc 1 354 0
 365 004e 4835     		adds	r5, r5, #72
 366 0050 02EBC502 		add	r2, r2, r5, lsl #3
 367 0054 5160     		str	r1, [r2, #4]
 368              	.L32:
 359:../stdperiph/source/stm32f37x_can.c ****   {
 369              		.loc 1 359 0
 370 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 371 0058 012A     		cmp	r2, #1
 372 005a 16D1     		bne	.L33
 362:../stdperiph/source/stm32f37x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 373              		.loc 1 362 0
 374 005c 244A     		ldr	r2, .L40
 375 005e D2F80C12 		ldr	r1, [r2, #524]
 376 0062 1943     		orrs	r1, r1, r3
 377 0064 C2F80C12 		str	r1, [r2, #524]
 364:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 378              		.loc 1 364 0
 379 0068 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 365:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 380              		.loc 1 365 0
 381 006a 0688     		ldrh	r6, [r0]
 366:../stdperiph/source/stm32f37x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 382              		.loc 1 366 0
 383 006c 4588     		ldrh	r5, [r0, #2]
 365:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 384              		.loc 1 365 0
 385 006e 45EA0645 		orr	r5, r5, r6, lsl #16
 364:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 386              		.loc 1 364 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 38


 387 0072 4831     		adds	r1, r1, #72
 388 0074 42F83150 		str	r5, [r2, r1, lsl #3]
 368:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 389              		.loc 1 368 0
 390 0078 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 369:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 391              		.loc 1 369 0
 392 007a 8688     		ldrh	r6, [r0, #4]
 370:../stdperiph/source/stm32f37x_can.c ****   }
 393              		.loc 1 370 0
 394 007c C188     		ldrh	r1, [r0, #6]
 369:../stdperiph/source/stm32f37x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 395              		.loc 1 369 0
 396 007e 41EA0641 		orr	r1, r1, r6, lsl #16
 368:../stdperiph/source/stm32f37x_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 397              		.loc 1 368 0
 398 0082 4835     		adds	r5, r5, #72
 399 0084 02EBC502 		add	r2, r2, r5, lsl #3
 400 0088 5160     		str	r1, [r2, #4]
 401              	.L33:
 374:../stdperiph/source/stm32f37x_can.c ****   {
 402              		.loc 1 374 0
 403 008a C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 404 008c 32B9     		cbnz	r2, .L34
 377:../stdperiph/source/stm32f37x_can.c ****   }
 405              		.loc 1 377 0
 406 008e 1849     		ldr	r1, .L40
 407 0090 D1F80422 		ldr	r2, [r1, #516]
 408 0094 2240     		ands	r2, r2, r4
 409 0096 C1F80422 		str	r2, [r1, #516]
 410 009a 05E0     		b	.L35
 411              	.L34:
 382:../stdperiph/source/stm32f37x_can.c ****   }
 412              		.loc 1 382 0
 413 009c 1449     		ldr	r1, .L40
 414 009e D1F80422 		ldr	r2, [r1, #516]
 415 00a2 1A43     		orrs	r2, r2, r3
 416 00a4 C1F80422 		str	r2, [r1, #516]
 417              	.L35:
 386:../stdperiph/source/stm32f37x_can.c ****   {
 418              		.loc 1 386 0
 419 00a8 0289     		ldrh	r2, [r0, #8]
 420 00aa 2AB9     		cbnz	r2, .L36
 389:../stdperiph/source/stm32f37x_can.c ****   }
 421              		.loc 1 389 0
 422 00ac 1049     		ldr	r1, .L40
 423 00ae D1F81422 		ldr	r2, [r1, #532]
 424 00b2 1440     		ands	r4, r4, r2
 425 00b4 C1F81442 		str	r4, [r1, #532]
 426              	.L36:
 392:../stdperiph/source/stm32f37x_can.c ****   {
 427              		.loc 1 392 0
 428 00b8 0289     		ldrh	r2, [r0, #8]
 429 00ba 012A     		cmp	r2, #1
 430 00bc 05D1     		bne	.L37
 395:../stdperiph/source/stm32f37x_can.c ****   }
 431              		.loc 1 395 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 39


 432 00be 0C49     		ldr	r1, .L40
 433 00c0 D1F81422 		ldr	r2, [r1, #532]
 434 00c4 1A43     		orrs	r2, r2, r3
 435 00c6 C1F81422 		str	r2, [r1, #532]
 436              	.L37:
 399:../stdperiph/source/stm32f37x_can.c ****   {
 437              		.loc 1 399 0
 438 00ca 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 439 00cc 012A     		cmp	r2, #1
 440 00ce 05D1     		bne	.L38
 401:../stdperiph/source/stm32f37x_can.c ****   }
 441              		.loc 1 401 0
 442 00d0 0749     		ldr	r1, .L40
 443 00d2 D1F81C22 		ldr	r2, [r1, #540]
 444 00d6 1343     		orrs	r3, r3, r2
 445              	.LVL24:
 446 00d8 C1F81C32 		str	r3, [r1, #540]
 447              	.L38:
 405:../stdperiph/source/stm32f37x_can.c **** }
 448              		.loc 1 405 0
 449 00dc 044A     		ldr	r2, .L40
 450 00de D2F80032 		ldr	r3, [r2, #512]
 451 00e2 23F00103 		bic	r3, r3, #1
 452 00e6 C2F80032 		str	r3, [r2, #512]
 406:../stdperiph/source/stm32f37x_can.c **** 
 453              		.loc 1 406 0
 454 00ea 70BC     		pop	{r4, r5, r6}
 455              	.LCFI2:
 456              		.cfi_restore 6
 457              		.cfi_restore 5
 458              		.cfi_restore 4
 459              		.cfi_def_cfa_offset 0
 460 00ec 7047     		bx	lr
 461              	.L41:
 462 00ee 00BF     		.align	2
 463              	.L40:
 464 00f0 00640040 		.word	1073767424
 465              		.cfi_endproc
 466              	.LFE113:
 468              		.section	.text.CAN_StructInit,"ax",%progbits
 469              		.align	2
 470              		.global	CAN_StructInit
 471              		.thumb
 472              		.thumb_func
 474              	CAN_StructInit:
 475              	.LFB114:
 414:../stdperiph/source/stm32f37x_can.c ****   /* Reset CAN init structure parameters values */
 476              		.loc 1 414 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		@ link register save eliminated.
 481              	.LVL25:
 418:../stdperiph/source/stm32f37x_can.c ****   
 482              		.loc 1 418 0
 483 0000 0023     		movs	r3, #0
 484 0002 8371     		strb	r3, [r0, #6]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 40


 421:../stdperiph/source/stm32f37x_can.c ****   
 485              		.loc 1 421 0
 486 0004 C371     		strb	r3, [r0, #7]
 424:../stdperiph/source/stm32f37x_can.c ****   
 487              		.loc 1 424 0
 488 0006 0372     		strb	r3, [r0, #8]
 427:../stdperiph/source/stm32f37x_can.c ****   
 489              		.loc 1 427 0
 490 0008 4372     		strb	r3, [r0, #9]
 430:../stdperiph/source/stm32f37x_can.c ****   
 491              		.loc 1 430 0
 492 000a 8372     		strb	r3, [r0, #10]
 433:../stdperiph/source/stm32f37x_can.c ****   
 493              		.loc 1 433 0
 494 000c C372     		strb	r3, [r0, #11]
 436:../stdperiph/source/stm32f37x_can.c ****   
 495              		.loc 1 436 0
 496 000e 8370     		strb	r3, [r0, #2]
 439:../stdperiph/source/stm32f37x_can.c ****   
 497              		.loc 1 439 0
 498 0010 C370     		strb	r3, [r0, #3]
 442:../stdperiph/source/stm32f37x_can.c ****   
 499              		.loc 1 442 0
 500 0012 0323     		movs	r3, #3
 501 0014 0371     		strb	r3, [r0, #4]
 445:../stdperiph/source/stm32f37x_can.c ****   
 502              		.loc 1 445 0
 503 0016 0223     		movs	r3, #2
 504 0018 4371     		strb	r3, [r0, #5]
 448:../stdperiph/source/stm32f37x_can.c **** }
 505              		.loc 1 448 0
 506 001a 0123     		movs	r3, #1
 507 001c 0380     		strh	r3, [r0]	@ movhi
 508 001e 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE114:
 512              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 513              		.align	2
 514              		.global	CAN_SlaveStartBank
 515              		.thumb
 516              		.thumb_func
 518              	CAN_SlaveStartBank:
 519              	.LFB115:
 457:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 520              		.loc 1 457 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525              	.LVL26:
 462:../stdperiph/source/stm32f37x_can.c ****   
 526              		.loc 1 462 0
 527 0000 0D4B     		ldr	r3, .L44
 528 0002 D3F80022 		ldr	r2, [r3, #512]
 529 0006 42F00102 		orr	r2, r2, #1
 530 000a C3F80022 		str	r2, [r3, #512]
 465:../stdperiph/source/stm32f37x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 41


 531              		.loc 1 465 0
 532 000e D3F80022 		ldr	r2, [r3, #512]
 533 0012 22F47C52 		bic	r2, r2, #16128
 534 0016 22F00E02 		bic	r2, r2, #14
 535 001a C3F80022 		str	r2, [r3, #512]
 466:../stdperiph/source/stm32f37x_can.c ****   
 536              		.loc 1 466 0
 537 001e D3F80022 		ldr	r2, [r3, #512]
 538 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 539              	.LVL27:
 540 0026 C3F80002 		str	r0, [r3, #512]
 469:../stdperiph/source/stm32f37x_can.c **** }
 541              		.loc 1 469 0
 542 002a D3F80022 		ldr	r2, [r3, #512]
 543 002e 22F00102 		bic	r2, r2, #1
 544 0032 C3F80022 		str	r2, [r3, #512]
 545 0036 7047     		bx	lr
 546              	.L45:
 547              		.align	2
 548              	.L44:
 549 0038 00640040 		.word	1073767424
 550              		.cfi_endproc
 551              	.LFE115:
 553              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 554              		.align	2
 555              		.global	CAN_DBGFreeze
 556              		.thumb
 557              		.thumb_func
 559              	CAN_DBGFreeze:
 560              	.LFB116:
 482:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 561              		.loc 1 482 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566              	.LVL28:
 487:../stdperiph/source/stm32f37x_can.c ****   {
 567              		.loc 1 487 0
 568 0000 21B1     		cbz	r1, .L47
 490:../stdperiph/source/stm32f37x_can.c ****   }
 569              		.loc 1 490 0
 570 0002 0368     		ldr	r3, [r0]
 571 0004 43F48033 		orr	r3, r3, #65536
 572 0008 0360     		str	r3, [r0]
 573 000a 7047     		bx	lr
 574              	.L47:
 495:../stdperiph/source/stm32f37x_can.c ****   }
 575              		.loc 1 495 0
 576 000c 0368     		ldr	r3, [r0]
 577 000e 23F48033 		bic	r3, r3, #65536
 578 0012 0360     		str	r3, [r0]
 579 0014 7047     		bx	lr
 580              		.cfi_endproc
 581              	.LFE116:
 583 0016 00BF     		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 584              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 42


 585              		.global	CAN_TTComModeCmd
 586              		.thumb
 587              		.thumb_func
 589              	CAN_TTComModeCmd:
 590              	.LFB117:
 512:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 591              		.loc 1 512 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 596              	.LVL29:
 516:../stdperiph/source/stm32f37x_can.c ****   {
 597              		.loc 1 516 0
 598 0000 B1B1     		cbz	r1, .L50
 519:../stdperiph/source/stm32f37x_can.c **** 
 599              		.loc 1 519 0
 600 0002 0368     		ldr	r3, [r0]
 601 0004 43F08003 		orr	r3, r3, #128
 602 0008 0360     		str	r3, [r0]
 522:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 603              		.loc 1 522 0
 604 000a D0F88431 		ldr	r3, [r0, #388]
 605 000e 43F48073 		orr	r3, r3, #256
 606 0012 C0F88431 		str	r3, [r0, #388]
 523:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 607              		.loc 1 523 0
 608 0016 D0F89431 		ldr	r3, [r0, #404]
 609 001a 43F48073 		orr	r3, r3, #256
 610 001e C0F89431 		str	r3, [r0, #404]
 524:../stdperiph/source/stm32f37x_can.c ****   }
 611              		.loc 1 524 0
 612 0022 D0F8A431 		ldr	r3, [r0, #420]
 613 0026 43F48073 		orr	r3, r3, #256
 614 002a C0F8A431 		str	r3, [r0, #420]
 615 002e 7047     		bx	lr
 616              	.L50:
 529:../stdperiph/source/stm32f37x_can.c **** 
 617              		.loc 1 529 0
 618 0030 0368     		ldr	r3, [r0]
 619 0032 23F08003 		bic	r3, r3, #128
 620 0036 0360     		str	r3, [r0]
 532:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 621              		.loc 1 532 0
 622 0038 D0F88431 		ldr	r3, [r0, #388]
 623 003c 23F48073 		bic	r3, r3, #256
 624 0040 C0F88431 		str	r3, [r0, #388]
 533:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 625              		.loc 1 533 0
 626 0044 D0F89431 		ldr	r3, [r0, #404]
 627 0048 23F48073 		bic	r3, r3, #256
 628 004c C0F89431 		str	r3, [r0, #404]
 534:../stdperiph/source/stm32f37x_can.c ****   }
 629              		.loc 1 534 0
 630 0050 D0F8A431 		ldr	r3, [r0, #420]
 631 0054 23F48073 		bic	r3, r3, #256
 632 0058 C0F8A431 		str	r3, [r0, #420]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 43


 633 005c 7047     		bx	lr
 634              		.cfi_endproc
 635              	.LFE117:
 637 005e 00BF     		.section	.text.CAN_Transmit,"ax",%progbits
 638              		.align	2
 639              		.global	CAN_Transmit
 640              		.thumb
 641              		.thumb_func
 643              	CAN_Transmit:
 644              	.LFB118:
 566:../stdperiph/source/stm32f37x_can.c ****   uint8_t transmit_mailbox = 0;
 645              		.loc 1 566 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 650              	.LVL30:
 651 0000 0346     		mov	r3, r0
 652              	.LVL31:
 575:../stdperiph/source/stm32f37x_can.c ****   {
 653              		.loc 1 575 0
 654 0002 8268     		ldr	r2, [r0, #8]
 655 0004 12F0806F 		tst	r2, #67108864
 656 0008 09D1     		bne	.L57
 579:../stdperiph/source/stm32f37x_can.c ****   {
 657              		.loc 1 579 0
 658 000a 8268     		ldr	r2, [r0, #8]
 659 000c 12F0006F 		tst	r2, #134217728
 660 0010 07D1     		bne	.L58
 583:../stdperiph/source/stm32f37x_can.c ****   {
 661              		.loc 1 583 0
 662 0012 8268     		ldr	r2, [r0, #8]
 663 0014 12F0805F 		tst	r2, #268435456
 664 0018 05D0     		beq	.L59
 585:../stdperiph/source/stm32f37x_can.c ****   }
 665              		.loc 1 585 0
 666 001a 0220     		movs	r0, #2
 667              	.LVL32:
 668 001c 04E0     		b	.L53
 669              	.LVL33:
 670              	.L57:
 577:../stdperiph/source/stm32f37x_can.c ****   }
 671              		.loc 1 577 0
 672 001e 0020     		movs	r0, #0
 673              	.LVL34:
 674 0020 02E0     		b	.L53
 675              	.LVL35:
 676              	.L58:
 581:../stdperiph/source/stm32f37x_can.c ****   }
 677              		.loc 1 581 0
 678 0022 0120     		movs	r0, #1
 679              	.LVL36:
 680 0024 00E0     		b	.L53
 681              	.LVL37:
 682              	.L59:
 589:../stdperiph/source/stm32f37x_can.c ****   }
 683              		.loc 1 589 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 44


 684 0026 0420     		movs	r0, #4
 685              	.LVL38:
 686              	.L53:
 592:../stdperiph/source/stm32f37x_can.c ****   {
 687              		.loc 1 592 0
 688 0028 0428     		cmp	r0, #4
 689 002a 4FD0     		beq	.L62
 566:../stdperiph/source/stm32f37x_can.c ****   uint8_t transmit_mailbox = 0;
 690              		.loc 1 566 0
 691 002c F0B4     		push	{r4, r5, r6, r7}
 692              	.LCFI3:
 693              		.cfi_def_cfa_offset 16
 694              		.cfi_offset 4, -16
 695              		.cfi_offset 5, -12
 696              		.cfi_offset 6, -8
 697              		.cfi_offset 7, -4
 595:../stdperiph/source/stm32f37x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 698              		.loc 1 595 0
 699 002e 0546     		mov	r5, r0
 700 0030 00F11802 		add	r2, r0, #24
 701 0034 1201     		lsls	r2, r2, #4
 702 0036 9C58     		ldr	r4, [r3, r2]
 703 0038 04F00104 		and	r4, r4, #1
 704 003c 9C50     		str	r4, [r3, r2]
 596:../stdperiph/source/stm32f37x_can.c ****     {
 705              		.loc 1 596 0
 706 003e 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 707 0040 52B9     		cbnz	r2, .L55
 599:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->RTR);
 708              		.loc 1 599 0
 709 0042 00F11806 		add	r6, r0, #24
 710 0046 3601     		lsls	r6, r6, #4
 711 0048 9F59     		ldr	r7, [r3, r6]
 712 004a 0A68     		ldr	r2, [r1]
 600:../stdperiph/source/stm32f37x_can.c ****     }
 713              		.loc 1 600 0
 714 004c 4C7A     		ldrb	r4, [r1, #9]	@ zero_extendqisi2
 599:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->RTR);
 715              		.loc 1 599 0
 716 004e 44EA4252 		orr	r2, r4, r2, lsl #21
 717 0052 3A43     		orrs	r2, r2, r7
 718 0054 9A51     		str	r2, [r3, r6]
 719 0056 0AE0     		b	.L56
 720              	.L55:
 605:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->IDE | \
 721              		.loc 1 605 0
 722 0058 00F11806 		add	r6, r0, #24
 723 005c 3601     		lsls	r6, r6, #4
 724 005e 9F59     		ldr	r7, [r3, r6]
 725 0060 4C68     		ldr	r4, [r1, #4]
 726 0062 42EAC404 		orr	r4, r2, r4, lsl #3
 607:../stdperiph/source/stm32f37x_can.c ****     }
 727              		.loc 1 607 0
 728 0066 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
 606:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->RTR);
 729              		.loc 1 606 0
 730 0068 2243     		orrs	r2, r2, r4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 45


 605:../stdperiph/source/stm32f37x_can.c ****                                                   TxMessage->IDE | \
 731              		.loc 1 605 0
 732 006a 3A43     		orrs	r2, r2, r7
 733 006c 9A51     		str	r2, [r3, r6]
 734              	.L56:
 611:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 735              		.loc 1 611 0
 736 006e 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 737 0070 02F00F02 		and	r2, r2, #15
 738 0074 8A72     		strb	r2, [r1, #10]
 612:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 739              		.loc 1 612 0
 740 0076 05F11804 		add	r4, r5, #24
 741 007a 2401     		lsls	r4, r4, #4
 742 007c 1A19     		adds	r2, r3, r4
 743 007e 5668     		ldr	r6, [r2, #4]
 744 0080 26F00F06 		bic	r6, r6, #15
 745 0084 5660     		str	r6, [r2, #4]
 613:../stdperiph/source/stm32f37x_can.c **** 
 746              		.loc 1 613 0
 747 0086 5668     		ldr	r6, [r2, #4]
 748 0088 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 749 008a 3E43     		orrs	r6, r6, r7
 750 008c 5660     		str	r6, [r2, #4]
 616:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 751              		.loc 1 616 0
 752 008e 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 617:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 753              		.loc 1 617 0
 754 0090 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 755 0092 1204     		lsls	r2, r2, #16
 616:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 756              		.loc 1 616 0
 757 0094 42EA0662 		orr	r2, r2, r6, lsl #24
 618:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 758              		.loc 1 618 0
 759 0098 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 617:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 760              		.loc 1 617 0
 761 009a 42EA0622 		orr	r2, r2, r6, lsl #8
 619:../stdperiph/source/stm32f37x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 762              		.loc 1 619 0
 763 009e CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 618:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 764              		.loc 1 618 0
 765 00a0 3243     		orrs	r2, r2, r6
 616:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 766              		.loc 1 616 0
 767 00a2 03EB0515 		add	r5, r3, r5, lsl #4
 768 00a6 C5F88821 		str	r2, [r5, #392]
 620:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 769              		.loc 1 620 0
 770 00aa 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 621:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 771              		.loc 1 621 0
 772 00ac 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 773 00ae 1204     		lsls	r2, r2, #16
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 46


 620:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 774              		.loc 1 620 0
 775 00b0 42EA0662 		orr	r2, r2, r6, lsl #24
 622:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 776              		.loc 1 622 0
 777 00b4 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 621:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 778              		.loc 1 621 0
 779 00b6 42EA0622 		orr	r2, r2, r6, lsl #8
 623:../stdperiph/source/stm32f37x_can.c ****     /* Request transmission */
 780              		.loc 1 623 0
 781 00ba C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 782              	.LVL39:
 622:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 783              		.loc 1 622 0
 784 00bc 0A43     		orrs	r2, r2, r1
 620:../stdperiph/source/stm32f37x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 785              		.loc 1 620 0
 786 00be C5F88C21 		str	r2, [r5, #396]
 625:../stdperiph/source/stm32f37x_can.c ****   }
 787              		.loc 1 625 0
 788 00c2 1A59     		ldr	r2, [r3, r4]
 789 00c4 42F00102 		orr	r2, r2, #1
 790 00c8 1A51     		str	r2, [r3, r4]
 628:../stdperiph/source/stm32f37x_can.c **** 
 791              		.loc 1 628 0
 792 00ca F0BC     		pop	{r4, r5, r6, r7}
 793              	.LCFI4:
 794              		.cfi_restore 7
 795              		.cfi_restore 6
 796              		.cfi_restore 5
 797              		.cfi_restore 4
 798              		.cfi_def_cfa_offset 0
 799              	.L62:
 800 00cc 7047     		bx	lr
 801              		.cfi_endproc
 802              	.LFE118:
 804 00ce 00BF     		.section	.text.CAN_TransmitStatus,"ax",%progbits
 805              		.align	2
 806              		.global	CAN_TransmitStatus
 807              		.thumb
 808              		.thumb_func
 810              	CAN_TransmitStatus:
 811              	.LFB119:
 638:../stdperiph/source/stm32f37x_can.c ****   uint32_t state = 0;
 812              		.loc 1 638 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 0
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816              		@ link register save eliminated.
 817              	.LVL40:
 645:../stdperiph/source/stm32f37x_can.c ****   {
 818              		.loc 1 645 0
 819 0000 0129     		cmp	r1, #1
 820 0002 0DD0     		beq	.L65
 821 0004 11B1     		cbz	r1, .L66
 822 0006 0229     		cmp	r1, #2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 47


 823 0008 0ED0     		beq	.L67
 824 000a 15E0     		b	.L76
 825              	.L66:
 648:../stdperiph/source/stm32f37x_can.c ****       break;
 826              		.loc 1 648 0
 827 000c 8368     		ldr	r3, [r0, #8]
 828 000e 23F07B43 		bic	r3, r3, #-83886080
 829 0012 23F47F03 		bic	r3, r3, #16711680
 830 0016 23F47F43 		bic	r3, r3, #65280
 831 001a 23F0FC03 		bic	r3, r3, #252
 832              	.LVL41:
 649:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_1): 
 833              		.loc 1 649 0
 834 001e 0CE0     		b	.L64
 835              	.LVL42:
 836              	.L65:
 651:../stdperiph/source/stm32f37x_can.c ****       break;
 837              		.loc 1 651 0
 838 0020 8268     		ldr	r2, [r0, #8]
 839 0022 114B     		ldr	r3, .L77
 840 0024 1340     		ands	r3, r3, r2
 841              	.LVL43:
 652:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_2): 
 842              		.loc 1 652 0
 843 0026 08E0     		b	.L64
 844              	.LVL44:
 845              	.L67:
 654:../stdperiph/source/stm32f37x_can.c ****       break;
 846              		.loc 1 654 0
 847 0028 8368     		ldr	r3, [r0, #8]
 848 002a 23F06F43 		bic	r3, r3, #-285212672
 849 002e 23F47C03 		bic	r3, r3, #16515072
 850 0032 1B0C     		lsrs	r3, r3, #16
 851 0034 1B04     		lsls	r3, r3, #16
 852              	.LVL45:
 655:../stdperiph/source/stm32f37x_can.c ****     default:
 853              		.loc 1 655 0
 854 0036 00E0     		b	.L64
 855              	.LVL46:
 856              	.L76:
 657:../stdperiph/source/stm32f37x_can.c ****       break;
 857              		.loc 1 657 0
 858 0038 0023     		movs	r3, #0
 859              	.LVL47:
 860              	.L64:
 660:../stdperiph/source/stm32f37x_can.c ****   {
 861              		.loc 1 660 0
 862 003a 0C4A     		ldr	r2, .L77+4
 863 003c 9342     		cmp	r3, r2
 864 003e 0BD0     		beq	.L69
 865 0040 01D8     		bhi	.L70
 866 0042 3BB1     		cbz	r3, .L71
 867 0044 0EE0     		b	.L75
 868              	.L70:
 869 0046 084A     		ldr	r2, .L77
 870 0048 9342     		cmp	r3, r2
 871 004a 07D0     		beq	.L72
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 48


 872 004c 084A     		ldr	r2, .L77+8
 873 004e 9342     		cmp	r3, r2
 874 0050 06D0     		beq	.L73
 875 0052 07E0     		b	.L75
 876              	.L71:
 663:../stdperiph/source/stm32f37x_can.c ****       break;
 877              		.loc 1 663 0
 878 0054 0220     		movs	r0, #2
 879              	.LVL48:
 880 0056 7047     		bx	lr
 881              	.LVL49:
 882              	.L69:
 673:../stdperiph/source/stm32f37x_can.c ****       break;
 883              		.loc 1 673 0
 884 0058 0120     		movs	r0, #1
 885              	.LVL50:
 674:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 886              		.loc 1 674 0
 887 005a 7047     		bx	lr
 888              	.LVL51:
 889              	.L72:
 675:../stdperiph/source/stm32f37x_can.c ****       break;
 890              		.loc 1 675 0
 891 005c 0120     		movs	r0, #1
 892              	.LVL52:
 676:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 893              		.loc 1 676 0
 894 005e 7047     		bx	lr
 895              	.LVL53:
 896              	.L73:
 677:../stdperiph/source/stm32f37x_can.c ****       break;
 897              		.loc 1 677 0
 898 0060 0120     		movs	r0, #1
 899              	.LVL54:
 678:../stdperiph/source/stm32f37x_can.c ****     default: state = CAN_TxStatus_Failed;
 900              		.loc 1 678 0
 901 0062 7047     		bx	lr
 902              	.LVL55:
 903              	.L75:
 666:../stdperiph/source/stm32f37x_can.c ****       break;
 904              		.loc 1 666 0
 905 0064 0020     		movs	r0, #0
 906              	.LVL56:
 683:../stdperiph/source/stm32f37x_can.c **** 
 907              		.loc 1 683 0
 908 0066 7047     		bx	lr
 909              	.L78:
 910              		.align	2
 911              	.L77:
 912 0068 00030008 		.word	134218496
 913 006c 03000004 		.word	67108867
 914 0070 00000310 		.word	268632064
 915              		.cfi_endproc
 916              	.LFE119:
 918              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 919              		.align	2
 920              		.global	CAN_CancelTransmit
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 49


 921              		.thumb
 922              		.thumb_func
 924              	CAN_CancelTransmit:
 925              	.LFB120:
 692:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 926              		.loc 1 692 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931              	.LVL57:
 697:../stdperiph/source/stm32f37x_can.c ****   {
 932              		.loc 1 697 0
 933 0000 0129     		cmp	r1, #1
 934 0002 08D0     		beq	.L81
 935 0004 11B1     		cbz	r1, .L82
 936 0006 0229     		cmp	r1, #2
 937 0008 0AD0     		beq	.L83
 938 000a 7047     		bx	lr
 939              	.L82:
 699:../stdperiph/source/stm32f37x_can.c ****       break;
 940              		.loc 1 699 0
 941 000c 8368     		ldr	r3, [r0, #8]
 942 000e 43F08003 		orr	r3, r3, #128
 943 0012 8360     		str	r3, [r0, #8]
 700:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 944              		.loc 1 700 0
 945 0014 7047     		bx	lr
 946              	.L81:
 701:../stdperiph/source/stm32f37x_can.c ****       break;
 947              		.loc 1 701 0
 948 0016 8368     		ldr	r3, [r0, #8]
 949 0018 43F40043 		orr	r3, r3, #32768
 950 001c 8360     		str	r3, [r0, #8]
 702:../stdperiph/source/stm32f37x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 951              		.loc 1 702 0
 952 001e 7047     		bx	lr
 953              	.L83:
 703:../stdperiph/source/stm32f37x_can.c ****       break;
 954              		.loc 1 703 0
 955 0020 8368     		ldr	r3, [r0, #8]
 956 0022 43F40003 		orr	r3, r3, #8388608
 957 0026 8360     		str	r3, [r0, #8]
 958 0028 7047     		bx	lr
 959              		.cfi_endproc
 960              	.LFE120:
 962 002a 00BF     		.section	.text.CAN_Receive,"ax",%progbits
 963              		.align	2
 964              		.global	CAN_Receive
 965              		.thumb
 966              		.thumb_func
 968              	CAN_Receive:
 969              	.LFB121:
 739:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 970              		.loc 1 739 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 50


 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              		@ link register save eliminated.
 975              	.LVL58:
 976 0000 10B4     		push	{r4}
 977              	.LCFI5:
 978              		.cfi_def_cfa_offset 4
 979              		.cfi_offset 4, -4
 744:../stdperiph/source/stm32f37x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 980              		.loc 1 744 0
 981 0002 01F11B03 		add	r3, r1, #27
 982 0006 1B01     		lsls	r3, r3, #4
 983 0008 C358     		ldr	r3, [r0, r3]
 984 000a 03F00403 		and	r3, r3, #4
 985 000e DBB2     		uxtb	r3, r3
 986 0010 1372     		strb	r3, [r2, #8]
 745:../stdperiph/source/stm32f37x_can.c ****   {
 987              		.loc 1 745 0
 988 0012 33B9     		cbnz	r3, .L85
 747:../stdperiph/source/stm32f37x_can.c ****   }
 989              		.loc 1 747 0
 990 0014 01F11B03 		add	r3, r1, #27
 991 0018 1B01     		lsls	r3, r3, #4
 992 001a C358     		ldr	r3, [r0, r3]
 993 001c 5B0D     		lsrs	r3, r3, #21
 994 001e 1360     		str	r3, [r2]
 995 0020 05E0     		b	.L86
 996              	.L85:
 751:../stdperiph/source/stm32f37x_can.c ****   }
 997              		.loc 1 751 0
 998 0022 01F11B03 		add	r3, r1, #27
 999 0026 1B01     		lsls	r3, r3, #4
 1000 0028 C358     		ldr	r3, [r0, r3]
 1001 002a DB08     		lsrs	r3, r3, #3
 1002 002c 5360     		str	r3, [r2, #4]
 1003              	.L86:
 754:../stdperiph/source/stm32f37x_can.c ****   /* Get the DLC */
 1004              		.loc 1 754 0
 1005 002e 01F11B03 		add	r3, r1, #27
 1006 0032 1B01     		lsls	r3, r3, #4
 1007 0034 C418     		adds	r4, r0, r3
 1008 0036 C358     		ldr	r3, [r0, r3]
 1009 0038 03F00203 		and	r3, r3, #2
 1010 003c 5372     		strb	r3, [r2, #9]
 756:../stdperiph/source/stm32f37x_can.c ****   /* Get the FMI */
 1011              		.loc 1 756 0
 1012 003e 6368     		ldr	r3, [r4, #4]
 1013 0040 03F00F03 		and	r3, r3, #15
 1014 0044 9372     		strb	r3, [r2, #10]
 758:../stdperiph/source/stm32f37x_can.c ****   /* Get the data field */
 1015              		.loc 1 758 0
 1016 0046 6368     		ldr	r3, [r4, #4]
 1017 0048 1B0A     		lsrs	r3, r3, #8
 1018 004a D374     		strb	r3, [r2, #19]
 760:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1019              		.loc 1 760 0
 1020 004c 00EB0113 		add	r3, r0, r1, lsl #4
 1021 0050 D3F8B841 		ldr	r4, [r3, #440]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 51


 1022 0054 D472     		strb	r4, [r2, #11]
 761:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1023              		.loc 1 761 0
 1024 0056 D3F8B841 		ldr	r4, [r3, #440]
 1025 005a 240A     		lsrs	r4, r4, #8
 1026 005c 1473     		strb	r4, [r2, #12]
 762:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1027              		.loc 1 762 0
 1028 005e D3F8B841 		ldr	r4, [r3, #440]
 1029 0062 240C     		lsrs	r4, r4, #16
 1030 0064 5473     		strb	r4, [r2, #13]
 763:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1031              		.loc 1 763 0
 1032 0066 D3F8B841 		ldr	r4, [r3, #440]
 1033 006a 240E     		lsrs	r4, r4, #24
 1034 006c 9473     		strb	r4, [r2, #14]
 764:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1035              		.loc 1 764 0
 1036 006e D3F8BC41 		ldr	r4, [r3, #444]
 1037 0072 D473     		strb	r4, [r2, #15]
 765:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1038              		.loc 1 765 0
 1039 0074 D3F8BC41 		ldr	r4, [r3, #444]
 1040 0078 240A     		lsrs	r4, r4, #8
 1041 007a 1474     		strb	r4, [r2, #16]
 766:../stdperiph/source/stm32f37x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1042              		.loc 1 766 0
 1043 007c D3F8BC41 		ldr	r4, [r3, #444]
 1044 0080 240C     		lsrs	r4, r4, #16
 1045 0082 5474     		strb	r4, [r2, #17]
 767:../stdperiph/source/stm32f37x_can.c ****   /* Release the FIFO */
 1046              		.loc 1 767 0
 1047 0084 D3F8BC31 		ldr	r3, [r3, #444]
 1048 0088 1B0E     		lsrs	r3, r3, #24
 1049 008a 9374     		strb	r3, [r2, #18]
 770:../stdperiph/source/stm32f37x_can.c ****   {
 1050              		.loc 1 770 0
 1051 008c 21B9     		cbnz	r1, .L87
 772:../stdperiph/source/stm32f37x_can.c ****   }
 1052              		.loc 1 772 0
 1053 008e C368     		ldr	r3, [r0, #12]
 1054 0090 43F02003 		orr	r3, r3, #32
 1055 0094 C360     		str	r3, [r0, #12]
 1056 0096 03E0     		b	.L84
 1057              	.L87:
 777:../stdperiph/source/stm32f37x_can.c ****   }
 1058              		.loc 1 777 0
 1059 0098 0369     		ldr	r3, [r0, #16]
 1060 009a 43F02003 		orr	r3, r3, #32
 1061 009e 0361     		str	r3, [r0, #16]
 1062              	.L84:
 779:../stdperiph/source/stm32f37x_can.c **** 
 1063              		.loc 1 779 0
 1064 00a0 5DF8044B 		ldr	r4, [sp], #4
 1065              	.LCFI6:
 1066              		.cfi_restore 4
 1067              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 52


 1068 00a4 7047     		bx	lr
 1069              		.cfi_endproc
 1070              	.LFE121:
 1072 00a6 00BF     		.section	.text.CAN_FIFORelease,"ax",%progbits
 1073              		.align	2
 1074              		.global	CAN_FIFORelease
 1075              		.thumb
 1076              		.thumb_func
 1078              	CAN_FIFORelease:
 1079              	.LFB122:
 788:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 1080              		.loc 1 788 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              		@ link register save eliminated.
 1085              	.LVL59:
 793:../stdperiph/source/stm32f37x_can.c ****   {
 1086              		.loc 1 793 0
 1087 0000 21B9     		cbnz	r1, .L91
 795:../stdperiph/source/stm32f37x_can.c ****   }
 1088              		.loc 1 795 0
 1089 0002 C368     		ldr	r3, [r0, #12]
 1090 0004 43F02003 		orr	r3, r3, #32
 1091 0008 C360     		str	r3, [r0, #12]
 1092 000a 7047     		bx	lr
 1093              	.L91:
 800:../stdperiph/source/stm32f37x_can.c ****   }
 1094              		.loc 1 800 0
 1095 000c 0369     		ldr	r3, [r0, #16]
 1096 000e 43F02003 		orr	r3, r3, #32
 1097 0012 0361     		str	r3, [r0, #16]
 1098 0014 7047     		bx	lr
 1099              		.cfi_endproc
 1100              	.LFE122:
 1102 0016 00BF     		.section	.text.CAN_MessagePending,"ax",%progbits
 1103              		.align	2
 1104              		.global	CAN_MessagePending
 1105              		.thumb
 1106              		.thumb_func
 1108              	CAN_MessagePending:
 1109              	.LFB123:
 811:../stdperiph/source/stm32f37x_can.c ****   uint8_t message_pending=0;
 1110              		.loc 1 811 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
 1115              	.LVL60:
 816:../stdperiph/source/stm32f37x_can.c ****   {
 1116              		.loc 1 816 0
 1117 0000 19B9     		cbnz	r1, .L94
 818:../stdperiph/source/stm32f37x_can.c ****   }
 1118              		.loc 1 818 0
 1119 0002 C068     		ldr	r0, [r0, #12]
 1120              	.LVL61:
 1121 0004 00F00300 		and	r0, r0, #3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 53


 1122              	.LVL62:
 1123 0008 7047     		bx	lr
 1124              	.LVL63:
 1125              	.L94:
 820:../stdperiph/source/stm32f37x_can.c ****   {
 1126              		.loc 1 820 0
 1127 000a 0129     		cmp	r1, #1
 1128 000c 03D1     		bne	.L96
 822:../stdperiph/source/stm32f37x_can.c ****   }
 1129              		.loc 1 822 0
 1130 000e 0069     		ldr	r0, [r0, #16]
 1131              	.LVL64:
 1132 0010 00F00300 		and	r0, r0, #3
 1133              	.LVL65:
 1134 0014 7047     		bx	lr
 1135              	.LVL66:
 1136              	.L96:
 826:../stdperiph/source/stm32f37x_can.c ****   }
 1137              		.loc 1 826 0
 1138 0016 0020     		movs	r0, #0
 1139              	.LVL67:
 829:../stdperiph/source/stm32f37x_can.c **** /**
 1140              		.loc 1 829 0
 1141 0018 7047     		bx	lr
 1142              		.cfi_endproc
 1143              	.LFE123:
 1145 001a 00BF     		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1146              		.align	2
 1147              		.global	CAN_OperatingModeRequest
 1148              		.thumb
 1149              		.thumb_func
 1151              	CAN_OperatingModeRequest:
 1152              	.LFB124:
 861:../stdperiph/source/stm32f37x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1153              		.loc 1 861 0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 0
 1156              		@ frame_needed = 0, uses_anonymous_args = 0
 1157              		@ link register save eliminated.
 1158              	.LVL68:
 871:../stdperiph/source/stm32f37x_can.c ****   {
 1159              		.loc 1 871 0
 1160 0000 B9B9     		cbnz	r1, .L98
 874:../stdperiph/source/stm32f37x_can.c **** 
 1161              		.loc 1 874 0
 1162 0002 0368     		ldr	r3, [r0]
 1163 0004 23F00303 		bic	r3, r3, #3
 1164 0008 43F00103 		orr	r3, r3, #1
 1165 000c 0360     		str	r3, [r0]
 865:../stdperiph/source/stm32f37x_can.c **** 
 1166              		.loc 1 865 0
 1167 000e 4FF6FF72 		movw	r2, #65535
 877:../stdperiph/source/stm32f37x_can.c ****     {
 1168              		.loc 1 877 0
 1169 0012 00E0     		b	.L99
 1170              	.LVL69:
 1171              	.L101:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 54


 879:../stdperiph/source/stm32f37x_can.c ****     }
 1172              		.loc 1 879 0
 1173 0014 013A     		subs	r2, r2, #1
 1174              	.LVL70:
 1175              	.L99:
 877:../stdperiph/source/stm32f37x_can.c ****     {
 1176              		.loc 1 877 0
 1177 0016 4368     		ldr	r3, [r0, #4]
 1178 0018 03F00303 		and	r3, r3, #3
 1179 001c 012B     		cmp	r3, #1
 1180 001e 01D0     		beq	.L100
 877:../stdperiph/source/stm32f37x_can.c ****     {
 1181              		.loc 1 877 0 is_stmt 0 discriminator 1
 1182 0020 002A     		cmp	r2, #0
 1183 0022 F7D1     		bne	.L101
 1184              	.L100:
 881:../stdperiph/source/stm32f37x_can.c ****     {
 1185              		.loc 1 881 0 is_stmt 1
 1186 0024 4368     		ldr	r3, [r0, #4]
 1187 0026 03F00303 		and	r3, r3, #3
 1188 002a 012B     		cmp	r3, #1
 1189 002c 31D0     		beq	.L110
 883:../stdperiph/source/stm32f37x_can.c ****     }
 1190              		.loc 1 883 0
 1191 002e 0020     		movs	r0, #0
 1192              	.LVL71:
 1193 0030 7047     		bx	lr
 1194              	.LVL72:
 1195              	.L98:
 890:../stdperiph/source/stm32f37x_can.c ****   {
 1196              		.loc 1 890 0
 1197 0032 0129     		cmp	r1, #1
 1198 0034 13D1     		bne	.L103
 893:../stdperiph/source/stm32f37x_can.c **** 
 1199              		.loc 1 893 0
 1200 0036 0368     		ldr	r3, [r0]
 1201 0038 23F00303 		bic	r3, r3, #3
 1202 003c 0360     		str	r3, [r0]
 865:../stdperiph/source/stm32f37x_can.c **** 
 1203              		.loc 1 865 0
 1204 003e 4FF6FF73 		movw	r3, #65535
 896:../stdperiph/source/stm32f37x_can.c ****     {
 1205              		.loc 1 896 0
 1206 0042 00E0     		b	.L104
 1207              	.LVL73:
 1208              	.L106:
 898:../stdperiph/source/stm32f37x_can.c ****     }
 1209              		.loc 1 898 0
 1210 0044 013B     		subs	r3, r3, #1
 1211              	.LVL74:
 1212              	.L104:
 896:../stdperiph/source/stm32f37x_can.c ****     {
 1213              		.loc 1 896 0
 1214 0046 4268     		ldr	r2, [r0, #4]
 1215 0048 12F0030F 		tst	r2, #3
 1216 004c 01D0     		beq	.L105
 896:../stdperiph/source/stm32f37x_can.c ****     {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 55


 1217              		.loc 1 896 0 is_stmt 0 discriminator 1
 1218 004e 002B     		cmp	r3, #0
 1219 0050 F8D1     		bne	.L106
 1220              	.L105:
 900:../stdperiph/source/stm32f37x_can.c ****     {
 1221              		.loc 1 900 0 is_stmt 1
 1222 0052 4368     		ldr	r3, [r0, #4]
 1223              	.LVL75:
 1224 0054 13F0030F 		tst	r3, #3
 1225 0058 1DD0     		beq	.L111
 902:../stdperiph/source/stm32f37x_can.c ****     }
 1226              		.loc 1 902 0
 1227 005a 0020     		movs	r0, #0
 1228              	.LVL76:
 1229 005c 7047     		bx	lr
 1230              	.LVL77:
 1231              	.L103:
 909:../stdperiph/source/stm32f37x_can.c ****   {
 1232              		.loc 1 909 0
 1233 005e 0229     		cmp	r1, #2
 1234 0060 1BD1     		bne	.L112
 912:../stdperiph/source/stm32f37x_can.c **** 
 1235              		.loc 1 912 0
 1236 0062 0368     		ldr	r3, [r0]
 1237 0064 23F00303 		bic	r3, r3, #3
 1238 0068 43F00203 		orr	r3, r3, #2
 1239 006c 0360     		str	r3, [r0]
 865:../stdperiph/source/stm32f37x_can.c **** 
 1240              		.loc 1 865 0
 1241 006e 4FF6FF72 		movw	r2, #65535
 915:../stdperiph/source/stm32f37x_can.c ****     {
 1242              		.loc 1 915 0
 1243 0072 00E0     		b	.L107
 1244              	.LVL78:
 1245              	.L109:
 917:../stdperiph/source/stm32f37x_can.c ****     }
 1246              		.loc 1 917 0
 1247 0074 013A     		subs	r2, r2, #1
 1248              	.LVL79:
 1249              	.L107:
 915:../stdperiph/source/stm32f37x_can.c ****     {
 1250              		.loc 1 915 0
 1251 0076 4368     		ldr	r3, [r0, #4]
 1252 0078 03F00303 		and	r3, r3, #3
 1253 007c 022B     		cmp	r3, #2
 1254 007e 01D0     		beq	.L108
 915:../stdperiph/source/stm32f37x_can.c ****     {
 1255              		.loc 1 915 0 is_stmt 0 discriminator 1
 1256 0080 002A     		cmp	r2, #0
 1257 0082 F7D1     		bne	.L109
 1258              	.L108:
 919:../stdperiph/source/stm32f37x_can.c ****     {
 1259              		.loc 1 919 0 is_stmt 1
 1260 0084 4368     		ldr	r3, [r0, #4]
 1261 0086 03F00303 		and	r3, r3, #3
 1262 008a 022B     		cmp	r3, #2
 1263 008c 07D0     		beq	.L113
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 56


 921:../stdperiph/source/stm32f37x_can.c ****     }
 1264              		.loc 1 921 0
 1265 008e 0020     		movs	r0, #0
 1266              	.LVL80:
 1267 0090 7047     		bx	lr
 1268              	.LVL81:
 1269              	.L110:
 887:../stdperiph/source/stm32f37x_can.c ****     }
 1270              		.loc 1 887 0
 1271 0092 0120     		movs	r0, #1
 1272              	.LVL82:
 1273 0094 7047     		bx	lr
 1274              	.LVL83:
 1275              	.L111:
 906:../stdperiph/source/stm32f37x_can.c ****     }
 1276              		.loc 1 906 0
 1277 0096 0120     		movs	r0, #1
 1278              	.LVL84:
 1279 0098 7047     		bx	lr
 1280              	.LVL85:
 1281              	.L112:
 930:../stdperiph/source/stm32f37x_can.c ****   }
 1282              		.loc 1 930 0
 1283 009a 0020     		movs	r0, #0
 1284              	.LVL86:
 1285 009c 7047     		bx	lr
 1286              	.LVL87:
 1287              	.L113:
 925:../stdperiph/source/stm32f37x_can.c ****     }
 1288              		.loc 1 925 0
 1289 009e 0120     		movs	r0, #1
 1290              	.LVL88:
 934:../stdperiph/source/stm32f37x_can.c **** 
 1291              		.loc 1 934 0
 1292 00a0 7047     		bx	lr
 1293              		.cfi_endproc
 1294              	.LFE124:
 1296 00a2 00BF     		.section	.text.CAN_Sleep,"ax",%progbits
 1297              		.align	2
 1298              		.global	CAN_Sleep
 1299              		.thumb
 1300              		.thumb_func
 1302              	CAN_Sleep:
 1303              	.LFB125:
 942:../stdperiph/source/stm32f37x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1304              		.loc 1 942 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309              	.LVL89:
 949:../stdperiph/source/stm32f37x_can.c ****    
 1310              		.loc 1 949 0
 1311 0000 0368     		ldr	r3, [r0]
 1312 0002 23F00303 		bic	r3, r3, #3
 1313 0006 43F00203 		orr	r3, r3, #2
 1314 000a 0360     		str	r3, [r0]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 57


 952:../stdperiph/source/stm32f37x_can.c ****   {
 1315              		.loc 1 952 0
 1316 000c 4368     		ldr	r3, [r0, #4]
 1317 000e 03F00303 		and	r3, r3, #3
 1318 0012 022B     		cmp	r3, #2
 1319 0014 01D0     		beq	.L116
 943:../stdperiph/source/stm32f37x_can.c ****   
 1320              		.loc 1 943 0
 1321 0016 0020     		movs	r0, #0
 1322              	.LVL90:
 1323 0018 7047     		bx	lr
 1324              	.LVL91:
 1325              	.L116:
 955:../stdperiph/source/stm32f37x_can.c ****   }
 1326              		.loc 1 955 0
 1327 001a 0120     		movs	r0, #1
 1328              	.LVL92:
 959:../stdperiph/source/stm32f37x_can.c **** 
 1329              		.loc 1 959 0
 1330 001c 7047     		bx	lr
 1331              		.cfi_endproc
 1332              	.LFE125:
 1334 001e 00BF     		.section	.text.CAN_WakeUp,"ax",%progbits
 1335              		.align	2
 1336              		.global	CAN_WakeUp
 1337              		.thumb
 1338              		.thumb_func
 1340              	CAN_WakeUp:
 1341              	.LFB126:
 967:../stdperiph/source/stm32f37x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1342              		.loc 1 967 0
 1343              		.cfi_startproc
 1344              		@ args = 0, pretend = 0, frame = 0
 1345              		@ frame_needed = 0, uses_anonymous_args = 0
 1346              		@ link register save eliminated.
 1347              	.LVL93:
 975:../stdperiph/source/stm32f37x_can.c ****     
 1348              		.loc 1 975 0
 1349 0000 0368     		ldr	r3, [r0]
 1350 0002 23F00203 		bic	r3, r3, #2
 1351 0006 0360     		str	r3, [r0]
 968:../stdperiph/source/stm32f37x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1352              		.loc 1 968 0
 1353 0008 4FF6FF73 		movw	r3, #65535
 978:../stdperiph/source/stm32f37x_can.c ****   {
 1354              		.loc 1 978 0
 1355 000c 00E0     		b	.L118
 1356              	.LVL94:
 1357              	.L120:
 980:../stdperiph/source/stm32f37x_can.c ****   }
 1358              		.loc 1 980 0
 1359 000e 013B     		subs	r3, r3, #1
 1360              	.LVL95:
 1361              	.L118:
 978:../stdperiph/source/stm32f37x_can.c ****   {
 1362              		.loc 1 978 0
 1363 0010 4268     		ldr	r2, [r0, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 58


 1364 0012 12F0020F 		tst	r2, #2
 1365 0016 01D0     		beq	.L119
 978:../stdperiph/source/stm32f37x_can.c ****   {
 1366              		.loc 1 978 0 is_stmt 0 discriminator 1
 1367 0018 002B     		cmp	r3, #0
 1368 001a F8D1     		bne	.L120
 1369              	.L119:
 982:../stdperiph/source/stm32f37x_can.c ****   {
 1370              		.loc 1 982 0 is_stmt 1
 1371 001c 4368     		ldr	r3, [r0, #4]
 1372              	.LVL96:
 1373 001e 13F0020F 		tst	r3, #2
 1374 0022 01D0     		beq	.L122
 969:../stdperiph/source/stm32f37x_can.c ****   
 1375              		.loc 1 969 0
 1376 0024 0020     		movs	r0, #0
 1377              	.LVL97:
 1378 0026 7047     		bx	lr
 1379              	.LVL98:
 1380              	.L122:
 985:../stdperiph/source/stm32f37x_can.c ****   }
 1381              		.loc 1 985 0
 1382 0028 0120     		movs	r0, #1
 1383              	.LVL99:
 989:../stdperiph/source/stm32f37x_can.c **** /**
 1384              		.loc 1 989 0
 1385 002a 7047     		bx	lr
 1386              		.cfi_endproc
 1387              	.LFE126:
 1389              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1390              		.align	2
 1391              		.global	CAN_GetLastErrorCode
 1392              		.thumb
 1393              		.thumb_func
 1395              	CAN_GetLastErrorCode:
 1396              	.LFB127:
1029:../stdperiph/source/stm32f37x_can.c ****   uint8_t errorcode=0;
 1397              		.loc 1 1029 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402              	.LVL100:
1036:../stdperiph/source/stm32f37x_can.c ****   
 1403              		.loc 1 1036 0
 1404 0000 8069     		ldr	r0, [r0, #24]
 1405              	.LVL101:
1040:../stdperiph/source/stm32f37x_can.c **** 
 1406              		.loc 1 1040 0
 1407 0002 00F07000 		and	r0, r0, #112
 1408              	.LVL102:
 1409 0006 7047     		bx	lr
 1410              		.cfi_endproc
 1411              	.LFE127:
 1413              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1414              		.align	2
 1415              		.global	CAN_GetReceiveErrorCounter
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 59


 1416              		.thumb
 1417              		.thumb_func
 1419              	CAN_GetReceiveErrorCounter:
 1420              	.LFB128:
1054:../stdperiph/source/stm32f37x_can.c ****   uint8_t counter=0;
 1421              		.loc 1 1054 0
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 0
 1424              		@ frame_needed = 0, uses_anonymous_args = 0
 1425              		@ link register save eliminated.
 1426              	.LVL103:
1061:../stdperiph/source/stm32f37x_can.c ****   
 1427              		.loc 1 1061 0
 1428 0000 8069     		ldr	r0, [r0, #24]
 1429              	.LVL104:
1065:../stdperiph/source/stm32f37x_can.c **** 
 1430              		.loc 1 1065 0
 1431 0002 000E     		lsrs	r0, r0, #24
 1432              	.LVL105:
 1433 0004 7047     		bx	lr
 1434              		.cfi_endproc
 1435              	.LFE128:
 1437 0006 00BF     		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1438              		.align	2
 1439              		.global	CAN_GetLSBTransmitErrorCounter
 1440              		.thumb
 1441              		.thumb_func
 1443              	CAN_GetLSBTransmitErrorCounter:
 1444              	.LFB129:
1074:../stdperiph/source/stm32f37x_can.c ****   uint8_t counter=0;
 1445              		.loc 1 1074 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 1449              		@ link register save eliminated.
 1450              	.LVL106:
1081:../stdperiph/source/stm32f37x_can.c ****   
 1451              		.loc 1 1081 0
 1452 0000 8069     		ldr	r0, [r0, #24]
 1453              	.LVL107:
1085:../stdperiph/source/stm32f37x_can.c **** /**
 1454              		.loc 1 1085 0
 1455 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1456              	.LVL108:
 1457 0006 7047     		bx	lr
 1458              		.cfi_endproc
 1459              	.LFE129:
 1461              		.section	.text.CAN_ITConfig,"ax",%progbits
 1462              		.align	2
 1463              		.global	CAN_ITConfig
 1464              		.thumb
 1465              		.thumb_func
 1467              	CAN_ITConfig:
 1468              	.LFB130:
1259:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 1469              		.loc 1 1259 0
 1470              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 60


 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 1473              		@ link register save eliminated.
 1474              	.LVL109:
1265:../stdperiph/source/stm32f37x_can.c ****   {
 1475              		.loc 1 1265 0
 1476 0000 1AB1     		cbz	r2, .L127
1268:../stdperiph/source/stm32f37x_can.c ****   }
 1477              		.loc 1 1268 0
 1478 0002 4369     		ldr	r3, [r0, #20]
 1479 0004 1943     		orrs	r1, r1, r3
 1480              	.LVL110:
 1481 0006 4161     		str	r1, [r0, #20]
 1482 0008 7047     		bx	lr
 1483              	.LVL111:
 1484              	.L127:
1273:../stdperiph/source/stm32f37x_can.c ****   }
 1485              		.loc 1 1273 0
 1486 000a 4369     		ldr	r3, [r0, #20]
 1487 000c 23EA0101 		bic	r1, r3, r1
 1488              	.LVL112:
 1489 0010 4161     		str	r1, [r0, #20]
 1490 0012 7047     		bx	lr
 1491              		.cfi_endproc
 1492              	.LFE130:
 1494              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1495              		.align	2
 1496              		.global	CAN_GetFlagStatus
 1497              		.thumb
 1498              		.thumb_func
 1500              	CAN_GetFlagStatus:
 1501              	.LFB131:
1299:../stdperiph/source/stm32f37x_can.c ****   FlagStatus bitstatus = RESET;
 1502              		.loc 1 1299 0
 1503              		.cfi_startproc
 1504              		@ args = 0, pretend = 0, frame = 0
 1505              		@ frame_needed = 0, uses_anonymous_args = 0
 1506              		@ link register save eliminated.
 1507              	.LVL113:
1307:../stdperiph/source/stm32f37x_can.c ****   { 
 1508              		.loc 1 1307 0
 1509 0000 11F4700F 		tst	r1, #15728640
 1510 0004 06D0     		beq	.L130
1310:../stdperiph/source/stm32f37x_can.c ****     { 
 1511              		.loc 1 1310 0
 1512 0006 8369     		ldr	r3, [r0, #24]
 1513 0008 1940     		ands	r1, r1, r3
 1514              	.LVL114:
 1515 000a C1F31301 		ubfx	r1, r1, #0, #20
 1516 000e 31B3     		cbz	r1, .L135
1313:../stdperiph/source/stm32f37x_can.c ****     }
 1517              		.loc 1 1313 0
 1518 0010 0120     		movs	r0, #1
 1519              	.LVL115:
 1520 0012 7047     		bx	lr
 1521              	.LVL116:
 1522              	.L130:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 61


1321:../stdperiph/source/stm32f37x_can.c ****   { 
 1523              		.loc 1 1321 0
 1524 0014 11F0807F 		tst	r1, #16777216
 1525 0018 06D0     		beq	.L132
1324:../stdperiph/source/stm32f37x_can.c ****     { 
 1526              		.loc 1 1324 0
 1527 001a 4368     		ldr	r3, [r0, #4]
 1528 001c 1940     		ands	r1, r1, r3
 1529              	.LVL117:
 1530 001e C1F31301 		ubfx	r1, r1, #0, #20
 1531 0022 F1B1     		cbz	r1, .L136
1327:../stdperiph/source/stm32f37x_can.c ****     }
 1532              		.loc 1 1327 0
 1533 0024 0120     		movs	r0, #1
 1534              	.LVL118:
 1535 0026 7047     		bx	lr
 1536              	.LVL119:
 1537              	.L132:
1335:../stdperiph/source/stm32f37x_can.c ****   { 
 1538              		.loc 1 1335 0
 1539 0028 11F0006F 		tst	r1, #134217728
 1540 002c 06D0     		beq	.L133
1338:../stdperiph/source/stm32f37x_can.c ****     { 
 1541              		.loc 1 1338 0
 1542 002e 8368     		ldr	r3, [r0, #8]
 1543 0030 1940     		ands	r1, r1, r3
 1544              	.LVL120:
 1545 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1546 0036 B1B1     		cbz	r1, .L137
1341:../stdperiph/source/stm32f37x_can.c ****     }
 1547              		.loc 1 1341 0
 1548 0038 0120     		movs	r0, #1
 1549              	.LVL121:
 1550 003a 7047     		bx	lr
 1551              	.LVL122:
 1552              	.L133:
1349:../stdperiph/source/stm32f37x_can.c ****   { 
 1553              		.loc 1 1349 0
 1554 003c 11F0007F 		tst	r1, #33554432
 1555 0040 06D0     		beq	.L134
1352:../stdperiph/source/stm32f37x_can.c ****     { 
 1556              		.loc 1 1352 0
 1557 0042 C368     		ldr	r3, [r0, #12]
 1558 0044 1940     		ands	r1, r1, r3
 1559              	.LVL123:
 1560 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1561 004a 71B1     		cbz	r1, .L138
1355:../stdperiph/source/stm32f37x_can.c ****     }
 1562              		.loc 1 1355 0
 1563 004c 0120     		movs	r0, #1
 1564              	.LVL124:
 1565 004e 7047     		bx	lr
 1566              	.LVL125:
 1567              	.L134:
1366:../stdperiph/source/stm32f37x_can.c ****     { 
 1568              		.loc 1 1366 0
 1569 0050 0369     		ldr	r3, [r0, #16]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 62


 1570 0052 1940     		ands	r1, r1, r3
 1571              	.LVL126:
 1572 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1573 0058 49B1     		cbz	r1, .L139
1369:../stdperiph/source/stm32f37x_can.c ****     }
 1574              		.loc 1 1369 0
 1575 005a 0120     		movs	r0, #1
 1576              	.LVL127:
 1577 005c 7047     		bx	lr
 1578              	.LVL128:
 1579              	.L135:
1318:../stdperiph/source/stm32f37x_can.c ****     }
 1580              		.loc 1 1318 0
 1581 005e 0020     		movs	r0, #0
 1582              	.LVL129:
 1583 0060 7047     		bx	lr
 1584              	.LVL130:
 1585              	.L136:
1332:../stdperiph/source/stm32f37x_can.c ****     }
 1586              		.loc 1 1332 0
 1587 0062 0020     		movs	r0, #0
 1588              	.LVL131:
 1589 0064 7047     		bx	lr
 1590              	.LVL132:
 1591              	.L137:
1346:../stdperiph/source/stm32f37x_can.c ****     }
 1592              		.loc 1 1346 0
 1593 0066 0020     		movs	r0, #0
 1594              	.LVL133:
 1595 0068 7047     		bx	lr
 1596              	.LVL134:
 1597              	.L138:
1360:../stdperiph/source/stm32f37x_can.c ****     }
 1598              		.loc 1 1360 0
 1599 006a 0020     		movs	r0, #0
 1600              	.LVL135:
 1601 006c 7047     		bx	lr
 1602              	.LVL136:
 1603              	.L139:
1374:../stdperiph/source/stm32f37x_can.c ****     }
 1604              		.loc 1 1374 0
 1605 006e 0020     		movs	r0, #0
 1606              	.LVL137:
1379:../stdperiph/source/stm32f37x_can.c **** 
 1607              		.loc 1 1379 0
 1608 0070 7047     		bx	lr
 1609              		.cfi_endproc
 1610              	.LFE131:
 1612 0072 00BF     		.section	.text.CAN_ClearFlag,"ax",%progbits
 1613              		.align	2
 1614              		.global	CAN_ClearFlag
 1615              		.thumb
 1616              		.thumb_func
 1618              	CAN_ClearFlag:
 1619              	.LFB132:
1399:../stdperiph/source/stm32f37x_can.c ****   uint32_t flagtmp=0;
 1620              		.loc 1 1399 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 63


 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625              	.LVL138:
1405:../stdperiph/source/stm32f37x_can.c ****   {
 1626              		.loc 1 1405 0
 1627 0000 0C4B     		ldr	r3, .L146
 1628 0002 9942     		cmp	r1, r3
 1629 0004 02D1     		bne	.L141
1408:../stdperiph/source/stm32f37x_can.c ****   }
 1630              		.loc 1 1408 0
 1631 0006 0023     		movs	r3, #0
 1632 0008 8361     		str	r3, [r0, #24]
 1633 000a 7047     		bx	lr
 1634              	.L141:
1412:../stdperiph/source/stm32f37x_can.c **** 
 1635              		.loc 1 1412 0
 1636 000c C1F31303 		ubfx	r3, r1, #0, #20
 1637              	.LVL139:
1414:../stdperiph/source/stm32f37x_can.c ****     {
 1638              		.loc 1 1414 0
 1639 0010 11F0007F 		tst	r1, #33554432
 1640 0014 01D0     		beq	.L143
1417:../stdperiph/source/stm32f37x_can.c ****     }
 1641              		.loc 1 1417 0
 1642 0016 C360     		str	r3, [r0, #12]
 1643 0018 7047     		bx	lr
 1644              	.L143:
1419:../stdperiph/source/stm32f37x_can.c ****     {
 1645              		.loc 1 1419 0
 1646 001a 11F0806F 		tst	r1, #67108864
 1647 001e 01D0     		beq	.L144
1422:../stdperiph/source/stm32f37x_can.c ****     }
 1648              		.loc 1 1422 0
 1649 0020 0361     		str	r3, [r0, #16]
 1650 0022 7047     		bx	lr
 1651              	.L144:
1424:../stdperiph/source/stm32f37x_can.c ****     {
 1652              		.loc 1 1424 0
 1653 0024 11F0006F 		tst	r1, #134217728
 1654 0028 01D0     		beq	.L145
1427:../stdperiph/source/stm32f37x_can.c ****     }
 1655              		.loc 1 1427 0
 1656 002a 8360     		str	r3, [r0, #8]
 1657 002c 7047     		bx	lr
 1658              	.L145:
1432:../stdperiph/source/stm32f37x_can.c ****     }
 1659              		.loc 1 1432 0
 1660 002e 4360     		str	r3, [r0, #4]
 1661 0030 7047     		bx	lr
 1662              	.L147:
 1663 0032 00BF     		.align	2
 1664              	.L146:
 1665 0034 7000F030 		.word	821035120
 1666              		.cfi_endproc
 1667              	.LFE132:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 64


 1669              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1670              		.align	2
 1671              		.global	CAN_GetITStatus
 1672              		.thumb
 1673              		.thumb_func
 1675              	CAN_GetITStatus:
 1676              	.LFB133:
1459:../stdperiph/source/stm32f37x_can.c ****   ITStatus itstatus = RESET;
 1677              		.loc 1 1459 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 0
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 1681              	.LVL140:
 1682 0000 08B5     		push	{r3, lr}
 1683              	.LCFI7:
 1684              		.cfi_def_cfa_offset 8
 1685              		.cfi_offset 3, -8
 1686              		.cfi_offset 14, -4
 1687              	.LVL141:
1466:../stdperiph/source/stm32f37x_can.c ****  {
 1688              		.loc 1 1466 0
 1689 0002 4369     		ldr	r3, [r0, #20]
 1690 0004 0B42     		tst	r3, r1
 1691 0006 6FD0     		beq	.L167
1469:../stdperiph/source/stm32f37x_can.c ****     {
 1692              		.loc 1 1469 0
 1693 0008 4029     		cmp	r1, #64
 1694 000a 45D0     		beq	.L150
 1695 000c 0ED8     		bhi	.L151
 1696 000e 0429     		cmp	r1, #4
 1697 0010 2ED0     		beq	.L152
 1698 0012 04D8     		bhi	.L153
 1699 0014 0129     		cmp	r1, #1
 1700 0016 21D0     		beq	.L154
 1701 0018 0229     		cmp	r1, #2
 1702 001a 24D0     		beq	.L155
 1703 001c 66E0     		b	.L168
 1704              	.L153:
 1705 001e 1029     		cmp	r1, #16
 1706 0020 30D0     		beq	.L156
 1707 0022 2029     		cmp	r1, #32
 1708 0024 33D0     		beq	.L157
 1709 0026 0829     		cmp	r1, #8
 1710 0028 60D1     		bne	.L168
 1711 002a 26E0     		b	.L158
 1712              	.L151:
 1713 002c B1F5006F 		cmp	r1, #2048
 1714 0030 50D0     		beq	.L159
 1715 0032 09D8     		bhi	.L160
 1716 0034 B1F5007F 		cmp	r1, #512
 1717 0038 42D0     		beq	.L161
 1718 003a B1F5806F 		cmp	r1, #1024
 1719 003e 44D0     		beq	.L162
 1720 0040 B1F5807F 		cmp	r1, #256
 1721 0044 52D1     		bne	.L168
 1722 0046 36E0     		b	.L163
 1723              	.L160:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 65


 1724 0048 B1F5803F 		cmp	r1, #65536
 1725 004c 29D0     		beq	.L164
 1726 004e B1F5003F 		cmp	r1, #131072
 1727 0052 2BD0     		beq	.L165
 1728 0054 B1F5004F 		cmp	r1, #32768
 1729 0058 48D1     		bne	.L168
 1730 005a 40E0     		b	.L166
 1731              	.L154:
1473:../stdperiph/source/stm32f37x_can.c ****         break;
 1732              		.loc 1 1473 0
 1733 005c 8068     		ldr	r0, [r0, #8]
 1734              	.LVL142:
 1735 005e 2449     		ldr	r1, .L170
 1736              	.LVL143:
 1737 0060 FFF7FEFF 		bl	CheckITStatus
 1738              	.LVL144:
1474:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FMP0:
 1739              		.loc 1 1474 0
 1740 0064 08BD     		pop	{r3, pc}
 1741              	.LVL145:
 1742              	.L155:
1477:../stdperiph/source/stm32f37x_can.c ****         break;
 1743              		.loc 1 1477 0
 1744 0066 C068     		ldr	r0, [r0, #12]
 1745              	.LVL146:
 1746 0068 0321     		movs	r1, #3
 1747              	.LVL147:
 1748 006a FFF7FEFF 		bl	CheckITStatus
 1749              	.LVL148:
1478:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FF0:
 1750              		.loc 1 1478 0
 1751 006e 08BD     		pop	{r3, pc}
 1752              	.LVL149:
 1753              	.L152:
1481:../stdperiph/source/stm32f37x_can.c ****         break;
 1754              		.loc 1 1481 0
 1755 0070 C068     		ldr	r0, [r0, #12]
 1756              	.LVL150:
 1757 0072 0821     		movs	r1, #8
 1758              	.LVL151:
 1759 0074 FFF7FEFF 		bl	CheckITStatus
 1760              	.LVL152:
1482:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FOV0:
 1761              		.loc 1 1482 0
 1762 0078 08BD     		pop	{r3, pc}
 1763              	.LVL153:
 1764              	.L158:
1485:../stdperiph/source/stm32f37x_can.c ****         break;
 1765              		.loc 1 1485 0
 1766 007a C068     		ldr	r0, [r0, #12]
 1767              	.LVL154:
 1768 007c 1021     		movs	r1, #16
 1769              	.LVL155:
 1770 007e FFF7FEFF 		bl	CheckITStatus
 1771              	.LVL156:
1486:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FMP1:
 1772              		.loc 1 1486 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 66


 1773 0082 08BD     		pop	{r3, pc}
 1774              	.LVL157:
 1775              	.L156:
1489:../stdperiph/source/stm32f37x_can.c ****         break;
 1776              		.loc 1 1489 0
 1777 0084 0069     		ldr	r0, [r0, #16]
 1778              	.LVL158:
 1779 0086 0321     		movs	r1, #3
 1780              	.LVL159:
 1781 0088 FFF7FEFF 		bl	CheckITStatus
 1782              	.LVL160:
1490:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FF1:
 1783              		.loc 1 1490 0
 1784 008c 08BD     		pop	{r3, pc}
 1785              	.LVL161:
 1786              	.L157:
1493:../stdperiph/source/stm32f37x_can.c ****         break;
 1787              		.loc 1 1493 0
 1788 008e 0069     		ldr	r0, [r0, #16]
 1789              	.LVL162:
 1790 0090 0821     		movs	r1, #8
 1791              	.LVL163:
 1792 0092 FFF7FEFF 		bl	CheckITStatus
 1793              	.LVL164:
1494:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_FOV1:
 1794              		.loc 1 1494 0
 1795 0096 08BD     		pop	{r3, pc}
 1796              	.LVL165:
 1797              	.L150:
1497:../stdperiph/source/stm32f37x_can.c ****         break;
 1798              		.loc 1 1497 0
 1799 0098 0069     		ldr	r0, [r0, #16]
 1800              	.LVL166:
 1801 009a 1021     		movs	r1, #16
 1802              	.LVL167:
 1803 009c FFF7FEFF 		bl	CheckITStatus
 1804              	.LVL168:
1498:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_WKU:
 1805              		.loc 1 1498 0
 1806 00a0 08BD     		pop	{r3, pc}
 1807              	.LVL169:
 1808              	.L164:
1501:../stdperiph/source/stm32f37x_can.c ****         break;
 1809              		.loc 1 1501 0
 1810 00a2 4068     		ldr	r0, [r0, #4]
 1811              	.LVL170:
 1812 00a4 0821     		movs	r1, #8
 1813              	.LVL171:
 1814 00a6 FFF7FEFF 		bl	CheckITStatus
 1815              	.LVL172:
1502:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_SLK:
 1816              		.loc 1 1502 0
 1817 00aa 08BD     		pop	{r3, pc}
 1818              	.LVL173:
 1819              	.L165:
1505:../stdperiph/source/stm32f37x_can.c ****         break;
 1820              		.loc 1 1505 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 67


 1821 00ac 4068     		ldr	r0, [r0, #4]
 1822              	.LVL174:
 1823 00ae 1021     		movs	r1, #16
 1824              	.LVL175:
 1825 00b0 FFF7FEFF 		bl	CheckITStatus
 1826              	.LVL176:
1506:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_EWG:
 1827              		.loc 1 1506 0
 1828 00b4 08BD     		pop	{r3, pc}
 1829              	.LVL177:
 1830              	.L163:
1509:../stdperiph/source/stm32f37x_can.c ****         break;
 1831              		.loc 1 1509 0
 1832 00b6 8069     		ldr	r0, [r0, #24]
 1833              	.LVL178:
 1834 00b8 0121     		movs	r1, #1
 1835              	.LVL179:
 1836 00ba FFF7FEFF 		bl	CheckITStatus
 1837              	.LVL180:
1510:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_EPV:
 1838              		.loc 1 1510 0
 1839 00be 08BD     		pop	{r3, pc}
 1840              	.LVL181:
 1841              	.L161:
1513:../stdperiph/source/stm32f37x_can.c ****         break;
 1842              		.loc 1 1513 0
 1843 00c0 8069     		ldr	r0, [r0, #24]
 1844              	.LVL182:
 1845 00c2 0221     		movs	r1, #2
 1846              	.LVL183:
 1847 00c4 FFF7FEFF 		bl	CheckITStatus
 1848              	.LVL184:
1514:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_BOF:
 1849              		.loc 1 1514 0
 1850 00c8 08BD     		pop	{r3, pc}
 1851              	.LVL185:
 1852              	.L162:
1517:../stdperiph/source/stm32f37x_can.c ****         break;
 1853              		.loc 1 1517 0
 1854 00ca 8069     		ldr	r0, [r0, #24]
 1855              	.LVL186:
 1856 00cc 0421     		movs	r1, #4
 1857              	.LVL187:
 1858 00ce FFF7FEFF 		bl	CheckITStatus
 1859              	.LVL188:
1518:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_LEC:
 1860              		.loc 1 1518 0
 1861 00d2 08BD     		pop	{r3, pc}
 1862              	.LVL189:
 1863              	.L159:
1521:../stdperiph/source/stm32f37x_can.c ****         break;
 1864              		.loc 1 1521 0
 1865 00d4 8069     		ldr	r0, [r0, #24]
 1866              	.LVL190:
 1867 00d6 7021     		movs	r1, #112
 1868              	.LVL191:
 1869 00d8 FFF7FEFF 		bl	CheckITStatus
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 68


 1870              	.LVL192:
1522:../stdperiph/source/stm32f37x_can.c ****       case CAN_IT_ERR:
 1871              		.loc 1 1522 0
 1872 00dc 08BD     		pop	{r3, pc}
 1873              	.LVL193:
 1874              	.L166:
1525:../stdperiph/source/stm32f37x_can.c ****         break;
 1875              		.loc 1 1525 0
 1876 00de 4068     		ldr	r0, [r0, #4]
 1877              	.LVL194:
 1878 00e0 0421     		movs	r1, #4
 1879              	.LVL195:
 1880 00e2 FFF7FEFF 		bl	CheckITStatus
 1881              	.LVL196:
1526:../stdperiph/source/stm32f37x_can.c ****       default:
 1882              		.loc 1 1526 0
 1883 00e6 08BD     		pop	{r3, pc}
 1884              	.LVL197:
 1885              	.L167:
1536:../stdperiph/source/stm32f37x_can.c ****   }
 1886              		.loc 1 1536 0
 1887 00e8 0020     		movs	r0, #0
 1888              	.LVL198:
 1889 00ea 08BD     		pop	{r3, pc}
 1890              	.LVL199:
 1891              	.L168:
1529:../stdperiph/source/stm32f37x_can.c ****         break;
 1892              		.loc 1 1529 0
 1893 00ec 0020     		movs	r0, #0
 1894              	.LVL200:
1541:../stdperiph/source/stm32f37x_can.c **** 
 1895              		.loc 1 1541 0
 1896 00ee 08BD     		pop	{r3, pc}
 1897              	.L171:
 1898              		.align	2
 1899              	.L170:
 1900 00f0 01010100 		.word	65793
 1901              		.cfi_endproc
 1902              	.LFE133:
 1904              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1905              		.align	2
 1906              		.global	CAN_ClearITPendingBit
 1907              		.thumb
 1908              		.thumb_func
 1910              	CAN_ClearITPendingBit:
 1911              	.LFB134:
1563:../stdperiph/source/stm32f37x_can.c ****   /* Check the parameters */
 1912              		.loc 1 1563 0
 1913              		.cfi_startproc
 1914              		@ args = 0, pretend = 0, frame = 0
 1915              		@ frame_needed = 0, uses_anonymous_args = 0
 1916              		@ link register save eliminated.
 1917              	.LVL201:
1568:../stdperiph/source/stm32f37x_can.c ****   {
 1918              		.loc 1 1568 0
 1919 0000 B1F5807F 		cmp	r1, #256
 1920 0004 37D0     		beq	.L174
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 69


 1921 0006 0CD8     		bhi	.L175
 1922 0008 0829     		cmp	r1, #8
 1923 000a 25D0     		beq	.L176
 1924 000c 04D8     		bhi	.L177
 1925 000e 0129     		cmp	r1, #1
 1926 0010 1CD0     		beq	.L178
 1927 0012 0429     		cmp	r1, #4
 1928 0014 1DD0     		beq	.L179
 1929 0016 7047     		bx	lr
 1930              	.L177:
 1931 0018 2029     		cmp	r1, #32
 1932 001a 20D0     		beq	.L180
 1933 001c 4029     		cmp	r1, #64
 1934 001e 21D0     		beq	.L181
 1935 0020 7047     		bx	lr
 1936              	.L175:
 1937 0022 B1F5006F 		cmp	r1, #2048
 1938 0026 2FD0     		beq	.L182
 1939 0028 06D8     		bhi	.L183
 1940 002a B1F5007F 		cmp	r1, #512
 1941 002e 25D0     		beq	.L184
 1942 0030 B1F5806F 		cmp	r1, #1024
 1943 0034 25D0     		beq	.L185
 1944 0036 7047     		bx	lr
 1945              	.L183:
 1946 0038 B1F5803F 		cmp	r1, #65536
 1947 003c 15D0     		beq	.L186
 1948 003e B1F5003F 		cmp	r1, #131072
 1949 0042 15D0     		beq	.L187
 1950 0044 B1F5004F 		cmp	r1, #32768
 1951 0048 27D1     		bne	.L172
 1952 004a 22E0     		b	.L188
 1953              	.L178:
1572:../stdperiph/source/stm32f37x_can.c ****       break;
 1954              		.loc 1 1572 0
 1955 004c 134B     		ldr	r3, .L189
 1956 004e 8360     		str	r3, [r0, #8]
1573:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FF0:
 1957              		.loc 1 1573 0
 1958 0050 7047     		bx	lr
 1959              	.L179:
1576:../stdperiph/source/stm32f37x_can.c ****       break;
 1960              		.loc 1 1576 0
 1961 0052 0823     		movs	r3, #8
 1962 0054 C360     		str	r3, [r0, #12]
1577:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FOV0:
 1963              		.loc 1 1577 0
 1964 0056 7047     		bx	lr
 1965              	.L176:
1580:../stdperiph/source/stm32f37x_can.c ****       break;
 1966              		.loc 1 1580 0
 1967 0058 1023     		movs	r3, #16
 1968 005a C360     		str	r3, [r0, #12]
1581:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FF1:
 1969              		.loc 1 1581 0
 1970 005c 7047     		bx	lr
 1971              	.L180:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 70


1584:../stdperiph/source/stm32f37x_can.c ****       break;
 1972              		.loc 1 1584 0
 1973 005e 0823     		movs	r3, #8
 1974 0060 0361     		str	r3, [r0, #16]
1585:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_FOV1:
 1975              		.loc 1 1585 0
 1976 0062 7047     		bx	lr
 1977              	.L181:
1588:../stdperiph/source/stm32f37x_can.c ****       break;
 1978              		.loc 1 1588 0
 1979 0064 1023     		movs	r3, #16
 1980 0066 0361     		str	r3, [r0, #16]
1589:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_WKU:
 1981              		.loc 1 1589 0
 1982 0068 7047     		bx	lr
 1983              	.L186:
1592:../stdperiph/source/stm32f37x_can.c ****       break;
 1984              		.loc 1 1592 0
 1985 006a 0823     		movs	r3, #8
 1986 006c 4360     		str	r3, [r0, #4]
1593:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_SLK:
 1987              		.loc 1 1593 0
 1988 006e 7047     		bx	lr
 1989              	.L187:
1596:../stdperiph/source/stm32f37x_can.c ****       break;
 1990              		.loc 1 1596 0
 1991 0070 1023     		movs	r3, #16
 1992 0072 4360     		str	r3, [r0, #4]
1597:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_EWG:
 1993              		.loc 1 1597 0
 1994 0074 7047     		bx	lr
 1995              	.L174:
1600:../stdperiph/source/stm32f37x_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 1996              		.loc 1 1600 0
 1997 0076 0423     		movs	r3, #4
 1998 0078 4360     		str	r3, [r0, #4]
1602:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_EPV:
 1999              		.loc 1 1602 0
 2000 007a 7047     		bx	lr
 2001              	.L184:
1605:../stdperiph/source/stm32f37x_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2002              		.loc 1 1605 0
 2003 007c 0423     		movs	r3, #4
 2004 007e 4360     		str	r3, [r0, #4]
1607:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_BOF:
 2005              		.loc 1 1607 0
 2006 0080 7047     		bx	lr
 2007              	.L185:
1610:../stdperiph/source/stm32f37x_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2008              		.loc 1 1610 0
 2009 0082 0423     		movs	r3, #4
 2010 0084 4360     		str	r3, [r0, #4]
1612:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_LEC:
 2011              		.loc 1 1612 0
 2012 0086 7047     		bx	lr
 2013              	.L182:
1615:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 71


 2014              		.loc 1 1615 0
 2015 0088 0023     		movs	r3, #0
 2016 008a 8361     		str	r3, [r0, #24]
1617:../stdperiph/source/stm32f37x_can.c ****       break;
 2017              		.loc 1 1617 0
 2018 008c 0423     		movs	r3, #4
 2019 008e 4360     		str	r3, [r0, #4]
1618:../stdperiph/source/stm32f37x_can.c ****     case CAN_IT_ERR:
 2020              		.loc 1 1618 0
 2021 0090 7047     		bx	lr
 2022              	.L188:
1621:../stdperiph/source/stm32f37x_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2023              		.loc 1 1621 0
 2024 0092 0023     		movs	r3, #0
 2025 0094 8361     		str	r3, [r0, #24]
1623:../stdperiph/source/stm32f37x_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2026              		.loc 1 1623 0
 2027 0096 0423     		movs	r3, #4
 2028 0098 4360     		str	r3, [r0, #4]
 2029              	.L172:
 2030 009a 7047     		bx	lr
 2031              	.L190:
 2032              		.align	2
 2033              	.L189:
 2034 009c 01010100 		.word	65793
 2035              		.cfi_endproc
 2036              	.LFE134:
 2038              		.text
 2039              	.Letext0:
 2040              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 2041              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 2042              		.file 4 "../cmsis/include/stm32f37x.h"
 2043              		.file 5 "../stdperiph/include/stm32f37x_can.h"
 2044              		.file 6 "../cmsis/include/core_cm4.h"
 2045              		.file 7 "../stdperiph/include/stm32f37x_rcc.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 72


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f37x_can.c
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:22     .text.CheckITStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:26     .text.CheckITStatus:00000000 CheckITStatus
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:53     .text.CAN_DeInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:58     .text.CAN_DeInit:00000000 CAN_DeInit
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:90     .text.CAN_DeInit:00000020 $d
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:95     .text.CAN_Init:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:100    .text.CAN_Init:00000000 CAN_Init
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:302    .text.CAN_FilterInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:307    .text.CAN_FilterInit:00000000 CAN_FilterInit
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:464    .text.CAN_FilterInit:000000f0 $d
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:469    .text.CAN_StructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:474    .text.CAN_StructInit:00000000 CAN_StructInit
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:513    .text.CAN_SlaveStartBank:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:518    .text.CAN_SlaveStartBank:00000000 CAN_SlaveStartBank
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:549    .text.CAN_SlaveStartBank:00000038 $d
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:554    .text.CAN_DBGFreeze:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:559    .text.CAN_DBGFreeze:00000000 CAN_DBGFreeze
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:584    .text.CAN_TTComModeCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:589    .text.CAN_TTComModeCmd:00000000 CAN_TTComModeCmd
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:638    .text.CAN_Transmit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:643    .text.CAN_Transmit:00000000 CAN_Transmit
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:805    .text.CAN_TransmitStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:810    .text.CAN_TransmitStatus:00000000 CAN_TransmitStatus
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:912    .text.CAN_TransmitStatus:00000068 $d
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:919    .text.CAN_CancelTransmit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:924    .text.CAN_CancelTransmit:00000000 CAN_CancelTransmit
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:963    .text.CAN_Receive:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:968    .text.CAN_Receive:00000000 CAN_Receive
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1073   .text.CAN_FIFORelease:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1078   .text.CAN_FIFORelease:00000000 CAN_FIFORelease
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1103   .text.CAN_MessagePending:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1108   .text.CAN_MessagePending:00000000 CAN_MessagePending
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1146   .text.CAN_OperatingModeRequest:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1151   .text.CAN_OperatingModeRequest:00000000 CAN_OperatingModeRequest
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1297   .text.CAN_Sleep:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1302   .text.CAN_Sleep:00000000 CAN_Sleep
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1335   .text.CAN_WakeUp:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1340   .text.CAN_WakeUp:00000000 CAN_WakeUp
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1390   .text.CAN_GetLastErrorCode:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1395   .text.CAN_GetLastErrorCode:00000000 CAN_GetLastErrorCode
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1414   .text.CAN_GetReceiveErrorCounter:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1419   .text.CAN_GetReceiveErrorCounter:00000000 CAN_GetReceiveErrorCounter
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1438   .text.CAN_GetLSBTransmitErrorCounter:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1443   .text.CAN_GetLSBTransmitErrorCounter:00000000 CAN_GetLSBTransmitErrorCounter
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1462   .text.CAN_ITConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1467   .text.CAN_ITConfig:00000000 CAN_ITConfig
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1495   .text.CAN_GetFlagStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1500   .text.CAN_GetFlagStatus:00000000 CAN_GetFlagStatus
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1613   .text.CAN_ClearFlag:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1618   .text.CAN_ClearFlag:00000000 CAN_ClearFlag
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1665   .text.CAN_ClearFlag:00000034 $d
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1670   .text.CAN_GetITStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1675   .text.CAN_GetITStatus:00000000 CAN_GetITStatus
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1900   .text.CAN_GetITStatus:000000f0 $d
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1905   .text.CAN_ClearITPendingBit:00000000 $t
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s 			page 73


C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:1910   .text.CAN_ClearITPendingBit:00000000 CAN_ClearITPendingBit
C:\Users\strag\AppData\Local\Temp\ccBUr2Vs.s:2034   .text.CAN_ClearITPendingBit:0000009c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
