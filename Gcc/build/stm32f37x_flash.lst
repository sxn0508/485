ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f37x_flash.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.FLASH_SetLatency,"ax",%progbits
  22              		.align	2
  23              		.global	FLASH_SetLatency
  24              		.thumb
  25              		.thumb_func
  27              	FLASH_SetLatency:
  28              	.LFB111:
  29              		.file 1 "../stdperiph/source/stm32f37x_flash.c"
   1:../stdperiph/source/stm32f37x_flash.c **** /**
   2:../stdperiph/source/stm32f37x_flash.c ****   ******************************************************************************
   3:../stdperiph/source/stm32f37x_flash.c ****   * @file    stm32f37x_flash.c
   4:../stdperiph/source/stm32f37x_flash.c ****   * @author  MCD Application Team
   5:../stdperiph/source/stm32f37x_flash.c ****   * @version V1.0.0
   6:../stdperiph/source/stm32f37x_flash.c ****   * @date    20-September-2012
   7:../stdperiph/source/stm32f37x_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../stdperiph/source/stm32f37x_flash.c ****   *          functionalities of the FLASH peripheral:
   9:../stdperiph/source/stm32f37x_flash.c ****   *            - FLASH Interface configuration
  10:../stdperiph/source/stm32f37x_flash.c ****   *            - FLASH Memory Programming
  11:../stdperiph/source/stm32f37x_flash.c ****   *            - Option Bytes Programming
  12:../stdperiph/source/stm32f37x_flash.c ****   *            - Interrupts and flags management
  13:../stdperiph/source/stm32f37x_flash.c ****   *
  14:../stdperiph/source/stm32f37x_flash.c ****   *  @verbatim
  15:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
  16:../stdperiph/source/stm32f37x_flash.c ****                     ##### How to use this driver #####
  17:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
  18:../stdperiph/source/stm32f37x_flash.c ****     [..] This driver provides functions to configure and program the Flash 
  19:../stdperiph/source/stm32f37x_flash.c ****          memory of all STM32F37x devices. These functions are split in 4 groups
  20:../stdperiph/source/stm32f37x_flash.c ****          (#) FLASH Interface configuration functions: this group includes the 
  21:../stdperiph/source/stm32f37x_flash.c ****              management of following features:
  22:../stdperiph/source/stm32f37x_flash.c ****              (++) Set the latency
  23:../stdperiph/source/stm32f37x_flash.c ****              (++) Enable/Disable the Half Cycle Access
  24:../stdperiph/source/stm32f37x_flash.c ****              (++) Enable/Disable the prefetch buffer
  25:../stdperiph/source/stm32f37x_flash.c **** 
  26:../stdperiph/source/stm32f37x_flash.c ****          (#) FLASH Memory Programming functions: this group includes all needed 
  27:../stdperiph/source/stm32f37x_flash.c ****              functions to erase and program the main memory:
  28:../stdperiph/source/stm32f37x_flash.c ****              (++) Lock and Unlock the Flash interface.
  29:../stdperiph/source/stm32f37x_flash.c ****              (++) Erase function: Erase Page, erase all pages.
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 2


  30:../stdperiph/source/stm32f37x_flash.c ****              (++) Program functions: Half Word and Word write.
  31:../stdperiph/source/stm32f37x_flash.c **** 
  32:../stdperiph/source/stm32f37x_flash.c ****          (#) FLASH Option Bytes Programming functions: this group includes all 
  33:../stdperiph/source/stm32f37x_flash.c ****              needed functions to:
  34:../stdperiph/source/stm32f37x_flash.c ****              (++) Lock and Unlock the Flash Option bytes.
  35:../stdperiph/source/stm32f37x_flash.c ****              (++) Launch the Option Bytes loader
  36:../stdperiph/source/stm32f37x_flash.c ****              (++) Erase the Option Bytes
  37:../stdperiph/source/stm32f37x_flash.c ****              (++) Set/Reset the write protection
  38:../stdperiph/source/stm32f37x_flash.c ****              (++) Set the Read protection Level
  39:../stdperiph/source/stm32f37x_flash.c ****              (++) Program the user option Bytes
  40:../stdperiph/source/stm32f37x_flash.c ****              (++) Set/Reset the BOOT1 bit
  41:../stdperiph/source/stm32f37x_flash.c ****              (++) Enable/Disable the VDDA Analog Monitoring
  42:../stdperiph/source/stm32f37x_flash.c ****              (++) Enable/Disable the VDD_SD12 Analog Monitoring
  43:../stdperiph/source/stm32f37x_flash.c ****              (++) Get the user option bytes
  44:../stdperiph/source/stm32f37x_flash.c ****              (++) Get the Write protection
  45:../stdperiph/source/stm32f37x_flash.c ****              (++) Get the read protection status
  46:../stdperiph/source/stm32f37x_flash.c **** 
  47:../stdperiph/source/stm32f37x_flash.c ****          (#) FLASH Interrupts and flag management functions: this group includes 
  48:../stdperiph/source/stm32f37x_flash.c ****              all needed functions to:
  49:../stdperiph/source/stm32f37x_flash.c ****              (++) Enable/Disable the flash interrupt sources
  50:../stdperiph/source/stm32f37x_flash.c ****              (++) Get flags status
  51:../stdperiph/source/stm32f37x_flash.c ****              (++) Clear flags
  52:../stdperiph/source/stm32f37x_flash.c ****              (++) Get Flash operation status
  53:../stdperiph/source/stm32f37x_flash.c ****              (++) Wait for last flash operation
  54:../stdperiph/source/stm32f37x_flash.c **** 
  55:../stdperiph/source/stm32f37x_flash.c ****  @endverbatim
  56:../stdperiph/source/stm32f37x_flash.c ****   
  57:../stdperiph/source/stm32f37x_flash.c ****   ******************************************************************************
  58:../stdperiph/source/stm32f37x_flash.c ****   * @attention
  59:../stdperiph/source/stm32f37x_flash.c ****   *
  60:../stdperiph/source/stm32f37x_flash.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  61:../stdperiph/source/stm32f37x_flash.c ****   *
  62:../stdperiph/source/stm32f37x_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  63:../stdperiph/source/stm32f37x_flash.c ****   * You may not use this file except in compliance with the License.
  64:../stdperiph/source/stm32f37x_flash.c ****   * You may obtain a copy of the License at:
  65:../stdperiph/source/stm32f37x_flash.c ****   *
  66:../stdperiph/source/stm32f37x_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  67:../stdperiph/source/stm32f37x_flash.c ****   *
  68:../stdperiph/source/stm32f37x_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  69:../stdperiph/source/stm32f37x_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  70:../stdperiph/source/stm32f37x_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  71:../stdperiph/source/stm32f37x_flash.c ****   * See the License for the specific language governing permissions and
  72:../stdperiph/source/stm32f37x_flash.c ****   * limitations under the License.
  73:../stdperiph/source/stm32f37x_flash.c ****   *
  74:../stdperiph/source/stm32f37x_flash.c ****   ******************************************************************************
  75:../stdperiph/source/stm32f37x_flash.c ****   */
  76:../stdperiph/source/stm32f37x_flash.c **** 
  77:../stdperiph/source/stm32f37x_flash.c **** /* Includes ------------------------------------------------------------------*/
  78:../stdperiph/source/stm32f37x_flash.c **** #include "stm32f37x_flash.h"
  79:../stdperiph/source/stm32f37x_flash.c **** 
  80:../stdperiph/source/stm32f37x_flash.c **** /** @addtogroup STM32F37x_StdPeriph_Driver
  81:../stdperiph/source/stm32f37x_flash.c ****   * @{
  82:../stdperiph/source/stm32f37x_flash.c ****   */
  83:../stdperiph/source/stm32f37x_flash.c **** 
  84:../stdperiph/source/stm32f37x_flash.c **** /** @defgroup FLASH 
  85:../stdperiph/source/stm32f37x_flash.c ****   * @brief FLASH driver modules
  86:../stdperiph/source/stm32f37x_flash.c ****   * @{
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 3


  87:../stdperiph/source/stm32f37x_flash.c ****   */ 
  88:../stdperiph/source/stm32f37x_flash.c **** 
  89:../stdperiph/source/stm32f37x_flash.c **** /* Private typedef -----------------------------------------------------------*/
  90:../stdperiph/source/stm32f37x_flash.c **** /* Private define ------------------------------------------------------------*/
  91:../stdperiph/source/stm32f37x_flash.c **** /* Private macro -------------------------------------------------------------*/
  92:../stdperiph/source/stm32f37x_flash.c **** /* Private variables ---------------------------------------------------------*/
  93:../stdperiph/source/stm32f37x_flash.c **** /* Private function prototypes -----------------------------------------------*/
  94:../stdperiph/source/stm32f37x_flash.c **** /* Private functions ---------------------------------------------------------*/
  95:../stdperiph/source/stm32f37x_flash.c **** 
  96:../stdperiph/source/stm32f37x_flash.c **** /** @defgroup FLASH_Private_Functions
  97:../stdperiph/source/stm32f37x_flash.c ****   * @{
  98:../stdperiph/source/stm32f37x_flash.c ****   */ 
  99:../stdperiph/source/stm32f37x_flash.c **** 
 100:../stdperiph/source/stm32f37x_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
 101:../stdperiph/source/stm32f37x_flash.c ****   *  @brief   FLASH Interface configuration functions 
 102:../stdperiph/source/stm32f37x_flash.c ****  *
 103:../stdperiph/source/stm32f37x_flash.c **** @verbatim   
 104:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
 105:../stdperiph/source/stm32f37x_flash.c ****                ##### FLASH Interface configuration functions #####
 106:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
 107:../stdperiph/source/stm32f37x_flash.c **** 
 108:../stdperiph/source/stm32f37x_flash.c ****     [..] FLASH_Interface configuration_Functions, includes the following functions:
 109:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_SetLatency(uint32_t FLASH_Latency):
 110:../stdperiph/source/stm32f37x_flash.c ****     [..] To correctly read data from Flash memory, the number of wait states (LATENCY) 
 111:../stdperiph/source/stm32f37x_flash.c ****      must be correctly programmed according to the frequency of the CPU clock (HCLK) 
 112:../stdperiph/source/stm32f37x_flash.c ****     [..]
 113:../stdperiph/source/stm32f37x_flash.c ****         +------------------------------------------------+
 114:../stdperiph/source/stm32f37x_flash.c ****         |  Wait states   |   HCLK clock frequency (MHz)  |
 115:../stdperiph/source/stm32f37x_flash.c ****         |----------------|-------------------------------|
 116:../stdperiph/source/stm32f37x_flash.c ****         |0WS(1CPU cycle) |       0 < HCLK <= 24          |
 117:../stdperiph/source/stm32f37x_flash.c ****         |----------------|-------------------------------|
 118:../stdperiph/source/stm32f37x_flash.c ****         |1WS(2CPU cycles)|       24 < HCLK <= 48         |
 119:../stdperiph/source/stm32f37x_flash.c ****         |----------------|-------------------------------|
 120:../stdperiph/source/stm32f37x_flash.c ****         |2WS(3CPU cycles)|       48 < HCLK <= 72         |
 121:../stdperiph/source/stm32f37x_flash.c ****         +------------------------------------------------+
 122:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
 123:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState);
 124:../stdperiph/source/stm32f37x_flash.c ****     [..]
 125:../stdperiph/source/stm32f37x_flash.c ****      All these functions don't need the unlock sequence.
 126:../stdperiph/source/stm32f37x_flash.c **** 
 127:../stdperiph/source/stm32f37x_flash.c **** @endverbatim
 128:../stdperiph/source/stm32f37x_flash.c ****   * @{
 129:../stdperiph/source/stm32f37x_flash.c ****   */
 130:../stdperiph/source/stm32f37x_flash.c ****  
 131:../stdperiph/source/stm32f37x_flash.c **** /**
 132:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Sets the code latency value.
 133:../stdperiph/source/stm32f37x_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 134:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 135:../stdperiph/source/stm32f37x_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 136:../stdperiph/source/stm32f37x_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 137:../stdperiph/source/stm32f37x_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles 
 138:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 139:../stdperiph/source/stm32f37x_flash.c ****   */
 140:../stdperiph/source/stm32f37x_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 141:../stdperiph/source/stm32f37x_flash.c **** {
  30              		.loc 1 141 0
  31              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 4


  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LVL0:
 142:../stdperiph/source/stm32f37x_flash.c ****    uint32_t tmpreg = 0;
 143:../stdperiph/source/stm32f37x_flash.c ****   
 144:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 145:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 146:../stdperiph/source/stm32f37x_flash.c ****   
 147:../stdperiph/source/stm32f37x_flash.c ****   /* Read the ACR register */
 148:../stdperiph/source/stm32f37x_flash.c ****   tmpreg = FLASH->ACR;  
  36              		.loc 1 148 0
  37 0000 034A     		ldr	r2, .L2
  38 0002 1368     		ldr	r3, [r2]
  39              	.LVL1:
 149:../stdperiph/source/stm32f37x_flash.c ****   
 150:../stdperiph/source/stm32f37x_flash.c ****   /* Sets the Latency value */
 151:../stdperiph/source/stm32f37x_flash.c ****   tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
  40              		.loc 1 151 0
  41 0004 23F00303 		bic	r3, r3, #3
  42              	.LVL2:
 152:../stdperiph/source/stm32f37x_flash.c ****   tmpreg |= FLASH_Latency;
  43              		.loc 1 152 0
  44 0008 1843     		orrs	r0, r0, r3
  45              	.LVL3:
 153:../stdperiph/source/stm32f37x_flash.c ****   
 154:../stdperiph/source/stm32f37x_flash.c ****   /* Write the ACR register */
 155:../stdperiph/source/stm32f37x_flash.c ****   FLASH->ACR = tmpreg;
  46              		.loc 1 155 0
  47 000a 1060     		str	r0, [r2]
  48 000c 7047     		bx	lr
  49              	.L3:
  50 000e 00BF     		.align	2
  51              	.L2:
  52 0010 00200240 		.word	1073881088
  53              		.cfi_endproc
  54              	.LFE111:
  56              		.section	.text.FLASH_HalfCycleAccessCmd,"ax",%progbits
  57              		.align	2
  58              		.global	FLASH_HalfCycleAccessCmd
  59              		.thumb
  60              		.thumb_func
  62              	FLASH_HalfCycleAccessCmd:
  63              	.LFB112:
 156:../stdperiph/source/stm32f37x_flash.c **** }
 157:../stdperiph/source/stm32f37x_flash.c **** 
 158:../stdperiph/source/stm32f37x_flash.c **** /**
 159:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Enables or disables the Half cycle flash access.
 160:../stdperiph/source/stm32f37x_flash.c ****   * @param  FLASH_HalfCycleAccess: specifies the FLASH Half cycle Access mode.
 161:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 162:../stdperiph/source/stm32f37x_flash.c ****   *            @arg FLASH_HalfCycleAccess_Enable: FLASH Half Cycle Enable
 163:../stdperiph/source/stm32f37x_flash.c ****   *            @arg FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
 164:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 165:../stdperiph/source/stm32f37x_flash.c ****   */
 166:../stdperiph/source/stm32f37x_flash.c **** void FLASH_HalfCycleAccessCmd(FunctionalState NewState)
 167:../stdperiph/source/stm32f37x_flash.c **** {
  64              		.loc 1 167 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 5


  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              	.LVL4:
 168:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 169:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 170:../stdperiph/source/stm32f37x_flash.c ****    
 171:../stdperiph/source/stm32f37x_flash.c ****   if(NewState != DISABLE)
  70              		.loc 1 171 0
  71 0000 28B1     		cbz	r0, .L5
 172:../stdperiph/source/stm32f37x_flash.c ****   {
 173:../stdperiph/source/stm32f37x_flash.c ****     FLASH->ACR |= FLASH_ACR_HLFCYA;
  72              		.loc 1 173 0
  73 0002 064A     		ldr	r2, .L7
  74 0004 1368     		ldr	r3, [r2]
  75 0006 43F00803 		orr	r3, r3, #8
  76 000a 1360     		str	r3, [r2]
  77 000c 7047     		bx	lr
  78              	.L5:
 174:../stdperiph/source/stm32f37x_flash.c ****   }
 175:../stdperiph/source/stm32f37x_flash.c ****   else
 176:../stdperiph/source/stm32f37x_flash.c ****   {
 177:../stdperiph/source/stm32f37x_flash.c ****     FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
  79              		.loc 1 177 0
  80 000e 034A     		ldr	r2, .L7
  81 0010 1368     		ldr	r3, [r2]
  82 0012 23F00803 		bic	r3, r3, #8
  83 0016 1360     		str	r3, [r2]
  84 0018 7047     		bx	lr
  85              	.L8:
  86 001a 00BF     		.align	2
  87              	.L7:
  88 001c 00200240 		.word	1073881088
  89              		.cfi_endproc
  90              	.LFE112:
  92              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  93              		.align	2
  94              		.global	FLASH_PrefetchBufferCmd
  95              		.thumb
  96              		.thumb_func
  98              	FLASH_PrefetchBufferCmd:
  99              	.LFB113:
 178:../stdperiph/source/stm32f37x_flash.c ****   }
 179:../stdperiph/source/stm32f37x_flash.c **** }
 180:../stdperiph/source/stm32f37x_flash.c **** 
 181:../stdperiph/source/stm32f37x_flash.c **** /**
 182:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 183:../stdperiph/source/stm32f37x_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 184:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 185:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 186:../stdperiph/source/stm32f37x_flash.c ****   */
 187:../stdperiph/source/stm32f37x_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 188:../stdperiph/source/stm32f37x_flash.c **** {
 100              		.loc 1 188 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 6


 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              	.LVL5:
 189:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 190:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 191:../stdperiph/source/stm32f37x_flash.c ****    
 192:../stdperiph/source/stm32f37x_flash.c ****   if(NewState != DISABLE)
 106              		.loc 1 192 0
 107 0000 28B1     		cbz	r0, .L10
 193:../stdperiph/source/stm32f37x_flash.c ****   {
 194:../stdperiph/source/stm32f37x_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 108              		.loc 1 194 0
 109 0002 064A     		ldr	r2, .L12
 110 0004 1368     		ldr	r3, [r2]
 111 0006 43F01003 		orr	r3, r3, #16
 112 000a 1360     		str	r3, [r2]
 113 000c 7047     		bx	lr
 114              	.L10:
 195:../stdperiph/source/stm32f37x_flash.c ****   }
 196:../stdperiph/source/stm32f37x_flash.c ****   else
 197:../stdperiph/source/stm32f37x_flash.c ****   {
 198:../stdperiph/source/stm32f37x_flash.c ****     FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 115              		.loc 1 198 0
 116 000e 034A     		ldr	r2, .L12
 117 0010 1368     		ldr	r3, [r2]
 118 0012 23F01003 		bic	r3, r3, #16
 119 0016 1360     		str	r3, [r2]
 120 0018 7047     		bx	lr
 121              	.L13:
 122 001a 00BF     		.align	2
 123              	.L12:
 124 001c 00200240 		.word	1073881088
 125              		.cfi_endproc
 126              	.LFE113:
 128              		.section	.text.FLASH_Unlock,"ax",%progbits
 129              		.align	2
 130              		.global	FLASH_Unlock
 131              		.thumb
 132              		.thumb_func
 134              	FLASH_Unlock:
 135              	.LFB114:
 199:../stdperiph/source/stm32f37x_flash.c ****   }
 200:../stdperiph/source/stm32f37x_flash.c **** }
 201:../stdperiph/source/stm32f37x_flash.c **** 
 202:../stdperiph/source/stm32f37x_flash.c **** /**
 203:../stdperiph/source/stm32f37x_flash.c ****   * @}
 204:../stdperiph/source/stm32f37x_flash.c ****   */
 205:../stdperiph/source/stm32f37x_flash.c **** 
 206:../stdperiph/source/stm32f37x_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 207:../stdperiph/source/stm32f37x_flash.c ****  *  @brief   FLASH Memory Programming functions
 208:../stdperiph/source/stm32f37x_flash.c ****  *
 209:../stdperiph/source/stm32f37x_flash.c **** @verbatim   
 210:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
 211:../stdperiph/source/stm32f37x_flash.c ****                 ##### FLASH Memory Programming functions #####
 212:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
 213:../stdperiph/source/stm32f37x_flash.c **** 
 214:../stdperiph/source/stm32f37x_flash.c ****     [..] The FLASH Memory Programming functions, includes the following functions:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 7


 215:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_Unlock(void);
 216:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_Lock(void);
 217:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_ErasePage(uint32_t Page_Address);
 218:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_EraseAllPages(void);
 219:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
 220:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
 221:../stdperiph/source/stm32f37x_flash.c **** 
 222:../stdperiph/source/stm32f37x_flash.c ****     [..] Any operation of erase or program should follow these steps:
 223:../stdperiph/source/stm32f37x_flash.c ****        
 224:../stdperiph/source/stm32f37x_flash.c ****        (#) Call the FLASH_Unlock() function to enable the flash control register and 
 225:../stdperiph/source/stm32f37x_flash.c ****            program memory access
 226:../stdperiph/source/stm32f37x_flash.c ****        (#) Call the desired function to erase page or program data
 227:../stdperiph/source/stm32f37x_flash.c ****        (#) Call the FLASH_Lock() to disable the flash program memory access 
 228:../stdperiph/source/stm32f37x_flash.c ****       (recommended to protect the FLASH memory against possible unwanted operation)
 229:../stdperiph/source/stm32f37x_flash.c **** 
 230:../stdperiph/source/stm32f37x_flash.c **** @endverbatim
 231:../stdperiph/source/stm32f37x_flash.c ****   * @{
 232:../stdperiph/source/stm32f37x_flash.c ****   */
 233:../stdperiph/source/stm32f37x_flash.c **** /**
 234:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Unlocks the FLASH control register and program memory access.
 235:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
 236:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 237:../stdperiph/source/stm32f37x_flash.c ****   */
 238:../stdperiph/source/stm32f37x_flash.c **** void FLASH_Unlock(void)
 239:../stdperiph/source/stm32f37x_flash.c **** {
 136              		.loc 1 239 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 240:../stdperiph/source/stm32f37x_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 141              		.loc 1 240 0
 142 0000 054B     		ldr	r3, .L16
 143 0002 1B69     		ldr	r3, [r3, #16]
 144 0004 13F0800F 		tst	r3, #128
 145 0008 05D0     		beq	.L14
 241:../stdperiph/source/stm32f37x_flash.c ****   {
 242:../stdperiph/source/stm32f37x_flash.c ****     /* Authorize the FLASH Registers access */
 243:../stdperiph/source/stm32f37x_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 146              		.loc 1 243 0
 147 000a 034B     		ldr	r3, .L16
 148 000c 034A     		ldr	r2, .L16+4
 149 000e 5A60     		str	r2, [r3, #4]
 244:../stdperiph/source/stm32f37x_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 150              		.loc 1 244 0
 151 0010 02F18832 		add	r2, r2, #-2004318072
 152 0014 5A60     		str	r2, [r3, #4]
 153              	.L14:
 154 0016 7047     		bx	lr
 155              	.L17:
 156              		.align	2
 157              	.L16:
 158 0018 00200240 		.word	1073881088
 159 001c 23016745 		.word	1164378403
 160              		.cfi_endproc
 161              	.LFE114:
 163              		.section	.text.FLASH_Lock,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 8


 164              		.align	2
 165              		.global	FLASH_Lock
 166              		.thumb
 167              		.thumb_func
 169              	FLASH_Lock:
 170              	.LFB115:
 245:../stdperiph/source/stm32f37x_flash.c ****   }  
 246:../stdperiph/source/stm32f37x_flash.c **** }
 247:../stdperiph/source/stm32f37x_flash.c **** 
 248:../stdperiph/source/stm32f37x_flash.c **** /**
 249:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Locks the FLASH control register access
 250:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
 251:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 252:../stdperiph/source/stm32f37x_flash.c ****   */
 253:../stdperiph/source/stm32f37x_flash.c **** void FLASH_Lock(void)
 254:../stdperiph/source/stm32f37x_flash.c **** {
 171              		.loc 1 254 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 255:../stdperiph/source/stm32f37x_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 256:../stdperiph/source/stm32f37x_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 176              		.loc 1 256 0
 177 0000 024A     		ldr	r2, .L19
 178 0002 1369     		ldr	r3, [r2, #16]
 179 0004 43F08003 		orr	r3, r3, #128
 180 0008 1361     		str	r3, [r2, #16]
 181 000a 7047     		bx	lr
 182              	.L20:
 183              		.align	2
 184              	.L19:
 185 000c 00200240 		.word	1073881088
 186              		.cfi_endproc
 187              	.LFE115:
 189              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 190              		.align	2
 191              		.global	FLASH_OB_Unlock
 192              		.thumb
 193              		.thumb_func
 195              	FLASH_OB_Unlock:
 196              	.LFB120:
 257:../stdperiph/source/stm32f37x_flash.c **** }
 258:../stdperiph/source/stm32f37x_flash.c **** 
 259:../stdperiph/source/stm32f37x_flash.c **** /**
 260:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Erases a specified page in program memory.
 261:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function must be called before.
 262:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access 
 263:../stdperiph/source/stm32f37x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)  
 264:../stdperiph/source/stm32f37x_flash.c ****   * @param  Page_Address: The page address in program memory to be erased.
 265:../stdperiph/source/stm32f37x_flash.c ****   * @note   A Page is erased in the Program memory only if the address to load 
 266:../stdperiph/source/stm32f37x_flash.c ****   *         is the start address of a page (multiple of 1024 bytes).
 267:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 268:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 269:../stdperiph/source/stm32f37x_flash.c ****   */
 270:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
 271:../stdperiph/source/stm32f37x_flash.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 9


 272:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 273:../stdperiph/source/stm32f37x_flash.c **** 
 274:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 275:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 276:../stdperiph/source/stm32f37x_flash.c ****  
 277:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 278:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 279:../stdperiph/source/stm32f37x_flash.c ****   
 280:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 281:../stdperiph/source/stm32f37x_flash.c ****   { 
 282:../stdperiph/source/stm32f37x_flash.c ****     /* If the previous operation is completed, proceed to erase the page */
 283:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_PER;
 284:../stdperiph/source/stm32f37x_flash.c ****     FLASH->AR  = Page_Address; 
 285:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 286:../stdperiph/source/stm32f37x_flash.c ****     
 287:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 288:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 289:../stdperiph/source/stm32f37x_flash.c ****     
 290:../stdperiph/source/stm32f37x_flash.c ****     /* Disable the PER Bit */
 291:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR &= ~FLASH_CR_PER;
 292:../stdperiph/source/stm32f37x_flash.c ****   }
 293:../stdperiph/source/stm32f37x_flash.c ****     
 294:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Erase Status */
 295:../stdperiph/source/stm32f37x_flash.c ****   return status;
 296:../stdperiph/source/stm32f37x_flash.c **** }
 297:../stdperiph/source/stm32f37x_flash.c **** 
 298:../stdperiph/source/stm32f37x_flash.c **** /**
 299:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Erases all FLASH pages.
 300:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function
 301:../stdperiph/source/stm32f37x_flash.c ****   *         must be called before.
 302:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access 
 303:../stdperiph/source/stm32f37x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 304:../stdperiph/source/stm32f37x_flash.c ****   * @param  None              
 305:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 306:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 307:../stdperiph/source/stm32f37x_flash.c ****   */
 308:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_EraseAllPages(void)
 309:../stdperiph/source/stm32f37x_flash.c **** {
 310:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 311:../stdperiph/source/stm32f37x_flash.c **** 
 312:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 313:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 314:../stdperiph/source/stm32f37x_flash.c ****   
 315:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 316:../stdperiph/source/stm32f37x_flash.c ****   {
 317:../stdperiph/source/stm32f37x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 318:../stdperiph/source/stm32f37x_flash.c ****      FLASH->CR |= FLASH_CR_MER;
 319:../stdperiph/source/stm32f37x_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 320:../stdperiph/source/stm32f37x_flash.c ****     
 321:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 322:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 323:../stdperiph/source/stm32f37x_flash.c **** 
 324:../stdperiph/source/stm32f37x_flash.c ****     /* Disable the MER Bit */
 325:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR &= ~FLASH_CR_MER;
 326:../stdperiph/source/stm32f37x_flash.c ****   }
 327:../stdperiph/source/stm32f37x_flash.c **** 
 328:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Erase Status */
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 10


 329:../stdperiph/source/stm32f37x_flash.c ****   return status;
 330:../stdperiph/source/stm32f37x_flash.c **** }
 331:../stdperiph/source/stm32f37x_flash.c **** 
 332:../stdperiph/source/stm32f37x_flash.c **** /**
 333:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Programs a word at a specified address.
 334:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function must be called before.
 335:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access 
 336:../stdperiph/source/stm32f37x_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)   
 337:../stdperiph/source/stm32f37x_flash.c ****   * @param  Address: specifies the address to be programmed.
 338:../stdperiph/source/stm32f37x_flash.c ****   * @param  Data: specifies the data to be programmed.
 339:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 340:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 341:../stdperiph/source/stm32f37x_flash.c ****   */
 342:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 343:../stdperiph/source/stm32f37x_flash.c **** {
 344:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 345:../stdperiph/source/stm32f37x_flash.c ****   __IO uint32_t tmp = 0;
 346:../stdperiph/source/stm32f37x_flash.c **** 
 347:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 348:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 349:../stdperiph/source/stm32f37x_flash.c **** 
 350:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 351:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 352:../stdperiph/source/stm32f37x_flash.c ****   
 353:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 354:../stdperiph/source/stm32f37x_flash.c ****   {
 355:../stdperiph/source/stm32f37x_flash.c ****     /* If the previous operation is completed, proceed to program the new first 
 356:../stdperiph/source/stm32f37x_flash.c ****     half word */
 357:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 358:../stdperiph/source/stm32f37x_flash.c ****   
 359:../stdperiph/source/stm32f37x_flash.c ****     *(__IO uint16_t*)Address = (uint16_t)Data;
 360:../stdperiph/source/stm32f37x_flash.c ****     
 361:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 362:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 363:../stdperiph/source/stm32f37x_flash.c ****  
 364:../stdperiph/source/stm32f37x_flash.c ****     if(status == FLASH_COMPLETE)
 365:../stdperiph/source/stm32f37x_flash.c ****     {
 366:../stdperiph/source/stm32f37x_flash.c ****       /* If the previous operation is completed, proceed to program the new second 
 367:../stdperiph/source/stm32f37x_flash.c ****       half word */
 368:../stdperiph/source/stm32f37x_flash.c ****       tmp = Address + 2;
 369:../stdperiph/source/stm32f37x_flash.c **** 
 370:../stdperiph/source/stm32f37x_flash.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 371:../stdperiph/source/stm32f37x_flash.c ****     
 372:../stdperiph/source/stm32f37x_flash.c ****       /* Wait for last operation to be completed */
 373:../stdperiph/source/stm32f37x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 374:../stdperiph/source/stm32f37x_flash.c ****         
 375:../stdperiph/source/stm32f37x_flash.c ****       /* Disable the PG Bit */
 376:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_PG;
 377:../stdperiph/source/stm32f37x_flash.c ****     }
 378:../stdperiph/source/stm32f37x_flash.c ****     else
 379:../stdperiph/source/stm32f37x_flash.c ****     {
 380:../stdperiph/source/stm32f37x_flash.c ****       /* Disable the PG Bit */
 381:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_PG;
 382:../stdperiph/source/stm32f37x_flash.c ****     }
 383:../stdperiph/source/stm32f37x_flash.c ****   }
 384:../stdperiph/source/stm32f37x_flash.c ****    
 385:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Program Status */
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 11


 386:../stdperiph/source/stm32f37x_flash.c ****   return status;
 387:../stdperiph/source/stm32f37x_flash.c **** }
 388:../stdperiph/source/stm32f37x_flash.c **** 
 389:../stdperiph/source/stm32f37x_flash.c **** /**
 390:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Programs a half word at a specified address.
 391:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_Unlock() function must be called before.
 392:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_Lock() to disable the flash memory access 
 393:../stdperiph/source/stm32f37x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)   
 394:../stdperiph/source/stm32f37x_flash.c ****   * @param  Address: specifies the address to be programmed.
 395:../stdperiph/source/stm32f37x_flash.c ****   * @param  Data: specifies the data to be programmed.
 396:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 397:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 398:../stdperiph/source/stm32f37x_flash.c ****   */
 399:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 400:../stdperiph/source/stm32f37x_flash.c **** {
 401:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 402:../stdperiph/source/stm32f37x_flash.c **** 
 403:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 404:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 405:../stdperiph/source/stm32f37x_flash.c **** 
 406:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 407:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 408:../stdperiph/source/stm32f37x_flash.c ****   
 409:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 410:../stdperiph/source/stm32f37x_flash.c ****   {
 411:../stdperiph/source/stm32f37x_flash.c ****     /* If the previous operation is completed, proceed to program the new data */
 412:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 413:../stdperiph/source/stm32f37x_flash.c ****   
 414:../stdperiph/source/stm32f37x_flash.c ****     *(__IO uint16_t*)Address = Data;
 415:../stdperiph/source/stm32f37x_flash.c **** 
 416:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 417:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 418:../stdperiph/source/stm32f37x_flash.c ****     
 419:../stdperiph/source/stm32f37x_flash.c ****     /* Disable the PG Bit */
 420:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR &= ~FLASH_CR_PG;
 421:../stdperiph/source/stm32f37x_flash.c ****   } 
 422:../stdperiph/source/stm32f37x_flash.c ****   
 423:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Program Status */
 424:../stdperiph/source/stm32f37x_flash.c ****   return status;
 425:../stdperiph/source/stm32f37x_flash.c **** }
 426:../stdperiph/source/stm32f37x_flash.c **** 
 427:../stdperiph/source/stm32f37x_flash.c **** /**
 428:../stdperiph/source/stm32f37x_flash.c ****   * @}
 429:../stdperiph/source/stm32f37x_flash.c ****   */
 430:../stdperiph/source/stm32f37x_flash.c **** 
 431:../stdperiph/source/stm32f37x_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 432:../stdperiph/source/stm32f37x_flash.c ****  *  @brief   Option Bytes Programming functions 
 433:../stdperiph/source/stm32f37x_flash.c ****  *
 434:../stdperiph/source/stm32f37x_flash.c **** @verbatim   
 435:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
 436:../stdperiph/source/stm32f37x_flash.c ****                 ##### Option Bytes Programming functions #####
 437:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
 438:../stdperiph/source/stm32f37x_flash.c **** 
 439:../stdperiph/source/stm32f37x_flash.c ****     [..] The FLASH_Option Bytes Programming_functions, includes the following functions:
 440:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_OB_Unlock(void);
 441:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_OB_Lock(void);
 442:../stdperiph/source/stm32f37x_flash.c ****        (+) void FLASH_OB_Launch(void);
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 12


 443:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_Erase(void);
 444:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP);
 445:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP);
 446:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY);
 447:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1);
 448:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG);
 449:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_VDD_SD12Config(uint8_t OB_VDD_SD12);
 450:../stdperiph/source/stm32f37x_flash.c ****        (+) FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER);
 451:../stdperiph/source/stm32f37x_flash.c ****        (+) uint8_t FLASH_OB_GetUser(void);
 452:../stdperiph/source/stm32f37x_flash.c ****        (+) uint32_t FLASH_OB_GetWRP(void);
 453:../stdperiph/source/stm32f37x_flash.c ****        (+) FlagStatus FLASH_OB_GetRDP(void);
 454:../stdperiph/source/stm32f37x_flash.c **** 
 455:../stdperiph/source/stm32f37x_flash.c ****     [..] Any operation of erase or program should follow these steps:
 456:../stdperiph/source/stm32f37x_flash.c **** 
 457:../stdperiph/source/stm32f37x_flash.c ****    (#) Call the FLASH_OB_Unlock() function to enable the Option Bytes registers access
 458:../stdperiph/source/stm32f37x_flash.c **** 
 459:../stdperiph/source/stm32f37x_flash.c ****    (#) Call one or several functions to program the desired option bytes 
 460:../stdperiph/source/stm32f37x_flash.c ****       (++) FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read Protection Le
 461:../stdperiph/source/stm32f37x_flash.c ****       (++) FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP) 
 462:../stdperiph/source/stm32f37x_flash.c ****            => to Enable/Disable the desired sector write protection
 463:../stdperiph/source/stm32f37x_flash.c ****       (++) FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 464:../stdperiph/source/stm32f37x_flash.c ****            => to configure the user option Bytes: IWDG, STOP and the Standby.
 465:../stdperiph/source/stm32f37x_flash.c ****       (++) FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
 466:../stdperiph/source/stm32f37x_flash.c ****            => to set or reset BOOT1 
 467:../stdperiph/source/stm32f37x_flash.c ****       (++) FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG) 
 468:../stdperiph/source/stm32f37x_flash.c ****            => to enable or disable the VDDA Analog Monitoring 	
 469:../stdperiph/source/stm32f37x_flash.c ****       (++) FLASH_Status FLASH_OB_VDD_SD12Config(uint8_t OB_VDD_SD12)
 470:../stdperiph/source/stm32f37x_flash.c ****             => to Enable/Disable the VDD_SD12 monotoring        		 
 471:../stdperiph/source/stm32f37x_flash.c ****       (++) You can write all User Options bytes at once using a single function
 472:../stdperiph/source/stm32f37x_flash.c ****            by calling FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
 473:../stdperiph/source/stm32f37x_flash.c **** 
 474:../stdperiph/source/stm32f37x_flash.c ****    (#) Once all needed option bytes to be programmed are correctly written, call the
 475:../stdperiph/source/stm32f37x_flash.c ****       FLASH_OB_Launch(void) function to launch the Option Bytes programming process.
 476:../stdperiph/source/stm32f37x_flash.c **** 
 477:../stdperiph/source/stm32f37x_flash.c ****    (#) Call the FLASH_OB_Lock() to disable the Option Bytes registers access (recommended
 478:../stdperiph/source/stm32f37x_flash.c ****       to protect the option Bytes against possible unwanted operations)
 479:../stdperiph/source/stm32f37x_flash.c **** 
 480:../stdperiph/source/stm32f37x_flash.c **** @endverbatim
 481:../stdperiph/source/stm32f37x_flash.c ****   * @{
 482:../stdperiph/source/stm32f37x_flash.c ****   */
 483:../stdperiph/source/stm32f37x_flash.c **** /**
 484:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Unlocks the option bytes block access.
 485:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
 486:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 487:../stdperiph/source/stm32f37x_flash.c ****   */
 488:../stdperiph/source/stm32f37x_flash.c **** void FLASH_OB_Unlock(void)
 489:../stdperiph/source/stm32f37x_flash.c **** {
 197              		.loc 1 489 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 490:../stdperiph/source/stm32f37x_flash.c ****   if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 202              		.loc 1 490 0
 203 0000 054B     		ldr	r3, .L23
 204 0002 1B69     		ldr	r3, [r3, #16]
 205 0004 13F4007F 		tst	r3, #512
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 13


 206 0008 05D1     		bne	.L21
 491:../stdperiph/source/stm32f37x_flash.c ****   { 
 492:../stdperiph/source/stm32f37x_flash.c ****     /* Unlocking the option bytes block access */
 493:../stdperiph/source/stm32f37x_flash.c ****     FLASH->OPTKEYR = FLASH_OPTKEY1;
 207              		.loc 1 493 0
 208 000a 034B     		ldr	r3, .L23
 209 000c 034A     		ldr	r2, .L23+4
 210 000e 9A60     		str	r2, [r3, #8]
 494:../stdperiph/source/stm32f37x_flash.c ****     FLASH->OPTKEYR = FLASH_OPTKEY2;
 211              		.loc 1 494 0
 212 0010 02F18832 		add	r2, r2, #-2004318072
 213 0014 9A60     		str	r2, [r3, #8]
 214              	.L21:
 215 0016 7047     		bx	lr
 216              	.L24:
 217              		.align	2
 218              	.L23:
 219 0018 00200240 		.word	1073881088
 220 001c 23016745 		.word	1164378403
 221              		.cfi_endproc
 222              	.LFE120:
 224              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 225              		.align	2
 226              		.global	FLASH_OB_Lock
 227              		.thumb
 228              		.thumb_func
 230              	FLASH_OB_Lock:
 231              	.LFB121:
 495:../stdperiph/source/stm32f37x_flash.c ****   }
 496:../stdperiph/source/stm32f37x_flash.c **** }
 497:../stdperiph/source/stm32f37x_flash.c **** 
 498:../stdperiph/source/stm32f37x_flash.c **** /**
 499:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Locks the option bytes block access.
 500:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
 501:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 502:../stdperiph/source/stm32f37x_flash.c ****   */
 503:../stdperiph/source/stm32f37x_flash.c **** void FLASH_OB_Lock(void)
 504:../stdperiph/source/stm32f37x_flash.c **** {
 232              		.loc 1 504 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
 505:../stdperiph/source/stm32f37x_flash.c ****   /* Set the OPTWREN Bit to lock the option bytes block access */
 506:../stdperiph/source/stm32f37x_flash.c ****   FLASH->CR &= ~FLASH_CR_OPTWRE;
 237              		.loc 1 506 0
 238 0000 024A     		ldr	r2, .L26
 239 0002 1369     		ldr	r3, [r2, #16]
 240 0004 23F40073 		bic	r3, r3, #512
 241 0008 1361     		str	r3, [r2, #16]
 242 000a 7047     		bx	lr
 243              	.L27:
 244              		.align	2
 245              	.L26:
 246 000c 00200240 		.word	1073881088
 247              		.cfi_endproc
 248              	.LFE121:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 14


 250              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 251              		.align	2
 252              		.global	FLASH_OB_Launch
 253              		.thumb
 254              		.thumb_func
 256              	FLASH_OB_Launch:
 257              	.LFB122:
 507:../stdperiph/source/stm32f37x_flash.c **** }
 508:../stdperiph/source/stm32f37x_flash.c **** 
 509:../stdperiph/source/stm32f37x_flash.c **** /**
 510:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Launch the option byte loading.
 511:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
 512:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 513:../stdperiph/source/stm32f37x_flash.c ****   */
 514:../stdperiph/source/stm32f37x_flash.c **** void FLASH_OB_Launch(void)
 515:../stdperiph/source/stm32f37x_flash.c **** {
 258              		.loc 1 515 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 516:../stdperiph/source/stm32f37x_flash.c ****   /* Set the OBL_Launch bit to launch the option byte loading */
 517:../stdperiph/source/stm32f37x_flash.c ****   FLASH->CR |= FLASH_CR_OBL_LAUNCH;
 263              		.loc 1 517 0
 264 0000 024A     		ldr	r2, .L29
 265 0002 1369     		ldr	r3, [r2, #16]
 266 0004 43F40053 		orr	r3, r3, #8192
 267 0008 1361     		str	r3, [r2, #16]
 268 000a 7047     		bx	lr
 269              	.L30:
 270              		.align	2
 271              	.L29:
 272 000c 00200240 		.word	1073881088
 273              		.cfi_endproc
 274              	.LFE122:
 276              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 277              		.align	2
 278              		.global	FLASH_OB_GetUser
 279              		.thumb
 280              		.thumb_func
 282              	FLASH_OB_GetUser:
 283              	.LFB133:
 518:../stdperiph/source/stm32f37x_flash.c **** }
 519:../stdperiph/source/stm32f37x_flash.c **** 
 520:../stdperiph/source/stm32f37x_flash.c **** /**
 521:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Erases the FLASH option bytes.
 522:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function must be called before.
 523:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 524:../stdperiph/source/stm32f37x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)   
 525:../stdperiph/source/stm32f37x_flash.c ****   * @note   This functions erases all option bytes except the Read protection (RDP).
 526:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
 527:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 528:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 529:../stdperiph/source/stm32f37x_flash.c ****   */
 530:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_Erase(void)
 531:../stdperiph/source/stm32f37x_flash.c **** {
 532:../stdperiph/source/stm32f37x_flash.c ****   uint16_t rdptmp = OB_RDP_Level_0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 15


 533:../stdperiph/source/stm32f37x_flash.c **** 
 534:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 535:../stdperiph/source/stm32f37x_flash.c **** 
 536:../stdperiph/source/stm32f37x_flash.c ****   /* Get the actual read protection Option Byte value */ 
 537:../stdperiph/source/stm32f37x_flash.c ****   if(FLASH_OB_GetRDP() != RESET)
 538:../stdperiph/source/stm32f37x_flash.c ****   {
 539:../stdperiph/source/stm32f37x_flash.c ****     rdptmp = 0x00;  
 540:../stdperiph/source/stm32f37x_flash.c ****   }
 541:../stdperiph/source/stm32f37x_flash.c **** 
 542:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 543:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 544:../stdperiph/source/stm32f37x_flash.c **** 
 545:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 546:../stdperiph/source/stm32f37x_flash.c ****   {   
 547:../stdperiph/source/stm32f37x_flash.c ****     /* If the previous operation is completed, proceed to erase the option bytes */
 548:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTER;
 549:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 550:../stdperiph/source/stm32f37x_flash.c **** 
 551:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 552:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 553:../stdperiph/source/stm32f37x_flash.c ****     
 554:../stdperiph/source/stm32f37x_flash.c ****     if(status == FLASH_COMPLETE)
 555:../stdperiph/source/stm32f37x_flash.c ****     {
 556:../stdperiph/source/stm32f37x_flash.c ****       /* If the erase operation is completed, disable the OPTER Bit */
 557:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTER;
 558:../stdperiph/source/stm32f37x_flash.c ****        
 559:../stdperiph/source/stm32f37x_flash.c ****       /* Enable the Option Bytes Programming operation */
 560:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR |= FLASH_CR_OPTPG;
 561:../stdperiph/source/stm32f37x_flash.c **** 
 562:../stdperiph/source/stm32f37x_flash.c ****       /* Restore the last read protection Option Byte value */
 563:../stdperiph/source/stm32f37x_flash.c ****       OB->RDP = (uint16_t)rdptmp; 
 564:../stdperiph/source/stm32f37x_flash.c **** 
 565:../stdperiph/source/stm32f37x_flash.c ****       /* Wait for last operation to be completed */
 566:../stdperiph/source/stm32f37x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 567:../stdperiph/source/stm32f37x_flash.c ****  
 568:../stdperiph/source/stm32f37x_flash.c ****       if(status != FLASH_TIMEOUT)
 569:../stdperiph/source/stm32f37x_flash.c ****       {
 570:../stdperiph/source/stm32f37x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 571:../stdperiph/source/stm32f37x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 572:../stdperiph/source/stm32f37x_flash.c ****       }
 573:../stdperiph/source/stm32f37x_flash.c ****     }
 574:../stdperiph/source/stm32f37x_flash.c ****     else
 575:../stdperiph/source/stm32f37x_flash.c ****     {
 576:../stdperiph/source/stm32f37x_flash.c ****       if (status != FLASH_TIMEOUT)
 577:../stdperiph/source/stm32f37x_flash.c ****       {
 578:../stdperiph/source/stm32f37x_flash.c ****         /* Disable the OPTPG Bit */
 579:../stdperiph/source/stm32f37x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 580:../stdperiph/source/stm32f37x_flash.c ****       }
 581:../stdperiph/source/stm32f37x_flash.c ****     }  
 582:../stdperiph/source/stm32f37x_flash.c ****   }
 583:../stdperiph/source/stm32f37x_flash.c ****   /* Return the erase status */
 584:../stdperiph/source/stm32f37x_flash.c ****   return status;
 585:../stdperiph/source/stm32f37x_flash.c **** }
 586:../stdperiph/source/stm32f37x_flash.c **** 
 587:../stdperiph/source/stm32f37x_flash.c **** /**
 588:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Programs a half word at a specified Option Byte Data address.
 589:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function must be called before.
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 16


 590:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 591:../stdperiph/source/stm32f37x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 592:../stdperiph/source/stm32f37x_flash.c ****   * @param  Address: specifies the address to be programmed.
 593:../stdperiph/source/stm32f37x_flash.c ****   *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
 594:../stdperiph/source/stm32f37x_flash.c ****   * @param  Data: specifies the data to be programmed.
 595:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 596:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 597:../stdperiph/source/stm32f37x_flash.c ****   */
 598:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
 599:../stdperiph/source/stm32f37x_flash.c **** {
 600:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 601:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 602:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_DATA_ADDRESS(Address));
 603:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 604:../stdperiph/source/stm32f37x_flash.c **** 
 605:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 606:../stdperiph/source/stm32f37x_flash.c ****   {
 607:../stdperiph/source/stm32f37x_flash.c ****     /* Enables the Option Bytes Programming operation */
 608:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 609:../stdperiph/source/stm32f37x_flash.c ****     *(__IO uint16_t*)Address = Data;
 610:../stdperiph/source/stm32f37x_flash.c ****     
 611:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 612:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 613:../stdperiph/source/stm32f37x_flash.c ****     
 614:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
 615:../stdperiph/source/stm32f37x_flash.c ****     {
 616:../stdperiph/source/stm32f37x_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 617:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 618:../stdperiph/source/stm32f37x_flash.c ****     }
 619:../stdperiph/source/stm32f37x_flash.c ****   }
 620:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Option Byte Data Program Status */
 621:../stdperiph/source/stm32f37x_flash.c ****   return status;
 622:../stdperiph/source/stm32f37x_flash.c **** }
 623:../stdperiph/source/stm32f37x_flash.c **** 
 624:../stdperiph/source/stm32f37x_flash.c **** /**
 625:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Write protects the desired pages
 626:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function must be called before.
 627:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 628:../stdperiph/source/stm32f37x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)    
 629:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_WRP: specifies the address of the pages to be write protected.
 630:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be:
 631:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_WRP_Pages0to1..OB_WRP_Pages62to127
 632:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_WRP_AllPages
 633:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 634:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 635:../stdperiph/source/stm32f37x_flash.c ****   */
 636:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
 637:../stdperiph/source/stm32f37x_flash.c **** {
 638:../stdperiph/source/stm32f37x_flash.c ****   uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
 639:../stdperiph/source/stm32f37x_flash.c ****   
 640:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 641:../stdperiph/source/stm32f37x_flash.c ****   
 642:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 643:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
 644:../stdperiph/source/stm32f37x_flash.c ****     
 645:../stdperiph/source/stm32f37x_flash.c ****   OB_WRP = (uint32_t)(~OB_WRP);
 646:../stdperiph/source/stm32f37x_flash.c ****   WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 17


 647:../stdperiph/source/stm32f37x_flash.c ****   WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8); 
 648:../stdperiph/source/stm32f37x_flash.c ****   WRP2_Data = (uint16_t)((OB_WRP & OB_WRP1_WRP1) >> 16);
 649:../stdperiph/source/stm32f37x_flash.c ****   WRP3_Data = (uint16_t)((OB_WRP & OB_WRP1_nWRP1) >> 24); 
 650:../stdperiph/source/stm32f37x_flash.c ****   
 651:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 652:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 653:../stdperiph/source/stm32f37x_flash.c ****   
 654:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 655:../stdperiph/source/stm32f37x_flash.c ****   {
 656:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG;
 657:../stdperiph/source/stm32f37x_flash.c **** 
 658:../stdperiph/source/stm32f37x_flash.c ****     if(WRP0_Data != 0xFF)
 659:../stdperiph/source/stm32f37x_flash.c ****     {
 660:../stdperiph/source/stm32f37x_flash.c ****       OB->WRP0 = WRP0_Data;
 661:../stdperiph/source/stm32f37x_flash.c ****       
 662:../stdperiph/source/stm32f37x_flash.c ****       /* Wait for last operation to be completed */
 663:../stdperiph/source/stm32f37x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 664:../stdperiph/source/stm32f37x_flash.c ****     }
 665:../stdperiph/source/stm32f37x_flash.c ****     if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 666:../stdperiph/source/stm32f37x_flash.c ****     {
 667:../stdperiph/source/stm32f37x_flash.c ****       OB->WRP1 = WRP1_Data;
 668:../stdperiph/source/stm32f37x_flash.c ****       
 669:../stdperiph/source/stm32f37x_flash.c ****       /* Wait for last operation to be completed */
 670:../stdperiph/source/stm32f37x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 671:../stdperiph/source/stm32f37x_flash.c ****     }
 672:../stdperiph/source/stm32f37x_flash.c **** 	if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 673:../stdperiph/source/stm32f37x_flash.c ****     {
 674:../stdperiph/source/stm32f37x_flash.c ****       OB->WRP2 = WRP2_Data;
 675:../stdperiph/source/stm32f37x_flash.c ****       
 676:../stdperiph/source/stm32f37x_flash.c ****       /* Wait for last operation to be completed */
 677:../stdperiph/source/stm32f37x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 678:../stdperiph/source/stm32f37x_flash.c ****     }
 679:../stdperiph/source/stm32f37x_flash.c **** 	if((status == FLASH_COMPLETE) && (WRP3_Data != 0xFF))
 680:../stdperiph/source/stm32f37x_flash.c ****     {
 681:../stdperiph/source/stm32f37x_flash.c ****       OB->WRP3 = WRP3_Data;
 682:../stdperiph/source/stm32f37x_flash.c ****       
 683:../stdperiph/source/stm32f37x_flash.c ****       /* Wait for last operation to be completed */
 684:../stdperiph/source/stm32f37x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 685:../stdperiph/source/stm32f37x_flash.c ****     }
 686:../stdperiph/source/stm32f37x_flash.c ****           
 687:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
 688:../stdperiph/source/stm32f37x_flash.c ****     {
 689:../stdperiph/source/stm32f37x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 690:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 691:../stdperiph/source/stm32f37x_flash.c ****     }
 692:../stdperiph/source/stm32f37x_flash.c ****   } 
 693:../stdperiph/source/stm32f37x_flash.c ****   /* Return the write protection operation Status */
 694:../stdperiph/source/stm32f37x_flash.c ****   return status;      
 695:../stdperiph/source/stm32f37x_flash.c **** }
 696:../stdperiph/source/stm32f37x_flash.c **** 
 697:../stdperiph/source/stm32f37x_flash.c **** /**
 698:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Enables or disables the read out protection.
 699:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function must be called before.
 700:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 701:../stdperiph/source/stm32f37x_flash.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)   
 702:../stdperiph/source/stm32f37x_flash.c ****   * @param  FLASH_ReadProtection_Level: specifies the read protection level. 
 703:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 18


 704:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_RDP_Level_0: No protection
 705:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_RDP_Level_1: Read protection of the memory
 706:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_RDP_Level_2: Chip protection
 707:../stdperiph/source/stm32f37x_flash.c ****   * @note   When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
 708:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 709:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 710:../stdperiph/source/stm32f37x_flash.c ****   */
 711:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
 712:../stdperiph/source/stm32f37x_flash.c **** {
 713:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 714:../stdperiph/source/stm32f37x_flash.c ****   
 715:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 716:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
 717:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 718:../stdperiph/source/stm32f37x_flash.c ****   
 719:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 720:../stdperiph/source/stm32f37x_flash.c ****   {
 721:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTER;
 722:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 723:../stdperiph/source/stm32f37x_flash.c ****     
 724:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 725:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 726:../stdperiph/source/stm32f37x_flash.c ****     
 727:../stdperiph/source/stm32f37x_flash.c ****     if(status == FLASH_COMPLETE)
 728:../stdperiph/source/stm32f37x_flash.c ****     {
 729:../stdperiph/source/stm32f37x_flash.c ****       /* If the erase operation is completed, disable the OPTER Bit */
 730:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTER;
 731:../stdperiph/source/stm32f37x_flash.c ****       
 732:../stdperiph/source/stm32f37x_flash.c ****       /* Enable the Option Bytes Programming operation */
 733:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR |= FLASH_CR_OPTPG;
 734:../stdperiph/source/stm32f37x_flash.c ****        
 735:../stdperiph/source/stm32f37x_flash.c ****       OB->RDP = OB_RDP;
 736:../stdperiph/source/stm32f37x_flash.c **** 
 737:../stdperiph/source/stm32f37x_flash.c ****       /* Wait for last operation to be completed */
 738:../stdperiph/source/stm32f37x_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 739:../stdperiph/source/stm32f37x_flash.c ****     
 740:../stdperiph/source/stm32f37x_flash.c ****       if(status != FLASH_TIMEOUT)
 741:../stdperiph/source/stm32f37x_flash.c ****       {
 742:../stdperiph/source/stm32f37x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 743:../stdperiph/source/stm32f37x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 744:../stdperiph/source/stm32f37x_flash.c ****       }
 745:../stdperiph/source/stm32f37x_flash.c ****     }
 746:../stdperiph/source/stm32f37x_flash.c ****     else 
 747:../stdperiph/source/stm32f37x_flash.c ****     {
 748:../stdperiph/source/stm32f37x_flash.c ****       if(status != FLASH_TIMEOUT)
 749:../stdperiph/source/stm32f37x_flash.c ****       {
 750:../stdperiph/source/stm32f37x_flash.c ****         /* Disable the OPTER Bit */
 751:../stdperiph/source/stm32f37x_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTER;
 752:../stdperiph/source/stm32f37x_flash.c ****       }
 753:../stdperiph/source/stm32f37x_flash.c ****     }
 754:../stdperiph/source/stm32f37x_flash.c ****   }
 755:../stdperiph/source/stm32f37x_flash.c ****   /* Return the protection operation Status */
 756:../stdperiph/source/stm32f37x_flash.c ****   return status;
 757:../stdperiph/source/stm32f37x_flash.c **** }
 758:../stdperiph/source/stm32f37x_flash.c **** 
 759:../stdperiph/source/stm32f37x_flash.c **** /**
 760:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 19


 761:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function must be called before.
 762:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option
 763:../stdperiph/source/stm32f37x_flash.c ****   *         bytes (recommended to protect the FLASH memory against possible unwanted operation)
 764:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_IWDG: Selects the WDG mode
 765:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 766:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_IWDG_SW: Software WDG selected
 767:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_IWDG_HW: Hardware WDG selected
 768:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
 769:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 770:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_STOP_NoRST: No reset generated when entering in STOP
 771:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_STOP_RST: Reset generated when entering in STOP
 772:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
 773:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 774:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
 775:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 776:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 777:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 778:../stdperiph/source/stm32f37x_flash.c ****   */
 779:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 780:../stdperiph/source/stm32f37x_flash.c **** {
 781:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 782:../stdperiph/source/stm32f37x_flash.c **** 
 783:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 784:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
 785:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
 786:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
 787:../stdperiph/source/stm32f37x_flash.c ****   
 788:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 789:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 790:../stdperiph/source/stm32f37x_flash.c ****   
 791:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 792:../stdperiph/source/stm32f37x_flash.c ****   {  
 793:../stdperiph/source/stm32f37x_flash.c ****     /* Enable the Option Bytes Programming operation */
 794:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 795:../stdperiph/source/stm32f37x_flash.c **** 
 796:../stdperiph/source/stm32f37x_flash.c ****     OB->USER = (uint16_t)((uint16_t)(OB_IWDG | OB_STOP) | (uint16_t)(OB_STDBY | 0xF8));
 797:../stdperiph/source/stm32f37x_flash.c ****   
 798:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 799:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800:../stdperiph/source/stm32f37x_flash.c **** 
 801:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
 802:../stdperiph/source/stm32f37x_flash.c ****     {
 803:../stdperiph/source/stm32f37x_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 804:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 805:../stdperiph/source/stm32f37x_flash.c ****     }
 806:../stdperiph/source/stm32f37x_flash.c ****   }    
 807:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Option Byte program Status */
 808:../stdperiph/source/stm32f37x_flash.c ****   return status;
 809:../stdperiph/source/stm32f37x_flash.c **** }
 810:../stdperiph/source/stm32f37x_flash.c **** 
 811:../stdperiph/source/stm32f37x_flash.c **** /**
 812:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Sets or resets the BOOT1 option bit.
 813:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_BOOT1: Set or Reset the BOOT1 option bit.
 814:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 815:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_BOOT1_RESET: BOOT1 option bit reset
 816:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_BOOT1_SET: BOOT1 option bit set
 817:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 20


 818:../stdperiph/source/stm32f37x_flash.c ****   */
 819:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
 820:../stdperiph/source/stm32f37x_flash.c **** {
 821:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 822:../stdperiph/source/stm32f37x_flash.c **** 
 823:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 824:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_BOOT1(OB_BOOT1));
 825:../stdperiph/source/stm32f37x_flash.c ****   
 826:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 827:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 828:../stdperiph/source/stm32f37x_flash.c ****   
 829:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 830:../stdperiph/source/stm32f37x_flash.c ****   {  
 831:../stdperiph/source/stm32f37x_flash.c ****     /* Enable the Option Bytes Programming operation */
 832:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 833:../stdperiph/source/stm32f37x_flash.c ****            
 834:../stdperiph/source/stm32f37x_flash.c **** 	OB->USER = OB_BOOT1|0xEF;
 835:../stdperiph/source/stm32f37x_flash.c ****   
 836:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 837:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 838:../stdperiph/source/stm32f37x_flash.c **** 
 839:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
 840:../stdperiph/source/stm32f37x_flash.c ****     {
 841:../stdperiph/source/stm32f37x_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 842:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 843:../stdperiph/source/stm32f37x_flash.c ****     }
 844:../stdperiph/source/stm32f37x_flash.c ****   }    
 845:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Option Byte program Status */
 846:../stdperiph/source/stm32f37x_flash.c ****   return status;
 847:../stdperiph/source/stm32f37x_flash.c **** }
 848:../stdperiph/source/stm32f37x_flash.c **** 
 849:../stdperiph/source/stm32f37x_flash.c **** /**
 850:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Sets or resets the analogue monitoring on VDDA Power source. 
 851:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_VDDA_ANALOG: Selects the analog monitoring on VDDA Power source.
 852:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 853:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
 854:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
 855:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 856:../stdperiph/source/stm32f37x_flash.c ****   */
 857:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
 858:../stdperiph/source/stm32f37x_flash.c **** {
 859:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 860:../stdperiph/source/stm32f37x_flash.c **** 
 861:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 862:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));
 863:../stdperiph/source/stm32f37x_flash.c ****   
 864:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 865:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 866:../stdperiph/source/stm32f37x_flash.c ****   
 867:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 868:../stdperiph/source/stm32f37x_flash.c ****   {  
 869:../stdperiph/source/stm32f37x_flash.c ****     /* Enable the Option Bytes Programming operation */
 870:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 871:../stdperiph/source/stm32f37x_flash.c **** 
 872:../stdperiph/source/stm32f37x_flash.c ****     OB->USER = OB_VDDA_ANALOG | 0xDF;
 873:../stdperiph/source/stm32f37x_flash.c ****   
 874:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 21


 875:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 876:../stdperiph/source/stm32f37x_flash.c **** 
 877:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
 878:../stdperiph/source/stm32f37x_flash.c ****     {
 879:../stdperiph/source/stm32f37x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 880:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 881:../stdperiph/source/stm32f37x_flash.c ****     }
 882:../stdperiph/source/stm32f37x_flash.c ****   }    
 883:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Option Byte program Status */
 884:../stdperiph/source/stm32f37x_flash.c ****   return status;
 885:../stdperiph/source/stm32f37x_flash.c **** }
 886:../stdperiph/source/stm32f37x_flash.c **** 
 887:../stdperiph/source/stm32f37x_flash.c **** /**
 888:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Sets or resets the analogue monitoring on VDD_SD12 Power source. 
 889:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_VDD_SD12: Selects the analog monitoring on VDD_SD12 Power source.
 890:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 891:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_VDD_SD12_ON: Analog monitoring on VDD_SD12 Power source ON
 892:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_VDD_SD12_OFF: Analog monitoring on VDD_SD12 Power source OFF
 893:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
 894:../stdperiph/source/stm32f37x_flash.c ****   */
 895:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_VDD_SD12Config(uint8_t OB_VDD_SD12)
 896:../stdperiph/source/stm32f37x_flash.c **** {
 897:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 898:../stdperiph/source/stm32f37x_flash.c **** 
 899:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 900:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_VDD_SD12(OB_VDD_SD12));
 901:../stdperiph/source/stm32f37x_flash.c ****   
 902:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 903:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 904:../stdperiph/source/stm32f37x_flash.c ****   
 905:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 906:../stdperiph/source/stm32f37x_flash.c ****   {  
 907:../stdperiph/source/stm32f37x_flash.c ****     /* Enable the Option Bytes Programming operation */
 908:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 909:../stdperiph/source/stm32f37x_flash.c ****            
 910:../stdperiph/source/stm32f37x_flash.c ****     OB->USER = OB_VDD_SD12 | 0x7F;
 911:../stdperiph/source/stm32f37x_flash.c ****   
 912:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 913:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 914:../stdperiph/source/stm32f37x_flash.c **** 
 915:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
 916:../stdperiph/source/stm32f37x_flash.c ****     {
 917:../stdperiph/source/stm32f37x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 918:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 919:../stdperiph/source/stm32f37x_flash.c ****     }
 920:../stdperiph/source/stm32f37x_flash.c ****   }    
 921:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Option Byte program Status */
 922:../stdperiph/source/stm32f37x_flash.c ****   return status;
 923:../stdperiph/source/stm32f37x_flash.c **** }
 924:../stdperiph/source/stm32f37x_flash.c **** 
 925:../stdperiph/source/stm32f37x_flash.c **** /**
 926:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Sets or resets the SRAM partiy.
 927:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_SRAM_Parity: SSet or Reset the SRAM partiy enable bit.
 928:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
 929:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_SRAM_PARITY_SET: Set SRAM partiy.
 930:../stdperiph/source/stm32f37x_flash.c ****   *             @arg OB_SRAM_PARITY_RESET: Reset SRAM partiy.
 931:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 22


 932:../stdperiph/source/stm32f37x_flash.c ****   */
 933:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
 934:../stdperiph/source/stm32f37x_flash.c **** {
 935:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 936:../stdperiph/source/stm32f37x_flash.c **** 
 937:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
 938:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));
 939:../stdperiph/source/stm32f37x_flash.c **** 
 940:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 941:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 942:../stdperiph/source/stm32f37x_flash.c ****   
 943:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 944:../stdperiph/source/stm32f37x_flash.c ****   {  
 945:../stdperiph/source/stm32f37x_flash.c ****     /* Enable the Option Bytes Programming operation */
 946:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 947:../stdperiph/source/stm32f37x_flash.c **** 
 948:../stdperiph/source/stm32f37x_flash.c ****     OB->USER = OB_SRAM_Parity | 0xBF;
 949:../stdperiph/source/stm32f37x_flash.c ****   
 950:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
 951:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 952:../stdperiph/source/stm32f37x_flash.c **** 
 953:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
 954:../stdperiph/source/stm32f37x_flash.c ****     {
 955:../stdperiph/source/stm32f37x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 956:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 957:../stdperiph/source/stm32f37x_flash.c ****     }
 958:../stdperiph/source/stm32f37x_flash.c ****   }
 959:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Option Byte program Status */
 960:../stdperiph/source/stm32f37x_flash.c ****   return status;
 961:../stdperiph/source/stm32f37x_flash.c **** }
 962:../stdperiph/source/stm32f37x_flash.c **** 
 963:../stdperiph/source/stm32f37x_flash.c **** /**
 964:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY/ BOOT1 / OB_VDDA_AN
 965:../stdperiph/source/stm32f37x_flash.c ****   *         OB_VDD_SD12.
 966:../stdperiph/source/stm32f37x_flash.c ****   * @note   To correctly run this function, the FLASH_OB_Unlock() function
 967:../stdperiph/source/stm32f37x_flash.c ****   *           must be called before.
 968:../stdperiph/source/stm32f37x_flash.c ****   * @note   Call the FLASH_OB_Lock() to disable the flash control register access and the option by
 969:../stdperiph/source/stm32f37x_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)   
 970:../stdperiph/source/stm32f37x_flash.c ****   * @param  OB_USER: Selects all user option bytes
 971:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter is a combination of the following values:
 972:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_IWDG_SW: Software WDG selected
 973:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_IWDG_HW: Hardware WDG selected
 974:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
 975:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
 976:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
 977:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 978:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_BOOT1_RESET: BOOT1 Reset
 979:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_BOOT1_SET: BOOT1 Set
 980:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
 981:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
 982:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_VDD_SD12_ON: Analog monitoring on VDD_SD12 Power source ON
 983:../stdperiph/source/stm32f37x_flash.c ****   *            @arg OB_VDD_SD12_OFF: Analog monitoring on VDD_SD12 Power source OFF 
 984:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: 
 985:../stdperiph/source/stm32f37x_flash.c ****   * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 986:../stdperiph/source/stm32f37x_flash.c ****   */
 987:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
 988:../stdperiph/source/stm32f37x_flash.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 23


 989:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 990:../stdperiph/source/stm32f37x_flash.c ****   
 991:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for last operation to be completed */
 992:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 993:../stdperiph/source/stm32f37x_flash.c ****   
 994:../stdperiph/source/stm32f37x_flash.c ****   if(status == FLASH_COMPLETE)
 995:../stdperiph/source/stm32f37x_flash.c ****   {  
 996:../stdperiph/source/stm32f37x_flash.c ****     /* Enable the Option Bytes Programming operation */
 997:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 998:../stdperiph/source/stm32f37x_flash.c ****            
 999:../stdperiph/source/stm32f37x_flash.c ****     OB->USER = OB_USER | 0x48;
1000:../stdperiph/source/stm32f37x_flash.c ****   
1001:../stdperiph/source/stm32f37x_flash.c ****     /* Wait for last operation to be completed */
1002:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
1003:../stdperiph/source/stm32f37x_flash.c **** 
1004:../stdperiph/source/stm32f37x_flash.c ****     if(status != FLASH_TIMEOUT)
1005:../stdperiph/source/stm32f37x_flash.c ****     {
1006:../stdperiph/source/stm32f37x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
1007:../stdperiph/source/stm32f37x_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
1008:../stdperiph/source/stm32f37x_flash.c ****     }
1009:../stdperiph/source/stm32f37x_flash.c ****   }    
1010:../stdperiph/source/stm32f37x_flash.c ****   /* Return the Option Byte program Status */
1011:../stdperiph/source/stm32f37x_flash.c ****   return status;
1012:../stdperiph/source/stm32f37x_flash.c **** 
1013:../stdperiph/source/stm32f37x_flash.c **** }
1014:../stdperiph/source/stm32f37x_flash.c **** 
1015:../stdperiph/source/stm32f37x_flash.c **** /**
1016:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1017:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
1018:../stdperiph/source/stm32f37x_flash.c ****   * @retval The FLASH User Option Bytes .
1019:../stdperiph/source/stm32f37x_flash.c ****   */
1020:../stdperiph/source/stm32f37x_flash.c **** uint8_t FLASH_OB_GetUser(void)
1021:../stdperiph/source/stm32f37x_flash.c **** {
 284              		.loc 1 1021 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
1022:../stdperiph/source/stm32f37x_flash.c ****   /* Return the User Option Byte */
1023:../stdperiph/source/stm32f37x_flash.c ****   return (uint8_t)(FLASH->OBR >> 8);
 289              		.loc 1 1023 0
 290 0000 024B     		ldr	r3, .L32
 291 0002 D869     		ldr	r0, [r3, #28]
1024:../stdperiph/source/stm32f37x_flash.c **** }
 292              		.loc 1 1024 0
 293 0004 C0F30720 		ubfx	r0, r0, #8, #8
 294 0008 7047     		bx	lr
 295              	.L33:
 296 000a 00BF     		.align	2
 297              	.L32:
 298 000c 00200240 		.word	1073881088
 299              		.cfi_endproc
 300              	.LFE133:
 302              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 303              		.align	2
 304              		.global	FLASH_OB_GetWRP
 305              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 24


 306              		.thumb_func
 308              	FLASH_OB_GetWRP:
 309              	.LFB134:
1025:../stdperiph/source/stm32f37x_flash.c **** 
1026:../stdperiph/source/stm32f37x_flash.c **** /**
1027:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1028:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
1029:../stdperiph/source/stm32f37x_flash.c ****   * @retval The FLASH Write Protection Option Bytes value
1030:../stdperiph/source/stm32f37x_flash.c ****   */
1031:../stdperiph/source/stm32f37x_flash.c **** uint32_t FLASH_OB_GetWRP(void)
1032:../stdperiph/source/stm32f37x_flash.c **** {
 310              		.loc 1 1032 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
1033:../stdperiph/source/stm32f37x_flash.c ****   /* Return the FLASH write protection Register value */
1034:../stdperiph/source/stm32f37x_flash.c ****   return (uint32_t)(FLASH->WRPR);
 315              		.loc 1 1034 0
 316 0000 014B     		ldr	r3, .L35
 317 0002 186A     		ldr	r0, [r3, #32]
1035:../stdperiph/source/stm32f37x_flash.c **** }
 318              		.loc 1 1035 0
 319 0004 7047     		bx	lr
 320              	.L36:
 321 0006 00BF     		.align	2
 322              	.L35:
 323 0008 00200240 		.word	1073881088
 324              		.cfi_endproc
 325              	.LFE134:
 327              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 328              		.align	2
 329              		.global	FLASH_OB_GetRDP
 330              		.thumb
 331              		.thumb_func
 333              	FLASH_OB_GetRDP:
 334              	.LFB135:
1036:../stdperiph/source/stm32f37x_flash.c **** 
1037:../stdperiph/source/stm32f37x_flash.c **** /**
1038:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Checks whether the FLASH Read out Protection Status is set or not.
1039:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
1040:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH ReadOut Protection Status(SET or RESET)
1041:../stdperiph/source/stm32f37x_flash.c ****   */
1042:../stdperiph/source/stm32f37x_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1043:../stdperiph/source/stm32f37x_flash.c **** {
 335              		.loc 1 1043 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL6:
1044:../stdperiph/source/stm32f37x_flash.c ****   FlagStatus readstatus = RESET;
1045:../stdperiph/source/stm32f37x_flash.c ****   
1046:../stdperiph/source/stm32f37x_flash.c ****   if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 341              		.loc 1 1046 0
 342 0000 044B     		ldr	r3, .L40
 343 0002 DB69     		ldr	r3, [r3, #28]
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 25


 344 0004 13F0060F 		tst	r3, #6
 345 0008 01D0     		beq	.L39
1047:../stdperiph/source/stm32f37x_flash.c ****   {
1048:../stdperiph/source/stm32f37x_flash.c ****     readstatus = SET;
 346              		.loc 1 1048 0
 347 000a 0120     		movs	r0, #1
 348 000c 7047     		bx	lr
 349              	.L39:
1049:../stdperiph/source/stm32f37x_flash.c ****   }
1050:../stdperiph/source/stm32f37x_flash.c ****   else
1051:../stdperiph/source/stm32f37x_flash.c ****   {
1052:../stdperiph/source/stm32f37x_flash.c ****     readstatus = RESET;
 350              		.loc 1 1052 0
 351 000e 0020     		movs	r0, #0
 352              	.LVL7:
1053:../stdperiph/source/stm32f37x_flash.c ****   }
1054:../stdperiph/source/stm32f37x_flash.c ****   return readstatus;
1055:../stdperiph/source/stm32f37x_flash.c **** }
 353              		.loc 1 1055 0
 354 0010 7047     		bx	lr
 355              	.L41:
 356 0012 00BF     		.align	2
 357              	.L40:
 358 0014 00200240 		.word	1073881088
 359              		.cfi_endproc
 360              	.LFE135:
 362              		.section	.text.FLASH_ITConfig,"ax",%progbits
 363              		.align	2
 364              		.global	FLASH_ITConfig
 365              		.thumb
 366              		.thumb_func
 368              	FLASH_ITConfig:
 369              	.LFB136:
1056:../stdperiph/source/stm32f37x_flash.c **** 
1057:../stdperiph/source/stm32f37x_flash.c **** /**
1058:../stdperiph/source/stm32f37x_flash.c ****   * @}
1059:../stdperiph/source/stm32f37x_flash.c ****   */
1060:../stdperiph/source/stm32f37x_flash.c **** 
1061:../stdperiph/source/stm32f37x_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1062:../stdperiph/source/stm32f37x_flash.c ****  *  @brief   Interrupts and flags management functions
1063:../stdperiph/source/stm32f37x_flash.c ****  *
1064:../stdperiph/source/stm32f37x_flash.c **** @verbatim   
1065:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================
1066:../stdperiph/source/stm32f37x_flash.c ****              ##### Interrupts and flags management functions #####
1067:../stdperiph/source/stm32f37x_flash.c ****  ===============================================================================  
1068:../stdperiph/source/stm32f37x_flash.c **** 
1069:../stdperiph/source/stm32f37x_flash.c **** @endverbatim
1070:../stdperiph/source/stm32f37x_flash.c ****   * @{
1071:../stdperiph/source/stm32f37x_flash.c ****   */
1072:../stdperiph/source/stm32f37x_flash.c **** 
1073:../stdperiph/source/stm32f37x_flash.c **** /**
1074:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1075:../stdperiph/source/stm32f37x_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or 
1076:../stdperiph/source/stm32f37x_flash.c ****   *         disabled.
1077:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be any combination of the following values:
1078:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_IT_EOP: FLASH end of programming Interrupt
1079:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_IT_ERR: FLASH Error Interrupt
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 26


1080:../stdperiph/source/stm32f37x_flash.c ****   * @retval None 
1081:../stdperiph/source/stm32f37x_flash.c ****   */
1082:../stdperiph/source/stm32f37x_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1083:../stdperiph/source/stm32f37x_flash.c **** {
 370              		.loc 1 1083 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              		@ link register save eliminated.
 375              	.LVL8:
1084:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
1085:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1086:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1087:../stdperiph/source/stm32f37x_flash.c ****   
1088:../stdperiph/source/stm32f37x_flash.c ****   if(NewState != DISABLE)
 376              		.loc 1 1088 0
 377 0000 21B1     		cbz	r1, .L43
1089:../stdperiph/source/stm32f37x_flash.c ****   {
1090:../stdperiph/source/stm32f37x_flash.c ****     /* Enable the interrupt sources */
1091:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_IT;
 378              		.loc 1 1091 0
 379 0002 054B     		ldr	r3, .L45
 380 0004 1A69     		ldr	r2, [r3, #16]
 381 0006 1043     		orrs	r0, r0, r2
 382              	.LVL9:
 383 0008 1861     		str	r0, [r3, #16]
 384 000a 7047     		bx	lr
 385              	.LVL10:
 386              	.L43:
1092:../stdperiph/source/stm32f37x_flash.c ****   }
1093:../stdperiph/source/stm32f37x_flash.c ****   else
1094:../stdperiph/source/stm32f37x_flash.c ****   {
1095:../stdperiph/source/stm32f37x_flash.c ****     /* Disable the interrupt sources */
1096:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 387              		.loc 1 1096 0
 388 000c 024A     		ldr	r2, .L45
 389 000e 1369     		ldr	r3, [r2, #16]
 390 0010 23EA0000 		bic	r0, r3, r0
 391              	.LVL11:
 392 0014 1061     		str	r0, [r2, #16]
 393 0016 7047     		bx	lr
 394              	.L46:
 395              		.align	2
 396              	.L45:
 397 0018 00200240 		.word	1073881088
 398              		.cfi_endproc
 399              	.LFE136:
 401              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 402              		.align	2
 403              		.global	FLASH_GetFlagStatus
 404              		.thumb
 405              		.thumb_func
 407              	FLASH_GetFlagStatus:
 408              	.LFB137:
1097:../stdperiph/source/stm32f37x_flash.c ****   }
1098:../stdperiph/source/stm32f37x_flash.c **** }
1099:../stdperiph/source/stm32f37x_flash.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 27


1100:../stdperiph/source/stm32f37x_flash.c **** /**
1101:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1102:../stdperiph/source/stm32f37x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1103:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be one of the following values:
1104:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_FLAG_BSY: FLASH write/erase operations in progress flag 
1105:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_FLAG_PGERR: FLASH Programming error flag flag
1106:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
1107:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_FLAG_EOP: FLASH End of Programming flag
1108:../stdperiph/source/stm32f37x_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1109:../stdperiph/source/stm32f37x_flash.c ****   */
1110:../stdperiph/source/stm32f37x_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1111:../stdperiph/source/stm32f37x_flash.c **** {
 409              		.loc 1 1111 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414              	.LVL12:
1112:../stdperiph/source/stm32f37x_flash.c ****   FlagStatus bitstatus = RESET;
1113:../stdperiph/source/stm32f37x_flash.c **** 
1114:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
1115:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1116:../stdperiph/source/stm32f37x_flash.c **** 
1117:../stdperiph/source/stm32f37x_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 415              		.loc 1 1117 0
 416 0000 034B     		ldr	r3, .L50
 417 0002 DB68     		ldr	r3, [r3, #12]
 418 0004 0342     		tst	r3, r0
 419 0006 01D0     		beq	.L49
1118:../stdperiph/source/stm32f37x_flash.c ****   {
1119:../stdperiph/source/stm32f37x_flash.c ****     bitstatus = SET;
 420              		.loc 1 1119 0
 421 0008 0120     		movs	r0, #1
 422              	.LVL13:
 423 000a 7047     		bx	lr
 424              	.LVL14:
 425              	.L49:
1120:../stdperiph/source/stm32f37x_flash.c ****   }
1121:../stdperiph/source/stm32f37x_flash.c ****   else
1122:../stdperiph/source/stm32f37x_flash.c ****   {
1123:../stdperiph/source/stm32f37x_flash.c ****     bitstatus = RESET;
 426              		.loc 1 1123 0
 427 000c 0020     		movs	r0, #0
 428              	.LVL15:
1124:../stdperiph/source/stm32f37x_flash.c ****   }
1125:../stdperiph/source/stm32f37x_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1126:../stdperiph/source/stm32f37x_flash.c ****   return bitstatus; 
1127:../stdperiph/source/stm32f37x_flash.c **** }
 429              		.loc 1 1127 0
 430 000e 7047     		bx	lr
 431              	.L51:
 432              		.align	2
 433              	.L50:
 434 0010 00200240 		.word	1073881088
 435              		.cfi_endproc
 436              	.LFE137:
 438              		.section	.text.FLASH_ClearFlag,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 28


 439              		.align	2
 440              		.global	FLASH_ClearFlag
 441              		.thumb
 442              		.thumb_func
 444              	FLASH_ClearFlag:
 445              	.LFB138:
1128:../stdperiph/source/stm32f37x_flash.c **** 
1129:../stdperiph/source/stm32f37x_flash.c **** /**
1130:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Clears the FLASH's pending flags.
1131:../stdperiph/source/stm32f37x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1132:../stdperiph/source/stm32f37x_flash.c ****   *          This parameter can be any combination of the following values:
1133:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_FLAG_PGERR: FLASH Programming error flag flag
1134:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
1135:../stdperiph/source/stm32f37x_flash.c ****   *             @arg FLASH_FLAG_EOP: FLASH End of Programming flag
1136:../stdperiph/source/stm32f37x_flash.c ****   * @retval None
1137:../stdperiph/source/stm32f37x_flash.c ****   */
1138:../stdperiph/source/stm32f37x_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1139:../stdperiph/source/stm32f37x_flash.c **** {
 446              		.loc 1 1139 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL16:
1140:../stdperiph/source/stm32f37x_flash.c ****   /* Check the parameters */
1141:../stdperiph/source/stm32f37x_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1142:../stdperiph/source/stm32f37x_flash.c ****   
1143:../stdperiph/source/stm32f37x_flash.c ****   /* Clear the flags */
1144:../stdperiph/source/stm32f37x_flash.c ****   FLASH->SR = FLASH_FLAG;
 452              		.loc 1 1144 0
 453 0000 014B     		ldr	r3, .L53
 454 0002 D860     		str	r0, [r3, #12]
 455 0004 7047     		bx	lr
 456              	.L54:
 457 0006 00BF     		.align	2
 458              	.L53:
 459 0008 00200240 		.word	1073881088
 460              		.cfi_endproc
 461              	.LFE138:
 463              		.section	.text.FLASH_GetStatus,"ax",%progbits
 464              		.align	2
 465              		.global	FLASH_GetStatus
 466              		.thumb
 467              		.thumb_func
 469              	FLASH_GetStatus:
 470              	.LFB139:
1145:../stdperiph/source/stm32f37x_flash.c **** }
1146:../stdperiph/source/stm32f37x_flash.c **** 
1147:../stdperiph/source/stm32f37x_flash.c **** /**
1148:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Returns the FLASH Status.
1149:../stdperiph/source/stm32f37x_flash.c ****   * @param  None
1150:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: 
1151:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
1152:../stdperiph/source/stm32f37x_flash.c ****   */
1153:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_GetStatus(void)
1154:../stdperiph/source/stm32f37x_flash.c **** {
 471              		.loc 1 1154 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 29


 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475              		@ link register save eliminated.
 476              	.LVL17:
1155:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status FLASHstatus = FLASH_COMPLETE;
1156:../stdperiph/source/stm32f37x_flash.c ****   
1157:../stdperiph/source/stm32f37x_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 477              		.loc 1 1157 0
 478 0000 0B4B     		ldr	r3, .L60
 479 0002 DB68     		ldr	r3, [r3, #12]
 480 0004 13F0010F 		tst	r3, #1
 481 0008 0BD1     		bne	.L57
1158:../stdperiph/source/stm32f37x_flash.c ****   {
1159:../stdperiph/source/stm32f37x_flash.c ****     FLASHstatus = FLASH_BUSY;
1160:../stdperiph/source/stm32f37x_flash.c ****   }
1161:../stdperiph/source/stm32f37x_flash.c ****   else 
1162:../stdperiph/source/stm32f37x_flash.c ****   {  
1163:../stdperiph/source/stm32f37x_flash.c ****     if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 482              		.loc 1 1163 0
 483 000a 094B     		ldr	r3, .L60
 484 000c DB68     		ldr	r3, [r3, #12]
 485 000e 13F0100F 		tst	r3, #16
 486 0012 08D1     		bne	.L58
1164:../stdperiph/source/stm32f37x_flash.c ****     { 
1165:../stdperiph/source/stm32f37x_flash.c ****       FLASHstatus = FLASH_ERROR_WRP;
1166:../stdperiph/source/stm32f37x_flash.c ****     }
1167:../stdperiph/source/stm32f37x_flash.c ****     else 
1168:../stdperiph/source/stm32f37x_flash.c ****     {
1169:../stdperiph/source/stm32f37x_flash.c ****       if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 487              		.loc 1 1169 0
 488 0014 064B     		ldr	r3, .L60
 489 0016 DB68     		ldr	r3, [r3, #12]
 490 0018 13F0040F 		tst	r3, #4
 491 001c 05D0     		beq	.L59
1170:../stdperiph/source/stm32f37x_flash.c ****       {
1171:../stdperiph/source/stm32f37x_flash.c ****         FLASHstatus = FLASH_ERROR_PROGRAM; 
 492              		.loc 1 1171 0
 493 001e 0320     		movs	r0, #3
 494 0020 7047     		bx	lr
 495              	.L57:
1159:../stdperiph/source/stm32f37x_flash.c ****   }
 496              		.loc 1 1159 0
 497 0022 0120     		movs	r0, #1
 498 0024 7047     		bx	lr
 499              	.L58:
1165:../stdperiph/source/stm32f37x_flash.c ****     }
 500              		.loc 1 1165 0
 501 0026 0220     		movs	r0, #2
 502 0028 7047     		bx	lr
 503              	.L59:
1172:../stdperiph/source/stm32f37x_flash.c ****       }
1173:../stdperiph/source/stm32f37x_flash.c ****       else
1174:../stdperiph/source/stm32f37x_flash.c ****       {
1175:../stdperiph/source/stm32f37x_flash.c ****         FLASHstatus = FLASH_COMPLETE;
 504              		.loc 1 1175 0
 505 002a 0420     		movs	r0, #4
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 30


 506              	.LVL18:
1176:../stdperiph/source/stm32f37x_flash.c ****       }
1177:../stdperiph/source/stm32f37x_flash.c ****     }
1178:../stdperiph/source/stm32f37x_flash.c ****   }
1179:../stdperiph/source/stm32f37x_flash.c ****   /* Return the FLASH Status */
1180:../stdperiph/source/stm32f37x_flash.c ****   return FLASHstatus;
1181:../stdperiph/source/stm32f37x_flash.c **** }
 507              		.loc 1 1181 0
 508 002c 7047     		bx	lr
 509              	.L61:
 510 002e 00BF     		.align	2
 511              	.L60:
 512 0030 00200240 		.word	1073881088
 513              		.cfi_endproc
 514              	.LFE139:
 516              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 517              		.align	2
 518              		.global	FLASH_WaitForLastOperation
 519              		.thumb
 520              		.thumb_func
 522              	FLASH_WaitForLastOperation:
 523              	.LFB140:
1182:../stdperiph/source/stm32f37x_flash.c **** 
1183:../stdperiph/source/stm32f37x_flash.c **** /**
1184:../stdperiph/source/stm32f37x_flash.c ****   * @brief  Waits for a FLASH operation to complete or a TIMEOUT to occur.
1185:../stdperiph/source/stm32f37x_flash.c ****   * @param  Timeout: FLASH programming Timeout
1186:../stdperiph/source/stm32f37x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
1187:../stdperiph/source/stm32f37x_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1188:../stdperiph/source/stm32f37x_flash.c ****   */
1189:../stdperiph/source/stm32f37x_flash.c **** FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
1190:../stdperiph/source/stm32f37x_flash.c **** { 
 524              		.loc 1 1190 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              	.LVL19:
 529 0000 10B5     		push	{r4, lr}
 530              	.LCFI0:
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 4, -8
 533              		.cfi_offset 14, -4
 534 0002 0446     		mov	r4, r0
 535              	.LVL20:
1191:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1192:../stdperiph/source/stm32f37x_flash.c ****    
1193:../stdperiph/source/stm32f37x_flash.c ****   /* Check for the FLASH Status */
1194:../stdperiph/source/stm32f37x_flash.c ****   status = FLASH_GetStatus();
 536              		.loc 1 1194 0
 537 0004 FFF7FEFF 		bl	FLASH_GetStatus
 538              	.LVL21:
1195:../stdperiph/source/stm32f37x_flash.c ****   
1196:../stdperiph/source/stm32f37x_flash.c ****   /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
1197:../stdperiph/source/stm32f37x_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 539              		.loc 1 1197 0
 540 0008 02E0     		b	.L63
 541              	.L65:
1198:../stdperiph/source/stm32f37x_flash.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 31


1199:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_GetStatus();
 542              		.loc 1 1199 0
 543 000a FFF7FEFF 		bl	FLASH_GetStatus
 544              	.LVL22:
1200:../stdperiph/source/stm32f37x_flash.c ****     Timeout--;
 545              		.loc 1 1200 0
 546 000e 013C     		subs	r4, r4, #1
 547              	.LVL23:
 548              	.L63:
1197:../stdperiph/source/stm32f37x_flash.c ****   {
 549              		.loc 1 1197 0
 550 0010 0128     		cmp	r0, #1
 551 0012 01D1     		bne	.L64
1197:../stdperiph/source/stm32f37x_flash.c ****   {
 552              		.loc 1 1197 0 is_stmt 0 discriminator 1
 553 0014 002C     		cmp	r4, #0
 554 0016 F8D1     		bne	.L65
 555              	.L64:
1201:../stdperiph/source/stm32f37x_flash.c ****   }
1202:../stdperiph/source/stm32f37x_flash.c ****   
1203:../stdperiph/source/stm32f37x_flash.c ****   if(Timeout == 0x00 )
 556              		.loc 1 1203 0 is_stmt 1
 557 0018 04B9     		cbnz	r4, .L66
1204:../stdperiph/source/stm32f37x_flash.c ****   {
1205:../stdperiph/source/stm32f37x_flash.c ****     status = FLASH_TIMEOUT;
 558              		.loc 1 1205 0
 559 001a 0520     		movs	r0, #5
 560              	.LVL24:
 561              	.L66:
1206:../stdperiph/source/stm32f37x_flash.c ****   }
1207:../stdperiph/source/stm32f37x_flash.c ****   /* Return the operation status */
1208:../stdperiph/source/stm32f37x_flash.c ****   return status;
1209:../stdperiph/source/stm32f37x_flash.c **** }
 562              		.loc 1 1209 0
 563 001c 10BD     		pop	{r4, pc}
 564              		.cfi_endproc
 565              	.LFE140:
 567 001e 00BF     		.section	.text.FLASH_ErasePage,"ax",%progbits
 568              		.align	2
 569              		.global	FLASH_ErasePage
 570              		.thumb
 571              		.thumb_func
 573              	FLASH_ErasePage:
 574              	.LFB116:
 271:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 575              		.loc 1 271 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL25:
 580 0000 38B5     		push	{r3, r4, r5, lr}
 581              	.LCFI1:
 582              		.cfi_def_cfa_offset 16
 583              		.cfi_offset 3, -16
 584              		.cfi_offset 4, -12
 585              		.cfi_offset 5, -8
 586              		.cfi_offset 14, -4
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 32


 587 0002 0546     		mov	r5, r0
 588              	.LVL26:
 278:../stdperiph/source/stm32f37x_flash.c ****   
 589              		.loc 1 278 0
 590 0004 4FF43020 		mov	r0, #720896
 591              	.LVL27:
 592 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 593              	.LVL28:
 280:../stdperiph/source/stm32f37x_flash.c ****   { 
 594              		.loc 1 280 0
 595 000c 0428     		cmp	r0, #4
 596 000e 11D1     		bne	.L70
 283:../stdperiph/source/stm32f37x_flash.c ****     FLASH->AR  = Page_Address; 
 597              		.loc 1 283 0
 598 0010 094C     		ldr	r4, .L72
 599 0012 2369     		ldr	r3, [r4, #16]
 600 0014 43F00203 		orr	r3, r3, #2
 601 0018 2361     		str	r3, [r4, #16]
 284:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 602              		.loc 1 284 0
 603 001a 6561     		str	r5, [r4, #20]
 285:../stdperiph/source/stm32f37x_flash.c ****     
 604              		.loc 1 285 0
 605 001c 2369     		ldr	r3, [r4, #16]
 606 001e 43F04003 		orr	r3, r3, #64
 607 0022 2361     		str	r3, [r4, #16]
 288:../stdperiph/source/stm32f37x_flash.c ****     
 608              		.loc 1 288 0
 609 0024 4FF43020 		mov	r0, #720896
 610              	.LVL29:
 611 0028 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 612              	.LVL30:
 291:../stdperiph/source/stm32f37x_flash.c ****   }
 613              		.loc 1 291 0
 614 002c 2369     		ldr	r3, [r4, #16]
 615 002e 23F00203 		bic	r3, r3, #2
 616 0032 2361     		str	r3, [r4, #16]
 617              	.L70:
 296:../stdperiph/source/stm32f37x_flash.c **** 
 618              		.loc 1 296 0
 619 0034 38BD     		pop	{r3, r4, r5, pc}
 620              	.LVL31:
 621              	.L73:
 622 0036 00BF     		.align	2
 623              	.L72:
 624 0038 00200240 		.word	1073881088
 625              		.cfi_endproc
 626              	.LFE116:
 628              		.section	.text.FLASH_EraseAllPages,"ax",%progbits
 629              		.align	2
 630              		.global	FLASH_EraseAllPages
 631              		.thumb
 632              		.thumb_func
 634              	FLASH_EraseAllPages:
 635              	.LFB117:
 309:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 636              		.loc 1 309 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 33


 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640 0000 10B5     		push	{r4, lr}
 641              	.LCFI2:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 4, -8
 644              		.cfi_offset 14, -4
 645              	.LVL32:
 313:../stdperiph/source/stm32f37x_flash.c ****   
 646              		.loc 1 313 0
 647 0002 4FF43020 		mov	r0, #720896
 648 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 649              	.LVL33:
 315:../stdperiph/source/stm32f37x_flash.c ****   {
 650              		.loc 1 315 0
 651 000a 0428     		cmp	r0, #4
 652 000c 10D1     		bne	.L75
 318:../stdperiph/source/stm32f37x_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 653              		.loc 1 318 0
 654 000e 094C     		ldr	r4, .L77
 655 0010 2369     		ldr	r3, [r4, #16]
 656 0012 43F00403 		orr	r3, r3, #4
 657 0016 2361     		str	r3, [r4, #16]
 319:../stdperiph/source/stm32f37x_flash.c ****     
 658              		.loc 1 319 0
 659 0018 2369     		ldr	r3, [r4, #16]
 660 001a 43F04003 		orr	r3, r3, #64
 661 001e 2361     		str	r3, [r4, #16]
 322:../stdperiph/source/stm32f37x_flash.c **** 
 662              		.loc 1 322 0
 663 0020 4FF43020 		mov	r0, #720896
 664              	.LVL34:
 665 0024 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 666              	.LVL35:
 325:../stdperiph/source/stm32f37x_flash.c ****   }
 667              		.loc 1 325 0
 668 0028 2369     		ldr	r3, [r4, #16]
 669 002a 23F00403 		bic	r3, r3, #4
 670 002e 2361     		str	r3, [r4, #16]
 671              	.L75:
 330:../stdperiph/source/stm32f37x_flash.c **** 
 672              		.loc 1 330 0
 673 0030 10BD     		pop	{r4, pc}
 674              	.L78:
 675 0032 00BF     		.align	2
 676              	.L77:
 677 0034 00200240 		.word	1073881088
 678              		.cfi_endproc
 679              	.LFE117:
 681              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 682              		.align	2
 683              		.global	FLASH_ProgramWord
 684              		.thumb
 685              		.thumb_func
 687              	FLASH_ProgramWord:
 688              	.LFB118:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 34


 343:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 689              		.loc 1 343 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 8
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693              	.LVL36:
 694 0000 30B5     		push	{r4, r5, lr}
 695              	.LCFI3:
 696              		.cfi_def_cfa_offset 12
 697              		.cfi_offset 4, -12
 698              		.cfi_offset 5, -8
 699              		.cfi_offset 14, -4
 700 0002 83B0     		sub	sp, sp, #12
 701              	.LCFI4:
 702              		.cfi_def_cfa_offset 24
 703 0004 0546     		mov	r5, r0
 704 0006 0C46     		mov	r4, r1
 705              	.LVL37:
 345:../stdperiph/source/stm32f37x_flash.c **** 
 706              		.loc 1 345 0
 707 0008 0023     		movs	r3, #0
 708 000a 0193     		str	r3, [sp, #4]
 351:../stdperiph/source/stm32f37x_flash.c ****   
 709              		.loc 1 351 0
 710 000c 4FF43020 		mov	r0, #720896
 711              	.LVL38:
 712 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 713              	.LVL39:
 353:../stdperiph/source/stm32f37x_flash.c ****   {
 714              		.loc 1 353 0
 715 0014 0428     		cmp	r0, #4
 716 0016 20D1     		bne	.L80
 357:../stdperiph/source/stm32f37x_flash.c ****   
 717              		.loc 1 357 0
 718 0018 114A     		ldr	r2, .L83
 719 001a 1369     		ldr	r3, [r2, #16]
 720 001c 43F00103 		orr	r3, r3, #1
 721 0020 1361     		str	r3, [r2, #16]
 359:../stdperiph/source/stm32f37x_flash.c ****     
 722              		.loc 1 359 0
 723 0022 A3B2     		uxth	r3, r4
 724 0024 2B80     		strh	r3, [r5]	@ movhi
 362:../stdperiph/source/stm32f37x_flash.c ****  
 725              		.loc 1 362 0
 726 0026 4FF43020 		mov	r0, #720896
 727              	.LVL40:
 728 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 729              	.LVL41:
 364:../stdperiph/source/stm32f37x_flash.c ****     {
 730              		.loc 1 364 0
 731 002e 0428     		cmp	r0, #4
 732 0030 0ED1     		bne	.L81
 368:../stdperiph/source/stm32f37x_flash.c **** 
 733              		.loc 1 368 0
 734 0032 0235     		adds	r5, r5, #2
 735              	.LVL42:
 736 0034 0195     		str	r5, [sp, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 35


 370:../stdperiph/source/stm32f37x_flash.c ****     
 737              		.loc 1 370 0
 738 0036 019B     		ldr	r3, [sp, #4]
 739 0038 240C     		lsrs	r4, r4, #16
 740              	.LVL43:
 741 003a 1C80     		strh	r4, [r3]	@ movhi
 373:../stdperiph/source/stm32f37x_flash.c ****         
 742              		.loc 1 373 0
 743 003c 4FF43020 		mov	r0, #720896
 744              	.LVL44:
 745 0040 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 746              	.LVL45:
 376:../stdperiph/source/stm32f37x_flash.c ****     }
 747              		.loc 1 376 0
 748 0044 064A     		ldr	r2, .L83
 749 0046 1369     		ldr	r3, [r2, #16]
 750 0048 23F00103 		bic	r3, r3, #1
 751 004c 1361     		str	r3, [r2, #16]
 752 004e 04E0     		b	.L80
 753              	.LVL46:
 754              	.L81:
 381:../stdperiph/source/stm32f37x_flash.c ****     }
 755              		.loc 1 381 0
 756 0050 034A     		ldr	r2, .L83
 757 0052 1369     		ldr	r3, [r2, #16]
 758 0054 23F00103 		bic	r3, r3, #1
 759 0058 1361     		str	r3, [r2, #16]
 760              	.LVL47:
 761              	.L80:
 387:../stdperiph/source/stm32f37x_flash.c **** 
 762              		.loc 1 387 0
 763 005a 03B0     		add	sp, sp, #12
 764              	.LCFI5:
 765              		.cfi_def_cfa_offset 12
 766              		@ sp needed
 767 005c 30BD     		pop	{r4, r5, pc}
 768              	.L84:
 769 005e 00BF     		.align	2
 770              	.L83:
 771 0060 00200240 		.word	1073881088
 772              		.cfi_endproc
 773              	.LFE118:
 775              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 776              		.align	2
 777              		.global	FLASH_ProgramHalfWord
 778              		.thumb
 779              		.thumb_func
 781              	FLASH_ProgramHalfWord:
 782              	.LFB119:
 400:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 783              		.loc 1 400 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 0
 786              		@ frame_needed = 0, uses_anonymous_args = 0
 787              	.LVL48:
 788 0000 70B5     		push	{r4, r5, r6, lr}
 789              	.LCFI6:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 36


 790              		.cfi_def_cfa_offset 16
 791              		.cfi_offset 4, -16
 792              		.cfi_offset 5, -12
 793              		.cfi_offset 6, -8
 794              		.cfi_offset 14, -4
 795 0002 0446     		mov	r4, r0
 796 0004 0D46     		mov	r5, r1
 797              	.LVL49:
 407:../stdperiph/source/stm32f37x_flash.c ****   
 798              		.loc 1 407 0
 799 0006 4FF43020 		mov	r0, #720896
 800              	.LVL50:
 801 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 802              	.LVL51:
 409:../stdperiph/source/stm32f37x_flash.c ****   {
 803              		.loc 1 409 0
 804 000e 0428     		cmp	r0, #4
 805 0010 0DD1     		bne	.L86
 412:../stdperiph/source/stm32f37x_flash.c ****   
 806              		.loc 1 412 0
 807 0012 074E     		ldr	r6, .L88
 808 0014 3369     		ldr	r3, [r6, #16]
 809 0016 43F00103 		orr	r3, r3, #1
 810 001a 3361     		str	r3, [r6, #16]
 414:../stdperiph/source/stm32f37x_flash.c **** 
 811              		.loc 1 414 0
 812 001c 2580     		strh	r5, [r4]	@ movhi
 417:../stdperiph/source/stm32f37x_flash.c ****     
 813              		.loc 1 417 0
 814 001e 4FF43020 		mov	r0, #720896
 815              	.LVL52:
 816 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 817              	.LVL53:
 420:../stdperiph/source/stm32f37x_flash.c ****   } 
 818              		.loc 1 420 0
 819 0026 3369     		ldr	r3, [r6, #16]
 820 0028 23F00103 		bic	r3, r3, #1
 821 002c 3361     		str	r3, [r6, #16]
 822              	.L86:
 425:../stdperiph/source/stm32f37x_flash.c **** 
 823              		.loc 1 425 0
 824 002e 70BD     		pop	{r4, r5, r6, pc}
 825              	.LVL54:
 826              	.L89:
 827              		.align	2
 828              	.L88:
 829 0030 00200240 		.word	1073881088
 830              		.cfi_endproc
 831              	.LFE119:
 833              		.section	.text.FLASH_OB_Erase,"ax",%progbits
 834              		.align	2
 835              		.global	FLASH_OB_Erase
 836              		.thumb
 837              		.thumb_func
 839              	FLASH_OB_Erase:
 840              	.LFB123:
 531:../stdperiph/source/stm32f37x_flash.c ****   uint16_t rdptmp = OB_RDP_Level_0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 37


 841              		.loc 1 531 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845 0000 10B5     		push	{r4, lr}
 846              	.LCFI7:
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 4, -8
 849              		.cfi_offset 14, -4
 850              	.LVL55:
 537:../stdperiph/source/stm32f37x_flash.c ****   {
 851              		.loc 1 537 0
 852 0002 FFF7FEFF 		bl	FLASH_OB_GetRDP
 853              	.LVL56:
 854 0006 08B9     		cbnz	r0, .L94
 532:../stdperiph/source/stm32f37x_flash.c **** 
 855              		.loc 1 532 0
 856 0008 AA24     		movs	r4, #170
 857 000a 00E0     		b	.L91
 858              	.L94:
 539:../stdperiph/source/stm32f37x_flash.c ****   }
 859              		.loc 1 539 0
 860 000c 0024     		movs	r4, #0
 861              	.L91:
 862              	.LVL57:
 543:../stdperiph/source/stm32f37x_flash.c **** 
 863              		.loc 1 543 0
 864 000e 4FF43020 		mov	r0, #720896
 865 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 866              	.LVL58:
 545:../stdperiph/source/stm32f37x_flash.c ****   {   
 867              		.loc 1 545 0
 868 0016 0428     		cmp	r0, #4
 869 0018 2CD1     		bne	.L92
 548:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 870              		.loc 1 548 0
 871 001a 174B     		ldr	r3, .L96
 872 001c 1A69     		ldr	r2, [r3, #16]
 873 001e 42F02002 		orr	r2, r2, #32
 874 0022 1A61     		str	r2, [r3, #16]
 549:../stdperiph/source/stm32f37x_flash.c **** 
 875              		.loc 1 549 0
 876 0024 1A69     		ldr	r2, [r3, #16]
 877 0026 42F04002 		orr	r2, r2, #64
 878 002a 1A61     		str	r2, [r3, #16]
 552:../stdperiph/source/stm32f37x_flash.c ****     
 879              		.loc 1 552 0
 880 002c 4FF43020 		mov	r0, #720896
 881              	.LVL59:
 882 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 883              	.LVL60:
 554:../stdperiph/source/stm32f37x_flash.c ****     {
 884              		.loc 1 554 0
 885 0034 0428     		cmp	r0, #4
 886 0036 16D1     		bne	.L93
 557:../stdperiph/source/stm32f37x_flash.c ****        
 887              		.loc 1 557 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 38


 888 0038 0F4B     		ldr	r3, .L96
 889 003a 1A69     		ldr	r2, [r3, #16]
 890 003c 22F02002 		bic	r2, r2, #32
 891 0040 1A61     		str	r2, [r3, #16]
 560:../stdperiph/source/stm32f37x_flash.c **** 
 892              		.loc 1 560 0
 893 0042 1A69     		ldr	r2, [r3, #16]
 894 0044 42F01002 		orr	r2, r2, #16
 895 0048 1A61     		str	r2, [r3, #16]
 563:../stdperiph/source/stm32f37x_flash.c **** 
 896              		.loc 1 563 0
 897 004a 0C4B     		ldr	r3, .L96+4
 898 004c 1C80     		strh	r4, [r3]	@ movhi
 566:../stdperiph/source/stm32f37x_flash.c ****  
 899              		.loc 1 566 0
 900 004e 4FF43020 		mov	r0, #720896
 901              	.LVL61:
 902 0052 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 903              	.LVL62:
 568:../stdperiph/source/stm32f37x_flash.c ****       {
 904              		.loc 1 568 0
 905 0056 0528     		cmp	r0, #5
 906 0058 0CD0     		beq	.L92
 571:../stdperiph/source/stm32f37x_flash.c ****       }
 907              		.loc 1 571 0
 908 005a 074A     		ldr	r2, .L96
 909 005c 1369     		ldr	r3, [r2, #16]
 910 005e 23F01003 		bic	r3, r3, #16
 911 0062 1361     		str	r3, [r2, #16]
 912 0064 10BD     		pop	{r4, pc}
 913              	.LVL63:
 914              	.L93:
 576:../stdperiph/source/stm32f37x_flash.c ****       {
 915              		.loc 1 576 0
 916 0066 0528     		cmp	r0, #5
 917 0068 04D0     		beq	.L92
 579:../stdperiph/source/stm32f37x_flash.c ****       }
 918              		.loc 1 579 0
 919 006a 034A     		ldr	r2, .L96
 920 006c 1369     		ldr	r3, [r2, #16]
 921 006e 23F01003 		bic	r3, r3, #16
 922 0072 1361     		str	r3, [r2, #16]
 923              	.L92:
 585:../stdperiph/source/stm32f37x_flash.c **** 
 924              		.loc 1 585 0
 925 0074 10BD     		pop	{r4, pc}
 926              	.LVL64:
 927              	.L97:
 928 0076 00BF     		.align	2
 929              	.L96:
 930 0078 00200240 		.word	1073881088
 931 007c 00F8FF1F 		.word	536868864
 932              		.cfi_endproc
 933              	.LFE123:
 935              		.section	.text.FLASH_OB_ProgramData,"ax",%progbits
 936              		.align	2
 937              		.global	FLASH_OB_ProgramData
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 39


 938              		.thumb
 939              		.thumb_func
 941              	FLASH_OB_ProgramData:
 942              	.LFB124:
 599:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 943              		.loc 1 599 0
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
 947              	.LVL65:
 948 0000 38B5     		push	{r3, r4, r5, lr}
 949              	.LCFI8:
 950              		.cfi_def_cfa_offset 16
 951              		.cfi_offset 3, -16
 952              		.cfi_offset 4, -12
 953              		.cfi_offset 5, -8
 954              		.cfi_offset 14, -4
 955 0002 0546     		mov	r5, r0
 956 0004 0C46     		mov	r4, r1
 957              	.LVL66:
 603:../stdperiph/source/stm32f37x_flash.c **** 
 958              		.loc 1 603 0
 959 0006 4FF43020 		mov	r0, #720896
 960              	.LVL67:
 961 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 962              	.LVL68:
 605:../stdperiph/source/stm32f37x_flash.c ****   {
 963              		.loc 1 605 0
 964 000e 0428     		cmp	r0, #4
 965 0010 11D1     		bne	.L99
 608:../stdperiph/source/stm32f37x_flash.c ****     *(__IO uint16_t*)Address = Data;
 966              		.loc 1 608 0
 967 0012 094A     		ldr	r2, .L101
 968 0014 1369     		ldr	r3, [r2, #16]
 969 0016 43F01003 		orr	r3, r3, #16
 970 001a 1361     		str	r3, [r2, #16]
 609:../stdperiph/source/stm32f37x_flash.c ****     
 971              		.loc 1 609 0
 972 001c A4B2     		uxth	r4, r4
 973 001e 2C80     		strh	r4, [r5]	@ movhi
 612:../stdperiph/source/stm32f37x_flash.c ****     
 974              		.loc 1 612 0
 975 0020 4FF43020 		mov	r0, #720896
 976              	.LVL69:
 977 0024 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 978              	.LVL70:
 614:../stdperiph/source/stm32f37x_flash.c ****     {
 979              		.loc 1 614 0
 980 0028 0528     		cmp	r0, #5
 981 002a 04D0     		beq	.L99
 617:../stdperiph/source/stm32f37x_flash.c ****     }
 982              		.loc 1 617 0
 983 002c 024A     		ldr	r2, .L101
 984 002e 1369     		ldr	r3, [r2, #16]
 985 0030 23F01003 		bic	r3, r3, #16
 986 0034 1361     		str	r3, [r2, #16]
 987              	.L99:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 40


 622:../stdperiph/source/stm32f37x_flash.c **** 
 988              		.loc 1 622 0
 989 0036 38BD     		pop	{r3, r4, r5, pc}
 990              	.LVL71:
 991              	.L102:
 992              		.align	2
 993              	.L101:
 994 0038 00200240 		.word	1073881088
 995              		.cfi_endproc
 996              	.LFE124:
 998              		.section	.text.FLASH_OB_EnableWRP,"ax",%progbits
 999              		.align	2
 1000              		.global	FLASH_OB_EnableWRP
 1001              		.thumb
 1002              		.thumb_func
 1004              	FLASH_OB_EnableWRP:
 1005              	.LFB125:
 637:../stdperiph/source/stm32f37x_flash.c ****   uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
 1006              		.loc 1 637 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010              	.LVL72:
 1011 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1012              	.LCFI9:
 1013              		.cfi_def_cfa_offset 24
 1014              		.cfi_offset 3, -24
 1015              		.cfi_offset 4, -20
 1016              		.cfi_offset 5, -16
 1017              		.cfi_offset 6, -12
 1018              		.cfi_offset 7, -8
 1019              		.cfi_offset 14, -4
 1020              	.LVL73:
 645:../stdperiph/source/stm32f37x_flash.c ****   WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 1021              		.loc 1 645 0
 1022 0002 C043     		mvns	r0, r0
 1023              	.LVL74:
 646:../stdperiph/source/stm32f37x_flash.c ****   WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8); 
 1024              		.loc 1 646 0
 1025 0004 C5B2     		uxtb	r5, r0
 1026              	.LVL75:
 647:../stdperiph/source/stm32f37x_flash.c ****   WRP2_Data = (uint16_t)((OB_WRP & OB_WRP1_WRP1) >> 16);
 1027              		.loc 1 647 0
 1028 0006 C0F30727 		ubfx	r7, r0, #8, #8
 1029              	.LVL76:
 648:../stdperiph/source/stm32f37x_flash.c ****   WRP3_Data = (uint16_t)((OB_WRP & OB_WRP1_nWRP1) >> 24); 
 1030              		.loc 1 648 0
 1031 000a C0F30746 		ubfx	r6, r0, #16, #8
 1032              	.LVL77:
 649:../stdperiph/source/stm32f37x_flash.c ****   
 1033              		.loc 1 649 0
 1034 000e 040E     		lsrs	r4, r0, #24
 1035              	.LVL78:
 652:../stdperiph/source/stm32f37x_flash.c ****   
 1036              		.loc 1 652 0
 1037 0010 4FF43020 		mov	r0, #720896
 1038              	.LVL79:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 41


 1039 0014 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1040              	.LVL80:
 654:../stdperiph/source/stm32f37x_flash.c ****   {
 1041              		.loc 1 654 0
 1042 0018 0428     		cmp	r0, #4
 1043 001a 31D1     		bne	.L104
 656:../stdperiph/source/stm32f37x_flash.c **** 
 1044              		.loc 1 656 0
 1045 001c 194A     		ldr	r2, .L110
 1046 001e 1369     		ldr	r3, [r2, #16]
 1047 0020 43F01003 		orr	r3, r3, #16
 1048 0024 1361     		str	r3, [r2, #16]
 658:../stdperiph/source/stm32f37x_flash.c ****     {
 1049              		.loc 1 658 0
 1050 0026 FF2D     		cmp	r5, #255
 1051 0028 05D0     		beq	.L105
 660:../stdperiph/source/stm32f37x_flash.c ****       
 1052              		.loc 1 660 0
 1053 002a 174B     		ldr	r3, .L110+4
 1054 002c 1D81     		strh	r5, [r3, #8]	@ movhi
 663:../stdperiph/source/stm32f37x_flash.c ****     }
 1055              		.loc 1 663 0
 1056 002e 4FF43020 		mov	r0, #720896
 1057              	.LVL81:
 1058 0032 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1059              	.LVL82:
 1060              	.L105:
 665:../stdperiph/source/stm32f37x_flash.c ****     {
 1061              		.loc 1 665 0
 1062 0036 0428     		cmp	r0, #4
 1063 0038 07D1     		bne	.L106
 665:../stdperiph/source/stm32f37x_flash.c ****     {
 1064              		.loc 1 665 0 is_stmt 0 discriminator 1
 1065 003a FF2F     		cmp	r7, #255
 1066 003c 05D0     		beq	.L106
 667:../stdperiph/source/stm32f37x_flash.c ****       
 1067              		.loc 1 667 0 is_stmt 1
 1068 003e 124B     		ldr	r3, .L110+4
 1069 0040 5F81     		strh	r7, [r3, #10]	@ movhi
 670:../stdperiph/source/stm32f37x_flash.c ****     }
 1070              		.loc 1 670 0
 1071 0042 4FF43020 		mov	r0, #720896
 1072              	.LVL83:
 1073 0046 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1074              	.LVL84:
 1075              	.L106:
 672:../stdperiph/source/stm32f37x_flash.c ****     {
 1076              		.loc 1 672 0
 1077 004a 0428     		cmp	r0, #4
 1078 004c 07D1     		bne	.L107
 672:../stdperiph/source/stm32f37x_flash.c ****     {
 1079              		.loc 1 672 0 is_stmt 0 discriminator 1
 1080 004e FF2E     		cmp	r6, #255
 1081 0050 05D0     		beq	.L107
 674:../stdperiph/source/stm32f37x_flash.c ****       
 1082              		.loc 1 674 0 is_stmt 1
 1083 0052 0D4B     		ldr	r3, .L110+4
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 42


 1084 0054 9E81     		strh	r6, [r3, #12]	@ movhi
 677:../stdperiph/source/stm32f37x_flash.c ****     }
 1085              		.loc 1 677 0
 1086 0056 4FF43020 		mov	r0, #720896
 1087              	.LVL85:
 1088 005a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1089              	.LVL86:
 1090              	.L107:
 679:../stdperiph/source/stm32f37x_flash.c ****     {
 1091              		.loc 1 679 0
 1092 005e 0428     		cmp	r0, #4
 1093 0060 07D1     		bne	.L108
 679:../stdperiph/source/stm32f37x_flash.c ****     {
 1094              		.loc 1 679 0 is_stmt 0 discriminator 1
 1095 0062 FF2C     		cmp	r4, #255
 1096 0064 05D0     		beq	.L108
 681:../stdperiph/source/stm32f37x_flash.c ****       
 1097              		.loc 1 681 0 is_stmt 1
 1098 0066 084B     		ldr	r3, .L110+4
 1099 0068 DC81     		strh	r4, [r3, #14]	@ movhi
 684:../stdperiph/source/stm32f37x_flash.c ****     }
 1100              		.loc 1 684 0
 1101 006a 4FF43020 		mov	r0, #720896
 1102              	.LVL87:
 1103 006e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1104              	.LVL88:
 1105              	.L108:
 687:../stdperiph/source/stm32f37x_flash.c ****     {
 1106              		.loc 1 687 0
 1107 0072 0528     		cmp	r0, #5
 1108 0074 04D0     		beq	.L104
 690:../stdperiph/source/stm32f37x_flash.c ****     }
 1109              		.loc 1 690 0
 1110 0076 034A     		ldr	r2, .L110
 1111 0078 1369     		ldr	r3, [r2, #16]
 1112 007a 23F01003 		bic	r3, r3, #16
 1113 007e 1361     		str	r3, [r2, #16]
 1114              	.L104:
 695:../stdperiph/source/stm32f37x_flash.c **** 
 1115              		.loc 1 695 0
 1116 0080 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1117              	.LVL89:
 1118              	.L111:
 1119 0082 00BF     		.align	2
 1120              	.L110:
 1121 0084 00200240 		.word	1073881088
 1122 0088 00F8FF1F 		.word	536868864
 1123              		.cfi_endproc
 1124              	.LFE125:
 1126              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 1127              		.align	2
 1128              		.global	FLASH_OB_RDPConfig
 1129              		.thumb
 1130              		.thumb_func
 1132              	FLASH_OB_RDPConfig:
 1133              	.LFB126:
 712:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 43


 1134              		.loc 1 712 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              	.LVL90:
 1139 0000 10B5     		push	{r4, lr}
 1140              	.LCFI10:
 1141              		.cfi_def_cfa_offset 8
 1142              		.cfi_offset 4, -8
 1143              		.cfi_offset 14, -4
 1144 0002 0446     		mov	r4, r0
 1145              	.LVL91:
 717:../stdperiph/source/stm32f37x_flash.c ****   
 1146              		.loc 1 717 0
 1147 0004 4FF43020 		mov	r0, #720896
 1148              	.LVL92:
 1149 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1150              	.LVL93:
 719:../stdperiph/source/stm32f37x_flash.c ****   {
 1151              		.loc 1 719 0
 1152 000c 0428     		cmp	r0, #4
 1153 000e 2DD1     		bne	.L113
 721:../stdperiph/source/stm32f37x_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1154              		.loc 1 721 0
 1155 0010 174B     		ldr	r3, .L116
 1156 0012 1A69     		ldr	r2, [r3, #16]
 1157 0014 42F02002 		orr	r2, r2, #32
 1158 0018 1A61     		str	r2, [r3, #16]
 722:../stdperiph/source/stm32f37x_flash.c ****     
 1159              		.loc 1 722 0
 1160 001a 1A69     		ldr	r2, [r3, #16]
 1161 001c 42F04002 		orr	r2, r2, #64
 1162 0020 1A61     		str	r2, [r3, #16]
 725:../stdperiph/source/stm32f37x_flash.c ****     
 1163              		.loc 1 725 0
 1164 0022 4FF43020 		mov	r0, #720896
 1165              	.LVL94:
 1166 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1167              	.LVL95:
 727:../stdperiph/source/stm32f37x_flash.c ****     {
 1168              		.loc 1 727 0
 1169 002a 0428     		cmp	r0, #4
 1170 002c 17D1     		bne	.L114
 730:../stdperiph/source/stm32f37x_flash.c ****       
 1171              		.loc 1 730 0
 1172 002e 104B     		ldr	r3, .L116
 1173 0030 1A69     		ldr	r2, [r3, #16]
 1174 0032 22F02002 		bic	r2, r2, #32
 1175 0036 1A61     		str	r2, [r3, #16]
 733:../stdperiph/source/stm32f37x_flash.c ****        
 1176              		.loc 1 733 0
 1177 0038 1A69     		ldr	r2, [r3, #16]
 1178 003a 42F01002 		orr	r2, r2, #16
 1179 003e 1A61     		str	r2, [r3, #16]
 735:../stdperiph/source/stm32f37x_flash.c **** 
 1180              		.loc 1 735 0
 1181 0040 A4B2     		uxth	r4, r4
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 44


 1182 0042 0C4B     		ldr	r3, .L116+4
 1183 0044 1C80     		strh	r4, [r3]	@ movhi
 738:../stdperiph/source/stm32f37x_flash.c ****     
 1184              		.loc 1 738 0
 1185 0046 4FF43020 		mov	r0, #720896
 1186              	.LVL96:
 1187 004a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1188              	.LVL97:
 740:../stdperiph/source/stm32f37x_flash.c ****       {
 1189              		.loc 1 740 0
 1190 004e 0528     		cmp	r0, #5
 1191 0050 0CD0     		beq	.L113
 743:../stdperiph/source/stm32f37x_flash.c ****       }
 1192              		.loc 1 743 0
 1193 0052 074A     		ldr	r2, .L116
 1194 0054 1369     		ldr	r3, [r2, #16]
 1195 0056 23F01003 		bic	r3, r3, #16
 1196 005a 1361     		str	r3, [r2, #16]
 1197 005c 10BD     		pop	{r4, pc}
 1198              	.L114:
 748:../stdperiph/source/stm32f37x_flash.c ****       {
 1199              		.loc 1 748 0
 1200 005e 0528     		cmp	r0, #5
 1201 0060 04D0     		beq	.L113
 751:../stdperiph/source/stm32f37x_flash.c ****       }
 1202              		.loc 1 751 0
 1203 0062 034A     		ldr	r2, .L116
 1204 0064 1369     		ldr	r3, [r2, #16]
 1205 0066 23F02003 		bic	r3, r3, #32
 1206 006a 1361     		str	r3, [r2, #16]
 1207              	.L113:
 757:../stdperiph/source/stm32f37x_flash.c **** 
 1208              		.loc 1 757 0
 1209 006c 10BD     		pop	{r4, pc}
 1210              	.L117:
 1211 006e 00BF     		.align	2
 1212              	.L116:
 1213 0070 00200240 		.word	1073881088
 1214 0074 00F8FF1F 		.word	536868864
 1215              		.cfi_endproc
 1216              	.LFE126:
 1218              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1219              		.align	2
 1220              		.global	FLASH_OB_UserConfig
 1221              		.thumb
 1222              		.thumb_func
 1224              	FLASH_OB_UserConfig:
 1225              	.LFB127:
 780:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1226              		.loc 1 780 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              	.LVL98:
 1231 0000 70B5     		push	{r4, r5, r6, lr}
 1232              	.LCFI11:
 1233              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 45


 1234              		.cfi_offset 4, -16
 1235              		.cfi_offset 5, -12
 1236              		.cfi_offset 6, -8
 1237              		.cfi_offset 14, -4
 1238 0002 0646     		mov	r6, r0
 1239 0004 0C46     		mov	r4, r1
 1240 0006 1546     		mov	r5, r2
 1241              	.LVL99:
 789:../stdperiph/source/stm32f37x_flash.c ****   
 1242              		.loc 1 789 0
 1243 0008 4FF43020 		mov	r0, #720896
 1244              	.LVL100:
 1245 000c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1246              	.LVL101:
 791:../stdperiph/source/stm32f37x_flash.c ****   {  
 1247              		.loc 1 791 0
 1248 0010 0428     		cmp	r0, #4
 1249 0012 15D1     		bne	.L119
 794:../stdperiph/source/stm32f37x_flash.c **** 
 1250              		.loc 1 794 0
 1251 0014 0B4A     		ldr	r2, .L121
 1252 0016 1369     		ldr	r3, [r2, #16]
 1253 0018 43F01003 		orr	r3, r3, #16
 1254 001c 1361     		str	r3, [r2, #16]
 796:../stdperiph/source/stm32f37x_flash.c ****   
 1255              		.loc 1 796 0
 1256 001e 3443     		orrs	r4, r4, r6
 1257 0020 2C43     		orrs	r4, r4, r5
 1258 0022 44F0F804 		orr	r4, r4, #248
 1259 0026 084B     		ldr	r3, .L121+4
 1260 0028 5C80     		strh	r4, [r3, #2]	@ movhi
 799:../stdperiph/source/stm32f37x_flash.c **** 
 1261              		.loc 1 799 0
 1262 002a 4FF43020 		mov	r0, #720896
 1263              	.LVL102:
 1264 002e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1265              	.LVL103:
 801:../stdperiph/source/stm32f37x_flash.c ****     {
 1266              		.loc 1 801 0
 1267 0032 0528     		cmp	r0, #5
 1268 0034 04D0     		beq	.L119
 804:../stdperiph/source/stm32f37x_flash.c ****     }
 1269              		.loc 1 804 0
 1270 0036 034A     		ldr	r2, .L121
 1271 0038 1369     		ldr	r3, [r2, #16]
 1272 003a 23F01003 		bic	r3, r3, #16
 1273 003e 1361     		str	r3, [r2, #16]
 1274              	.L119:
 809:../stdperiph/source/stm32f37x_flash.c **** 
 1275              		.loc 1 809 0
 1276 0040 70BD     		pop	{r4, r5, r6, pc}
 1277              	.L122:
 1278 0042 00BF     		.align	2
 1279              	.L121:
 1280 0044 00200240 		.word	1073881088
 1281 0048 00F8FF1F 		.word	536868864
 1282              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 46


 1283              	.LFE127:
 1285              		.section	.text.FLASH_OB_BOOTConfig,"ax",%progbits
 1286              		.align	2
 1287              		.global	FLASH_OB_BOOTConfig
 1288              		.thumb
 1289              		.thumb_func
 1291              	FLASH_OB_BOOTConfig:
 1292              	.LFB128:
 820:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1293              		.loc 1 820 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              	.LVL104:
 1298 0000 10B5     		push	{r4, lr}
 1299              	.LCFI12:
 1300              		.cfi_def_cfa_offset 8
 1301              		.cfi_offset 4, -8
 1302              		.cfi_offset 14, -4
 1303 0002 0446     		mov	r4, r0
 1304              	.LVL105:
 827:../stdperiph/source/stm32f37x_flash.c ****   
 1305              		.loc 1 827 0
 1306 0004 4FF43020 		mov	r0, #720896
 1307              	.LVL106:
 1308 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1309              	.LVL107:
 829:../stdperiph/source/stm32f37x_flash.c ****   {  
 1310              		.loc 1 829 0
 1311 000c 0428     		cmp	r0, #4
 1312 000e 13D1     		bne	.L124
 832:../stdperiph/source/stm32f37x_flash.c ****            
 1313              		.loc 1 832 0
 1314 0010 0A4A     		ldr	r2, .L126
 1315 0012 1369     		ldr	r3, [r2, #16]
 1316 0014 43F01003 		orr	r3, r3, #16
 1317 0018 1361     		str	r3, [r2, #16]
 834:../stdperiph/source/stm32f37x_flash.c ****   
 1318              		.loc 1 834 0
 1319 001a 44F0EF04 		orr	r4, r4, #239
 1320 001e 084B     		ldr	r3, .L126+4
 1321 0020 5C80     		strh	r4, [r3, #2]	@ movhi
 837:../stdperiph/source/stm32f37x_flash.c **** 
 1322              		.loc 1 837 0
 1323 0022 4FF43020 		mov	r0, #720896
 1324              	.LVL108:
 1325 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1326              	.LVL109:
 839:../stdperiph/source/stm32f37x_flash.c ****     {
 1327              		.loc 1 839 0
 1328 002a 0528     		cmp	r0, #5
 1329 002c 04D0     		beq	.L124
 842:../stdperiph/source/stm32f37x_flash.c ****     }
 1330              		.loc 1 842 0
 1331 002e 034A     		ldr	r2, .L126
 1332 0030 1369     		ldr	r3, [r2, #16]
 1333 0032 23F01003 		bic	r3, r3, #16
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 47


 1334 0036 1361     		str	r3, [r2, #16]
 1335              	.L124:
 847:../stdperiph/source/stm32f37x_flash.c **** 
 1336              		.loc 1 847 0
 1337 0038 10BD     		pop	{r4, pc}
 1338              	.L127:
 1339 003a 00BF     		.align	2
 1340              	.L126:
 1341 003c 00200240 		.word	1073881088
 1342 0040 00F8FF1F 		.word	536868864
 1343              		.cfi_endproc
 1344              	.LFE128:
 1346              		.section	.text.FLASH_OB_VDDAConfig,"ax",%progbits
 1347              		.align	2
 1348              		.global	FLASH_OB_VDDAConfig
 1349              		.thumb
 1350              		.thumb_func
 1352              	FLASH_OB_VDDAConfig:
 1353              	.LFB129:
 858:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1354              		.loc 1 858 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 1358              	.LVL110:
 1359 0000 10B5     		push	{r4, lr}
 1360              	.LCFI13:
 1361              		.cfi_def_cfa_offset 8
 1362              		.cfi_offset 4, -8
 1363              		.cfi_offset 14, -4
 1364 0002 0446     		mov	r4, r0
 1365              	.LVL111:
 865:../stdperiph/source/stm32f37x_flash.c ****   
 1366              		.loc 1 865 0
 1367 0004 4FF43020 		mov	r0, #720896
 1368              	.LVL112:
 1369 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1370              	.LVL113:
 867:../stdperiph/source/stm32f37x_flash.c ****   {  
 1371              		.loc 1 867 0
 1372 000c 0428     		cmp	r0, #4
 1373 000e 13D1     		bne	.L129
 870:../stdperiph/source/stm32f37x_flash.c **** 
 1374              		.loc 1 870 0
 1375 0010 0A4A     		ldr	r2, .L131
 1376 0012 1369     		ldr	r3, [r2, #16]
 1377 0014 43F01003 		orr	r3, r3, #16
 1378 0018 1361     		str	r3, [r2, #16]
 872:../stdperiph/source/stm32f37x_flash.c ****   
 1379              		.loc 1 872 0
 1380 001a 44F0DF04 		orr	r4, r4, #223
 1381 001e 084B     		ldr	r3, .L131+4
 1382 0020 5C80     		strh	r4, [r3, #2]	@ movhi
 875:../stdperiph/source/stm32f37x_flash.c **** 
 1383              		.loc 1 875 0
 1384 0022 4FF43020 		mov	r0, #720896
 1385              	.LVL114:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 48


 1386 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1387              	.LVL115:
 877:../stdperiph/source/stm32f37x_flash.c ****     {
 1388              		.loc 1 877 0
 1389 002a 0528     		cmp	r0, #5
 1390 002c 04D0     		beq	.L129
 880:../stdperiph/source/stm32f37x_flash.c ****     }
 1391              		.loc 1 880 0
 1392 002e 034A     		ldr	r2, .L131
 1393 0030 1369     		ldr	r3, [r2, #16]
 1394 0032 23F01003 		bic	r3, r3, #16
 1395 0036 1361     		str	r3, [r2, #16]
 1396              	.L129:
 885:../stdperiph/source/stm32f37x_flash.c **** 
 1397              		.loc 1 885 0
 1398 0038 10BD     		pop	{r4, pc}
 1399              	.L132:
 1400 003a 00BF     		.align	2
 1401              	.L131:
 1402 003c 00200240 		.word	1073881088
 1403 0040 00F8FF1F 		.word	536868864
 1404              		.cfi_endproc
 1405              	.LFE129:
 1407              		.section	.text.FLASH_OB_VDD_SD12Config,"ax",%progbits
 1408              		.align	2
 1409              		.global	FLASH_OB_VDD_SD12Config
 1410              		.thumb
 1411              		.thumb_func
 1413              	FLASH_OB_VDD_SD12Config:
 1414              	.LFB130:
 896:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1415              		.loc 1 896 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              	.LVL116:
 1420 0000 10B5     		push	{r4, lr}
 1421              	.LCFI14:
 1422              		.cfi_def_cfa_offset 8
 1423              		.cfi_offset 4, -8
 1424              		.cfi_offset 14, -4
 1425 0002 0446     		mov	r4, r0
 1426              	.LVL117:
 903:../stdperiph/source/stm32f37x_flash.c ****   
 1427              		.loc 1 903 0
 1428 0004 4FF43020 		mov	r0, #720896
 1429              	.LVL118:
 1430 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1431              	.LVL119:
 905:../stdperiph/source/stm32f37x_flash.c ****   {  
 1432              		.loc 1 905 0
 1433 000c 0428     		cmp	r0, #4
 1434 000e 13D1     		bne	.L134
 908:../stdperiph/source/stm32f37x_flash.c ****            
 1435              		.loc 1 908 0
 1436 0010 0A4A     		ldr	r2, .L136
 1437 0012 1369     		ldr	r3, [r2, #16]
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 49


 1438 0014 43F01003 		orr	r3, r3, #16
 1439 0018 1361     		str	r3, [r2, #16]
 910:../stdperiph/source/stm32f37x_flash.c ****   
 1440              		.loc 1 910 0
 1441 001a 44F07F04 		orr	r4, r4, #127
 1442 001e 084B     		ldr	r3, .L136+4
 1443 0020 5C80     		strh	r4, [r3, #2]	@ movhi
 913:../stdperiph/source/stm32f37x_flash.c **** 
 1444              		.loc 1 913 0
 1445 0022 4FF43020 		mov	r0, #720896
 1446              	.LVL120:
 1447 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1448              	.LVL121:
 915:../stdperiph/source/stm32f37x_flash.c ****     {
 1449              		.loc 1 915 0
 1450 002a 0528     		cmp	r0, #5
 1451 002c 04D0     		beq	.L134
 918:../stdperiph/source/stm32f37x_flash.c ****     }
 1452              		.loc 1 918 0
 1453 002e 034A     		ldr	r2, .L136
 1454 0030 1369     		ldr	r3, [r2, #16]
 1455 0032 23F01003 		bic	r3, r3, #16
 1456 0036 1361     		str	r3, [r2, #16]
 1457              	.L134:
 923:../stdperiph/source/stm32f37x_flash.c **** 
 1458              		.loc 1 923 0
 1459 0038 10BD     		pop	{r4, pc}
 1460              	.L137:
 1461 003a 00BF     		.align	2
 1462              	.L136:
 1463 003c 00200240 		.word	1073881088
 1464 0040 00F8FF1F 		.word	536868864
 1465              		.cfi_endproc
 1466              	.LFE130:
 1468              		.section	.text.FLASH_OB_SRAMParityConfig,"ax",%progbits
 1469              		.align	2
 1470              		.global	FLASH_OB_SRAMParityConfig
 1471              		.thumb
 1472              		.thumb_func
 1474              	FLASH_OB_SRAMParityConfig:
 1475              	.LFB131:
 934:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1476              		.loc 1 934 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
 1480              	.LVL122:
 1481 0000 10B5     		push	{r4, lr}
 1482              	.LCFI15:
 1483              		.cfi_def_cfa_offset 8
 1484              		.cfi_offset 4, -8
 1485              		.cfi_offset 14, -4
 1486 0002 0446     		mov	r4, r0
 1487              	.LVL123:
 941:../stdperiph/source/stm32f37x_flash.c ****   
 1488              		.loc 1 941 0
 1489 0004 4FF43020 		mov	r0, #720896
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 50


 1490              	.LVL124:
 1491 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1492              	.LVL125:
 943:../stdperiph/source/stm32f37x_flash.c ****   {  
 1493              		.loc 1 943 0
 1494 000c 0428     		cmp	r0, #4
 1495 000e 13D1     		bne	.L139
 946:../stdperiph/source/stm32f37x_flash.c **** 
 1496              		.loc 1 946 0
 1497 0010 0A4A     		ldr	r2, .L141
 1498 0012 1369     		ldr	r3, [r2, #16]
 1499 0014 43F01003 		orr	r3, r3, #16
 1500 0018 1361     		str	r3, [r2, #16]
 948:../stdperiph/source/stm32f37x_flash.c ****   
 1501              		.loc 1 948 0
 1502 001a 44F0BF04 		orr	r4, r4, #191
 1503 001e 084B     		ldr	r3, .L141+4
 1504 0020 5C80     		strh	r4, [r3, #2]	@ movhi
 951:../stdperiph/source/stm32f37x_flash.c **** 
 1505              		.loc 1 951 0
 1506 0022 4FF43020 		mov	r0, #720896
 1507              	.LVL126:
 1508 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1509              	.LVL127:
 953:../stdperiph/source/stm32f37x_flash.c ****     {
 1510              		.loc 1 953 0
 1511 002a 0528     		cmp	r0, #5
 1512 002c 04D0     		beq	.L139
 956:../stdperiph/source/stm32f37x_flash.c ****     }
 1513              		.loc 1 956 0
 1514 002e 034A     		ldr	r2, .L141
 1515 0030 1369     		ldr	r3, [r2, #16]
 1516 0032 23F01003 		bic	r3, r3, #16
 1517 0036 1361     		str	r3, [r2, #16]
 1518              	.L139:
 961:../stdperiph/source/stm32f37x_flash.c **** 
 1519              		.loc 1 961 0
 1520 0038 10BD     		pop	{r4, pc}
 1521              	.L142:
 1522 003a 00BF     		.align	2
 1523              	.L141:
 1524 003c 00200240 		.word	1073881088
 1525 0040 00F8FF1F 		.word	536868864
 1526              		.cfi_endproc
 1527              	.LFE131:
 1529              		.section	.text.FLASH_OB_WriteUser,"ax",%progbits
 1530              		.align	2
 1531              		.global	FLASH_OB_WriteUser
 1532              		.thumb
 1533              		.thumb_func
 1535              	FLASH_OB_WriteUser:
 1536              	.LFB132:
 988:../stdperiph/source/stm32f37x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1537              		.loc 1 988 0
 1538              		.cfi_startproc
 1539              		@ args = 0, pretend = 0, frame = 0
 1540              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 51


 1541              	.LVL128:
 1542 0000 10B5     		push	{r4, lr}
 1543              	.LCFI16:
 1544              		.cfi_def_cfa_offset 8
 1545              		.cfi_offset 4, -8
 1546              		.cfi_offset 14, -4
 1547 0002 0446     		mov	r4, r0
 1548              	.LVL129:
 992:../stdperiph/source/stm32f37x_flash.c ****   
 1549              		.loc 1 992 0
 1550 0004 4FF43020 		mov	r0, #720896
 1551              	.LVL130:
 1552 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1553              	.LVL131:
 994:../stdperiph/source/stm32f37x_flash.c ****   {  
 1554              		.loc 1 994 0
 1555 000c 0428     		cmp	r0, #4
 1556 000e 13D1     		bne	.L144
 997:../stdperiph/source/stm32f37x_flash.c ****            
 1557              		.loc 1 997 0
 1558 0010 0A4A     		ldr	r2, .L146
 1559 0012 1369     		ldr	r3, [r2, #16]
 1560 0014 43F01003 		orr	r3, r3, #16
 1561 0018 1361     		str	r3, [r2, #16]
 999:../stdperiph/source/stm32f37x_flash.c ****   
 1562              		.loc 1 999 0
 1563 001a 44F04804 		orr	r4, r4, #72
 1564 001e 084B     		ldr	r3, .L146+4
 1565 0020 5C80     		strh	r4, [r3, #2]	@ movhi
1002:../stdperiph/source/stm32f37x_flash.c **** 
 1566              		.loc 1 1002 0
 1567 0022 4FF43020 		mov	r0, #720896
 1568              	.LVL132:
 1569 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1570              	.LVL133:
1004:../stdperiph/source/stm32f37x_flash.c ****     {
 1571              		.loc 1 1004 0
 1572 002a 0528     		cmp	r0, #5
 1573 002c 04D0     		beq	.L144
1007:../stdperiph/source/stm32f37x_flash.c ****     }
 1574              		.loc 1 1007 0
 1575 002e 034A     		ldr	r2, .L146
 1576 0030 1369     		ldr	r3, [r2, #16]
 1577 0032 23F01003 		bic	r3, r3, #16
 1578 0036 1361     		str	r3, [r2, #16]
 1579              	.L144:
1013:../stdperiph/source/stm32f37x_flash.c **** 
 1580              		.loc 1 1013 0
 1581 0038 10BD     		pop	{r4, pc}
 1582              	.L147:
 1583 003a 00BF     		.align	2
 1584              	.L146:
 1585 003c 00200240 		.word	1073881088
 1586 0040 00F8FF1F 		.word	536868864
 1587              		.cfi_endproc
 1588              	.LFE132:
 1590              		.text
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 52


 1591              	.Letext0:
 1592              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 1593              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 1594              		.file 4 "../cmsis/include/stm32f37x.h"
 1595              		.file 5 "../stdperiph/include/stm32f37x_flash.h"
 1596              		.file 6 "../cmsis/include/core_cm4.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 53


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f37x_flash.c
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:22     .text.FLASH_SetLatency:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:27     .text.FLASH_SetLatency:00000000 FLASH_SetLatency
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:52     .text.FLASH_SetLatency:00000010 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:57     .text.FLASH_HalfCycleAccessCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:62     .text.FLASH_HalfCycleAccessCmd:00000000 FLASH_HalfCycleAccessCmd
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:88     .text.FLASH_HalfCycleAccessCmd:0000001c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:93     .text.FLASH_PrefetchBufferCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:98     .text.FLASH_PrefetchBufferCmd:00000000 FLASH_PrefetchBufferCmd
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:124    .text.FLASH_PrefetchBufferCmd:0000001c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:129    .text.FLASH_Unlock:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:134    .text.FLASH_Unlock:00000000 FLASH_Unlock
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:158    .text.FLASH_Unlock:00000018 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:164    .text.FLASH_Lock:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:169    .text.FLASH_Lock:00000000 FLASH_Lock
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:185    .text.FLASH_Lock:0000000c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:190    .text.FLASH_OB_Unlock:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:195    .text.FLASH_OB_Unlock:00000000 FLASH_OB_Unlock
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:219    .text.FLASH_OB_Unlock:00000018 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:225    .text.FLASH_OB_Lock:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:230    .text.FLASH_OB_Lock:00000000 FLASH_OB_Lock
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:246    .text.FLASH_OB_Lock:0000000c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:251    .text.FLASH_OB_Launch:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:256    .text.FLASH_OB_Launch:00000000 FLASH_OB_Launch
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:272    .text.FLASH_OB_Launch:0000000c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:277    .text.FLASH_OB_GetUser:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:282    .text.FLASH_OB_GetUser:00000000 FLASH_OB_GetUser
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:298    .text.FLASH_OB_GetUser:0000000c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:303    .text.FLASH_OB_GetWRP:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:308    .text.FLASH_OB_GetWRP:00000000 FLASH_OB_GetWRP
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:323    .text.FLASH_OB_GetWRP:00000008 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:328    .text.FLASH_OB_GetRDP:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:333    .text.FLASH_OB_GetRDP:00000000 FLASH_OB_GetRDP
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:358    .text.FLASH_OB_GetRDP:00000014 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:363    .text.FLASH_ITConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:368    .text.FLASH_ITConfig:00000000 FLASH_ITConfig
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:397    .text.FLASH_ITConfig:00000018 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:402    .text.FLASH_GetFlagStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:407    .text.FLASH_GetFlagStatus:00000000 FLASH_GetFlagStatus
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:434    .text.FLASH_GetFlagStatus:00000010 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:439    .text.FLASH_ClearFlag:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:444    .text.FLASH_ClearFlag:00000000 FLASH_ClearFlag
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:459    .text.FLASH_ClearFlag:00000008 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:464    .text.FLASH_GetStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:469    .text.FLASH_GetStatus:00000000 FLASH_GetStatus
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:512    .text.FLASH_GetStatus:00000030 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:517    .text.FLASH_WaitForLastOperation:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:522    .text.FLASH_WaitForLastOperation:00000000 FLASH_WaitForLastOperation
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:568    .text.FLASH_ErasePage:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:573    .text.FLASH_ErasePage:00000000 FLASH_ErasePage
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:624    .text.FLASH_ErasePage:00000038 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:629    .text.FLASH_EraseAllPages:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:634    .text.FLASH_EraseAllPages:00000000 FLASH_EraseAllPages
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:677    .text.FLASH_EraseAllPages:00000034 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:682    .text.FLASH_ProgramWord:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:687    .text.FLASH_ProgramWord:00000000 FLASH_ProgramWord
ARM GAS  C:\Users\strag\AppData\Local\Temp\cckRszPc.s 			page 54


C:\Users\strag\AppData\Local\Temp\cckRszPc.s:771    .text.FLASH_ProgramWord:00000060 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:776    .text.FLASH_ProgramHalfWord:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:781    .text.FLASH_ProgramHalfWord:00000000 FLASH_ProgramHalfWord
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:829    .text.FLASH_ProgramHalfWord:00000030 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:834    .text.FLASH_OB_Erase:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:839    .text.FLASH_OB_Erase:00000000 FLASH_OB_Erase
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:930    .text.FLASH_OB_Erase:00000078 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:936    .text.FLASH_OB_ProgramData:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:941    .text.FLASH_OB_ProgramData:00000000 FLASH_OB_ProgramData
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:994    .text.FLASH_OB_ProgramData:00000038 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:999    .text.FLASH_OB_EnableWRP:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1004   .text.FLASH_OB_EnableWRP:00000000 FLASH_OB_EnableWRP
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1121   .text.FLASH_OB_EnableWRP:00000084 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1127   .text.FLASH_OB_RDPConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1132   .text.FLASH_OB_RDPConfig:00000000 FLASH_OB_RDPConfig
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1213   .text.FLASH_OB_RDPConfig:00000070 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1219   .text.FLASH_OB_UserConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1224   .text.FLASH_OB_UserConfig:00000000 FLASH_OB_UserConfig
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1280   .text.FLASH_OB_UserConfig:00000044 $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1286   .text.FLASH_OB_BOOTConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1291   .text.FLASH_OB_BOOTConfig:00000000 FLASH_OB_BOOTConfig
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1341   .text.FLASH_OB_BOOTConfig:0000003c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1347   .text.FLASH_OB_VDDAConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1352   .text.FLASH_OB_VDDAConfig:00000000 FLASH_OB_VDDAConfig
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1402   .text.FLASH_OB_VDDAConfig:0000003c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1408   .text.FLASH_OB_VDD_SD12Config:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1413   .text.FLASH_OB_VDD_SD12Config:00000000 FLASH_OB_VDD_SD12Config
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1463   .text.FLASH_OB_VDD_SD12Config:0000003c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1469   .text.FLASH_OB_SRAMParityConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1474   .text.FLASH_OB_SRAMParityConfig:00000000 FLASH_OB_SRAMParityConfig
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1524   .text.FLASH_OB_SRAMParityConfig:0000003c $d
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1530   .text.FLASH_OB_WriteUser:00000000 $t
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1535   .text.FLASH_OB_WriteUser:00000000 FLASH_OB_WriteUser
C:\Users\strag\AppData\Local\Temp\cckRszPc.s:1585   .text.FLASH_OB_WriteUser:0000003c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
