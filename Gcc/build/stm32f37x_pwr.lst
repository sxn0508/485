ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f37x_pwr.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.PWR_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	PWR_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	PWR_DeInit:
  28              	.LFB111:
  29              		.file 1 "../stdperiph/source/stm32f37x_pwr.c"
   1:../stdperiph/source/stm32f37x_pwr.c **** /**
   2:../stdperiph/source/stm32f37x_pwr.c ****   ******************************************************************************
   3:../stdperiph/source/stm32f37x_pwr.c ****   * @file    stm32f37x_pwr.c
   4:../stdperiph/source/stm32f37x_pwr.c ****   * @author  MCD Application Team
   5:../stdperiph/source/stm32f37x_pwr.c ****   * @version V1.0.0
   6:../stdperiph/source/stm32f37x_pwr.c ****   * @date    20-September-2012
   7:../stdperiph/source/stm32f37x_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../stdperiph/source/stm32f37x_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   9:../stdperiph/source/stm32f37x_pwr.c ****   *           + Backup Domain Access
  10:../stdperiph/source/stm32f37x_pwr.c ****   *           + PVD configuration
  11:../stdperiph/source/stm32f37x_pwr.c ****   *           + WakeUp pins configuration
  12:../stdperiph/source/stm32f37x_pwr.c ****   *           + SDADC Analog configuration
  13:../stdperiph/source/stm32f37x_pwr.c ****   *           + Low Power modes configuration
  14:../stdperiph/source/stm32f37x_pwr.c ****   *           + Flags management
  15:../stdperiph/source/stm32f37x_pwr.c ****   *
  16:../stdperiph/source/stm32f37x_pwr.c ****   ******************************************************************************
  17:../stdperiph/source/stm32f37x_pwr.c ****   * @attention
  18:../stdperiph/source/stm32f37x_pwr.c ****   *
  19:../stdperiph/source/stm32f37x_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  20:../stdperiph/source/stm32f37x_pwr.c ****   *
  21:../stdperiph/source/stm32f37x_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  22:../stdperiph/source/stm32f37x_pwr.c ****   * You may not use this file except in compliance with the License.
  23:../stdperiph/source/stm32f37x_pwr.c ****   * You may obtain a copy of the License at:
  24:../stdperiph/source/stm32f37x_pwr.c ****   *
  25:../stdperiph/source/stm32f37x_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  26:../stdperiph/source/stm32f37x_pwr.c ****   *
  27:../stdperiph/source/stm32f37x_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  28:../stdperiph/source/stm32f37x_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  29:../stdperiph/source/stm32f37x_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 2


  30:../stdperiph/source/stm32f37x_pwr.c ****   * See the License for the specific language governing permissions and
  31:../stdperiph/source/stm32f37x_pwr.c ****   * limitations under the License.
  32:../stdperiph/source/stm32f37x_pwr.c ****   *
  33:../stdperiph/source/stm32f37x_pwr.c ****   ******************************************************************************
  34:../stdperiph/source/stm32f37x_pwr.c ****   */
  35:../stdperiph/source/stm32f37x_pwr.c **** 
  36:../stdperiph/source/stm32f37x_pwr.c **** /* Includes ------------------------------------------------------------------*/
  37:../stdperiph/source/stm32f37x_pwr.c **** #include "stm32f37x_pwr.h"
  38:../stdperiph/source/stm32f37x_pwr.c **** #include "stm32f37x_rcc.h"
  39:../stdperiph/source/stm32f37x_pwr.c **** 
  40:../stdperiph/source/stm32f37x_pwr.c **** /** @addtogroup STM32F37x_StdPeriph_Driver
  41:../stdperiph/source/stm32f37x_pwr.c ****   * @{
  42:../stdperiph/source/stm32f37x_pwr.c ****   */
  43:../stdperiph/source/stm32f37x_pwr.c **** 
  44:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR 
  45:../stdperiph/source/stm32f37x_pwr.c ****   * @brief PWR driver modules
  46:../stdperiph/source/stm32f37x_pwr.c ****   * @{
  47:../stdperiph/source/stm32f37x_pwr.c ****   */ 
  48:../stdperiph/source/stm32f37x_pwr.c **** 
  49:../stdperiph/source/stm32f37x_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  50:../stdperiph/source/stm32f37x_pwr.c **** /* Private define ------------------------------------------------------------*/
  51:../stdperiph/source/stm32f37x_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  52:../stdperiph/source/stm32f37x_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  53:../stdperiph/source/stm32f37x_pwr.c **** 
  54:../stdperiph/source/stm32f37x_pwr.c **** /* --- CR Register ---*/
  55:../stdperiph/source/stm32f37x_pwr.c **** 
  56:../stdperiph/source/stm32f37x_pwr.c **** /* Alias word address of DBP bit */
  57:../stdperiph/source/stm32f37x_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  58:../stdperiph/source/stm32f37x_pwr.c **** #define DBP_BitNumber            0x08
  59:../stdperiph/source/stm32f37x_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  60:../stdperiph/source/stm32f37x_pwr.c **** 
  61:../stdperiph/source/stm32f37x_pwr.c **** /* Alias word address of PVDE bit */
  62:../stdperiph/source/stm32f37x_pwr.c **** #define PVDE_BitNumber           0x04
  63:../stdperiph/source/stm32f37x_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  64:../stdperiph/source/stm32f37x_pwr.c **** 
  65:../stdperiph/source/stm32f37x_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  66:../stdperiph/source/stm32f37x_pwr.c **** 
  67:../stdperiph/source/stm32f37x_pwr.c **** /* CR register bit mask */
  68:../stdperiph/source/stm32f37x_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  69:../stdperiph/source/stm32f37x_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  70:../stdperiph/source/stm32f37x_pwr.c **** 
  71:../stdperiph/source/stm32f37x_pwr.c **** /* Private macro -------------------------------------------------------------*/
  72:../stdperiph/source/stm32f37x_pwr.c **** /* Private variables ---------------------------------------------------------*/
  73:../stdperiph/source/stm32f37x_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  74:../stdperiph/source/stm32f37x_pwr.c **** /* Private functions ---------------------------------------------------------*/
  75:../stdperiph/source/stm32f37x_pwr.c **** 
  76:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR_Private_Functions
  77:../stdperiph/source/stm32f37x_pwr.c ****   * @{
  78:../stdperiph/source/stm32f37x_pwr.c ****   */
  79:../stdperiph/source/stm32f37x_pwr.c **** 
  80:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  81:../stdperiph/source/stm32f37x_pwr.c ****  *  @brief   Backup Domain Access function
  82:../stdperiph/source/stm32f37x_pwr.c ****  *
  83:../stdperiph/source/stm32f37x_pwr.c **** @verbatim
  84:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
  85:../stdperiph/source/stm32f37x_pwr.c ****                    ##### Backup Domain Access function #####
  86:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 3


  87:../stdperiph/source/stm32f37x_pwr.c **** 
  88:../stdperiph/source/stm32f37x_pwr.c ****     [..] After reset, the Backup Domain Registers (RCC BDCR Register, RTC registers
  89:../stdperiph/source/stm32f37x_pwr.c ****          and RTC backup registers) are protected against possible stray write accesses.
  90:../stdperiph/source/stm32f37x_pwr.c ****     [..] To enable access to Backup domain use the PWR_BackupAccessCmd(ENABLE) function.
  91:../stdperiph/source/stm32f37x_pwr.c **** 
  92:../stdperiph/source/stm32f37x_pwr.c **** @endverbatim
  93:../stdperiph/source/stm32f37x_pwr.c ****   * @{
  94:../stdperiph/source/stm32f37x_pwr.c ****   */
  95:../stdperiph/source/stm32f37x_pwr.c **** 
  96:../stdperiph/source/stm32f37x_pwr.c **** /**
  97:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  98:../stdperiph/source/stm32f37x_pwr.c ****   * @param  None
  99:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 100:../stdperiph/source/stm32f37x_pwr.c ****   */
 101:../stdperiph/source/stm32f37x_pwr.c **** void PWR_DeInit(void)
 102:../stdperiph/source/stm32f37x_pwr.c **** {
  30              		.loc 1 102 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 103:../stdperiph/source/stm32f37x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  39              		.loc 1 103 0
  40 0002 0121     		movs	r1, #1
  41 0004 4FF08050 		mov	r0, #268435456
  42 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  43              	.LVL0:
 104:../stdperiph/source/stm32f37x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  44              		.loc 1 104 0
  45 000c 0021     		movs	r1, #0
  46 000e 4FF08050 		mov	r0, #268435456
  47 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  48              	.LVL1:
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE111:
  53              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  54              		.align	2
  55              		.global	PWR_BackupAccessCmd
  56              		.thumb
  57              		.thumb_func
  59              	PWR_BackupAccessCmd:
  60              	.LFB112:
 105:../stdperiph/source/stm32f37x_pwr.c **** }
 106:../stdperiph/source/stm32f37x_pwr.c **** 
 107:../stdperiph/source/stm32f37x_pwr.c **** /**
 108:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Enables or disables access to the Backup domain registers.
 109:../stdperiph/source/stm32f37x_pwr.c ****   * @note   If the HSE divided by 32 is used as the RTC clock, the 
 110:../stdperiph/source/stm32f37x_pwr.c ****   *         Backup Domain Access should be kept enabled.
 111:../stdperiph/source/stm32f37x_pwr.c ****   * @param  NewState: new state of the access to the Backup domain registers.
 112:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 113:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 114:../stdperiph/source/stm32f37x_pwr.c ****   */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 4


 115:../stdperiph/source/stm32f37x_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 116:../stdperiph/source/stm32f37x_pwr.c **** {
  61              		.loc 1 116 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL2:
 117:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 118:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 119:../stdperiph/source/stm32f37x_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  67              		.loc 1 119 0
  68 0000 014B     		ldr	r3, .L4
  69 0002 1860     		str	r0, [r3]
  70 0004 7047     		bx	lr
  71              	.L5:
  72 0006 00BF     		.align	2
  73              	.L4:
  74 0008 20000E42 		.word	1108213792
  75              		.cfi_endproc
  76              	.LFE112:
  78              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  79              		.align	2
  80              		.global	PWR_PVDLevelConfig
  81              		.thumb
  82              		.thumb_func
  84              	PWR_PVDLevelConfig:
  85              	.LFB113:
 120:../stdperiph/source/stm32f37x_pwr.c **** }
 121:../stdperiph/source/stm32f37x_pwr.c **** 
 122:../stdperiph/source/stm32f37x_pwr.c **** /**
 123:../stdperiph/source/stm32f37x_pwr.c ****   * @}
 124:../stdperiph/source/stm32f37x_pwr.c ****   */
 125:../stdperiph/source/stm32f37x_pwr.c **** 
 126:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 127:../stdperiph/source/stm32f37x_pwr.c ****  *  @brief   PVD configuration functions 
 128:../stdperiph/source/stm32f37x_pwr.c ****  *
 129:../stdperiph/source/stm32f37x_pwr.c **** @verbatim
 130:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 131:../stdperiph/source/stm32f37x_pwr.c ****                     ##### PVD configuration functions #####
 132:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 133:../stdperiph/source/stm32f37x_pwr.c ****   [..]
 134:../stdperiph/source/stm32f37x_pwr.c ****   (+) The PVD is used to monitor the VDD power supply by comparing it to a threshold
 135:../stdperiph/source/stm32f37x_pwr.c ****       selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 136:../stdperiph/source/stm32f37x_pwr.c ****   (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 137:../stdperiph/source/stm32f37x_pwr.c ****       PVD threshold. This event is internally connected to the EXTI line16
 138:../stdperiph/source/stm32f37x_pwr.c ****       and can generate an interrupt if enabled through the EXTI registers.
 139:../stdperiph/source/stm32f37x_pwr.c ****   (+) The PVD is stopped in Standby mode.
 140:../stdperiph/source/stm32f37x_pwr.c **** 
 141:../stdperiph/source/stm32f37x_pwr.c **** @endverbatim
 142:../stdperiph/source/stm32f37x_pwr.c ****   * @{
 143:../stdperiph/source/stm32f37x_pwr.c ****   */
 144:../stdperiph/source/stm32f37x_pwr.c **** 
 145:../stdperiph/source/stm32f37x_pwr.c **** /**
 146:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 147:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 148:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be one of the following values:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 5


 149:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_0
 150:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_1
 151:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_2
 152:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_3
 153:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_4
 154:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_5
 155:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_6
 156:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_PVDLevel_7
 157:../stdperiph/source/stm32f37x_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 158:../stdperiph/source/stm32f37x_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 159:../stdperiph/source/stm32f37x_pwr.c ****   *         detection level.
 160:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 161:../stdperiph/source/stm32f37x_pwr.c ****   */
 162:../stdperiph/source/stm32f37x_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 163:../stdperiph/source/stm32f37x_pwr.c **** {
  86              		.loc 1 163 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL3:
 164:../stdperiph/source/stm32f37x_pwr.c ****   uint32_t tmpreg = 0;
 165:../stdperiph/source/stm32f37x_pwr.c ****   
 166:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 167:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 168:../stdperiph/source/stm32f37x_pwr.c ****   
 169:../stdperiph/source/stm32f37x_pwr.c ****   tmpreg = PWR->CR;
  92              		.loc 1 169 0
  93 0000 034A     		ldr	r2, .L7
  94 0002 1368     		ldr	r3, [r2]
  95              	.LVL4:
 170:../stdperiph/source/stm32f37x_pwr.c ****   
 171:../stdperiph/source/stm32f37x_pwr.c ****   /* Clear PLS[7:5] bits */
 172:../stdperiph/source/stm32f37x_pwr.c ****   tmpreg &= CR_PLS_MASK;
  96              		.loc 1 172 0
  97 0004 23F0E003 		bic	r3, r3, #224
  98              	.LVL5:
 173:../stdperiph/source/stm32f37x_pwr.c ****   
 174:../stdperiph/source/stm32f37x_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 175:../stdperiph/source/stm32f37x_pwr.c ****   tmpreg |= PWR_PVDLevel;
  99              		.loc 1 175 0
 100 0008 1843     		orrs	r0, r0, r3
 101              	.LVL6:
 176:../stdperiph/source/stm32f37x_pwr.c ****   
 177:../stdperiph/source/stm32f37x_pwr.c ****   /* Store the new value */
 178:../stdperiph/source/stm32f37x_pwr.c ****   PWR->CR = tmpreg;
 102              		.loc 1 178 0
 103 000a 1060     		str	r0, [r2]
 104 000c 7047     		bx	lr
 105              	.L8:
 106 000e 00BF     		.align	2
 107              	.L7:
 108 0010 00700040 		.word	1073770496
 109              		.cfi_endproc
 110              	.LFE113:
 112              		.section	.text.PWR_PVDCmd,"ax",%progbits
 113              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 6


 114              		.global	PWR_PVDCmd
 115              		.thumb
 116              		.thumb_func
 118              	PWR_PVDCmd:
 119              	.LFB114:
 179:../stdperiph/source/stm32f37x_pwr.c **** }
 180:../stdperiph/source/stm32f37x_pwr.c **** 
 181:../stdperiph/source/stm32f37x_pwr.c **** /**
 182:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 183:../stdperiph/source/stm32f37x_pwr.c ****   * @param  NewState: new state of the PVD.
 184:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 185:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 186:../stdperiph/source/stm32f37x_pwr.c ****   */
 187:../stdperiph/source/stm32f37x_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 188:../stdperiph/source/stm32f37x_pwr.c **** {
 120              		.loc 1 188 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.LVL7:
 189:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 190:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 191:../stdperiph/source/stm32f37x_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 126              		.loc 1 191 0
 127 0000 014B     		ldr	r3, .L10
 128 0002 1860     		str	r0, [r3]
 129 0004 7047     		bx	lr
 130              	.L11:
 131 0006 00BF     		.align	2
 132              	.L10:
 133 0008 10000E42 		.word	1108213776
 134              		.cfi_endproc
 135              	.LFE114:
 137              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 138              		.align	2
 139              		.global	PWR_WakeUpPinCmd
 140              		.thumb
 141              		.thumb_func
 143              	PWR_WakeUpPinCmd:
 144              	.LFB115:
 192:../stdperiph/source/stm32f37x_pwr.c **** }
 193:../stdperiph/source/stm32f37x_pwr.c **** 
 194:../stdperiph/source/stm32f37x_pwr.c **** /**
 195:../stdperiph/source/stm32f37x_pwr.c ****   * @}
 196:../stdperiph/source/stm32f37x_pwr.c ****   */
 197:../stdperiph/source/stm32f37x_pwr.c **** 
 198:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR_Group3 WakeUp pins configuration functions
 199:../stdperiph/source/stm32f37x_pwr.c ****  *  @brief   WakeUp pins configuration functions 
 200:../stdperiph/source/stm32f37x_pwr.c ****  *
 201:../stdperiph/source/stm32f37x_pwr.c **** @verbatim
 202:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 203:../stdperiph/source/stm32f37x_pwr.c ****                ##### WakeUp pin configuration functions #####
 204:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 205:../stdperiph/source/stm32f37x_pwr.c **** 
 206:../stdperiph/source/stm32f37x_pwr.c ****   (+) WakeUp pins are used to wakeup the system from Standby mode. These pins are 
 207:../stdperiph/source/stm32f37x_pwr.c ****       forced in input pull down configuration and are active on rising edges.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 7


 208:../stdperiph/source/stm32f37x_pwr.c ****   (+) There are three WakeUp pins: WakeUp Pin 1 on PA.00, WakeUp Pin 2 on PC.13 and
 209:../stdperiph/source/stm32f37x_pwr.c ****       WakeUp Pin 3 on PE.06.
 210:../stdperiph/source/stm32f37x_pwr.c **** 
 211:../stdperiph/source/stm32f37x_pwr.c **** @endverbatim
 212:../stdperiph/source/stm32f37x_pwr.c ****   * @{
 213:../stdperiph/source/stm32f37x_pwr.c ****   */
 214:../stdperiph/source/stm32f37x_pwr.c **** 
 215:../stdperiph/source/stm32f37x_pwr.c **** /**
 216:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 217:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_WakeUpPin: specifies the WakeUpPin.
 218:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be: PWR_WakeUpPin_1, PWR_WakeUpPin_2 or PWR_WakeUpPin_3.
 219:../stdperiph/source/stm32f37x_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 220:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 221:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 222:../stdperiph/source/stm32f37x_pwr.c ****   */
 223:../stdperiph/source/stm32f37x_pwr.c **** void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
 224:../stdperiph/source/stm32f37x_pwr.c **** {  
 145              		.loc 1 224 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150              	.LVL8:
 225:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 226:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(PWR_WakeUpPin));  
 227:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 228:../stdperiph/source/stm32f37x_pwr.c **** 
 229:../stdperiph/source/stm32f37x_pwr.c ****   if (NewState != DISABLE)
 151              		.loc 1 229 0
 152 0000 21B1     		cbz	r1, .L13
 230:../stdperiph/source/stm32f37x_pwr.c ****   {
 231:../stdperiph/source/stm32f37x_pwr.c ****     /* Enable the EWUPx pin */
 232:../stdperiph/source/stm32f37x_pwr.c ****     PWR->CSR |= PWR_WakeUpPin;
 153              		.loc 1 232 0
 154 0002 054B     		ldr	r3, .L15
 155 0004 5A68     		ldr	r2, [r3, #4]
 156 0006 1043     		orrs	r0, r0, r2
 157              	.LVL9:
 158 0008 5860     		str	r0, [r3, #4]
 159 000a 7047     		bx	lr
 160              	.LVL10:
 161              	.L13:
 233:../stdperiph/source/stm32f37x_pwr.c ****   }
 234:../stdperiph/source/stm32f37x_pwr.c ****   else
 235:../stdperiph/source/stm32f37x_pwr.c ****   {
 236:../stdperiph/source/stm32f37x_pwr.c ****     /* Disable the EWUPx pin */
 237:../stdperiph/source/stm32f37x_pwr.c ****     PWR->CSR &= ~PWR_WakeUpPin;
 162              		.loc 1 237 0
 163 000c 024A     		ldr	r2, .L15
 164 000e 5368     		ldr	r3, [r2, #4]
 165 0010 23EA0000 		bic	r0, r3, r0
 166              	.LVL11:
 167 0014 5060     		str	r0, [r2, #4]
 168 0016 7047     		bx	lr
 169              	.L16:
 170              		.align	2
 171              	.L15:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 8


 172 0018 00700040 		.word	1073770496
 173              		.cfi_endproc
 174              	.LFE115:
 176              		.section	.text.PWR_SDADCAnalogCmd,"ax",%progbits
 177              		.align	2
 178              		.global	PWR_SDADCAnalogCmd
 179              		.thumb
 180              		.thumb_func
 182              	PWR_SDADCAnalogCmd:
 183              	.LFB116:
 238:../stdperiph/source/stm32f37x_pwr.c ****   }
 239:../stdperiph/source/stm32f37x_pwr.c **** }
 240:../stdperiph/source/stm32f37x_pwr.c **** 
 241:../stdperiph/source/stm32f37x_pwr.c **** /**
 242:../stdperiph/source/stm32f37x_pwr.c ****   * @}
 243:../stdperiph/source/stm32f37x_pwr.c ****   */
 244:../stdperiph/source/stm32f37x_pwr.c **** 
 245:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR_Group4 SDADC Analog part configuration function
 246:../stdperiph/source/stm32f37x_pwr.c ****  *  @brief   SDADC Analog configuration function 
 247:../stdperiph/source/stm32f37x_pwr.c ****  *
 248:../stdperiph/source/stm32f37x_pwr.c **** @verbatim
 249:../stdperiph/source/stm32f37x_pwr.c **** 
 250:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 251:../stdperiph/source/stm32f37x_pwr.c ****                ##### SDADC analog configuration functions #####
 252:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 253:../stdperiph/source/stm32f37x_pwr.c ****   [..]
 254:../stdperiph/source/stm32f37x_pwr.c ****   (+) The SDADC peripherals are per default in deep power down mode, in order to
 255:../stdperiph/source/stm32f37x_pwr.c ****       be used their analog part should be enabled and though by calling the 
 256:../stdperiph/source/stm32f37x_pwr.c ****       PWR_SDADCAnalogCmd() function.
 257:../stdperiph/source/stm32f37x_pwr.c **** 
 258:../stdperiph/source/stm32f37x_pwr.c **** @endverbatim
 259:../stdperiph/source/stm32f37x_pwr.c ****   * @{
 260:../stdperiph/source/stm32f37x_pwr.c ****   */
 261:../stdperiph/source/stm32f37x_pwr.c **** 
 262:../stdperiph/source/stm32f37x_pwr.c **** /**
 263:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 264:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_SDADCAnalog: specifies the SDADC.
 265:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be: PWR_SDADCAnalog_1, PWR_SDADCAnalog_2 or PWR_SDADCAnalog_3.
 266:../stdperiph/source/stm32f37x_pwr.c ****   * @param  NewState: new state of the SDADC Analog functionality.
 267:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 268:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 269:../stdperiph/source/stm32f37x_pwr.c ****   */
 270:../stdperiph/source/stm32f37x_pwr.c **** void PWR_SDADCAnalogCmd(uint32_t PWR_SDADCAnalog, FunctionalState NewState)
 271:../stdperiph/source/stm32f37x_pwr.c **** {  
 184              		.loc 1 271 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL12:
 272:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 273:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_SDADC_ANALOG(PWR_SDADCAnalog));  
 274:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 275:../stdperiph/source/stm32f37x_pwr.c **** 
 276:../stdperiph/source/stm32f37x_pwr.c ****   if (NewState != DISABLE)
 190              		.loc 1 276 0
 191 0000 21B1     		cbz	r1, .L18
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 9


 277:../stdperiph/source/stm32f37x_pwr.c ****   {
 278:../stdperiph/source/stm32f37x_pwr.c ****     /* Enable the SDADCx analog */
 279:../stdperiph/source/stm32f37x_pwr.c ****     PWR->CR |= PWR_SDADCAnalog;
 192              		.loc 1 279 0
 193 0002 054B     		ldr	r3, .L20
 194 0004 1A68     		ldr	r2, [r3]
 195 0006 1043     		orrs	r0, r0, r2
 196              	.LVL13:
 197 0008 1860     		str	r0, [r3]
 198 000a 7047     		bx	lr
 199              	.LVL14:
 200              	.L18:
 280:../stdperiph/source/stm32f37x_pwr.c ****   }
 281:../stdperiph/source/stm32f37x_pwr.c ****   else
 282:../stdperiph/source/stm32f37x_pwr.c ****   {
 283:../stdperiph/source/stm32f37x_pwr.c ****     /* Disable the SDADCx analog */
 284:../stdperiph/source/stm32f37x_pwr.c ****     PWR->CR &= ~PWR_SDADCAnalog;
 201              		.loc 1 284 0
 202 000c 024A     		ldr	r2, .L20
 203 000e 1368     		ldr	r3, [r2]
 204 0010 23EA0000 		bic	r0, r3, r0
 205              	.LVL15:
 206 0014 1060     		str	r0, [r2]
 207 0016 7047     		bx	lr
 208              	.L21:
 209              		.align	2
 210              	.L20:
 211 0018 00700040 		.word	1073770496
 212              		.cfi_endproc
 213              	.LFE116:
 215              		.section	.text.PWR_EnterSleepMode,"ax",%progbits
 216              		.align	2
 217              		.global	PWR_EnterSleepMode
 218              		.thumb
 219              		.thumb_func
 221              	PWR_EnterSleepMode:
 222              	.LFB117:
 285:../stdperiph/source/stm32f37x_pwr.c ****   }   
 286:../stdperiph/source/stm32f37x_pwr.c **** }
 287:../stdperiph/source/stm32f37x_pwr.c **** 
 288:../stdperiph/source/stm32f37x_pwr.c **** /**
 289:../stdperiph/source/stm32f37x_pwr.c ****   * @}
 290:../stdperiph/source/stm32f37x_pwr.c ****   */
 291:../stdperiph/source/stm32f37x_pwr.c ****   
 292:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR_Group5 Low Power modes configuration functions
 293:../stdperiph/source/stm32f37x_pwr.c ****  *  @brief   Low Power modes configuration functions 
 294:../stdperiph/source/stm32f37x_pwr.c ****  *
 295:../stdperiph/source/stm32f37x_pwr.c **** @verbatim
 296:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 297:../stdperiph/source/stm32f37x_pwr.c ****               ##### Low Power modes configuration functions #####
 298:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 299:../stdperiph/source/stm32f37x_pwr.c **** 
 300:../stdperiph/source/stm32f37x_pwr.c ****     [..] The devices feature three low-power modes:
 301:../stdperiph/source/stm32f37x_pwr.c ****     (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 302:../stdperiph/source/stm32f37x_pwr.c ****     (+) Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 303:../stdperiph/source/stm32f37x_pwr.c ****     (+) Standby mode: VCORE domain powered off
 304:../stdperiph/source/stm32f37x_pwr.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 10


 305:../stdperiph/source/stm32f37x_pwr.c ****   *** Sleep mode *** 
 306:../stdperiph/source/stm32f37x_pwr.c ****   ==================
 307:../stdperiph/source/stm32f37x_pwr.c ****   [..] 
 308:../stdperiph/source/stm32f37x_pwr.c ****     (+) Entry:
 309:../stdperiph/source/stm32f37x_pwr.c ****         (++) The Sleep mode is entered by executing the WFE() or WFI() instructions.
 310:../stdperiph/source/stm32f37x_pwr.c ****     (+) Exit:
 311:../stdperiph/source/stm32f37x_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt 
 312:../stdperiph/source/stm32f37x_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 313:../stdperiph/source/stm32f37x_pwr.c **** 
 314:../stdperiph/source/stm32f37x_pwr.c ****   *** Stop mode *** 
 315:../stdperiph/source/stm32f37x_pwr.c ****   =================
 316:../stdperiph/source/stm32f37x_pwr.c ****   [..] In Stop mode, all clocks in the VCORE domain are stopped, the PLL, the HSI,
 317:../stdperiph/source/stm32f37x_pwr.c ****        the HSI14 and the HSE RC oscillators are disabled. Internal SRAM and register 
 318:../stdperiph/source/stm32f37x_pwr.c ****        contents are preserved.
 319:../stdperiph/source/stm32f37x_pwr.c ****        The voltage regulator can be configured either in normal or low-power mode.
 320:../stdperiph/source/stm32f37x_pwr.c **** 
 321:../stdperiph/source/stm32f37x_pwr.c ****     (+) Entry:
 322:../stdperiph/source/stm32f37x_pwr.c ****         (++) The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 323:../stdperiph/source/stm32f37x_pwr.c ****              function with regulator in LowPower or with Regulator ON.
 324:../stdperiph/source/stm32f37x_pwr.c ****     (+) Exit:
 325:../stdperiph/source/stm32f37x_pwr.c ****         (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode
 326:../stdperiph/source/stm32f37x_pwr.c ****              or any internal IPs (I2C, UASRT or CEC) wakeup event.
 327:../stdperiph/source/stm32f37x_pwr.c **** 
 328:../stdperiph/source/stm32f37x_pwr.c ****   *** Standby mode *** 
 329:../stdperiph/source/stm32f37x_pwr.c ****   ====================
 330:../stdperiph/source/stm32f37x_pwr.c ****   [..] The Standby mode allows to achieve the lowest power consumption. It is based 
 331:../stdperiph/source/stm32f37x_pwr.c ****        on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 332:../stdperiph/source/stm32f37x_pwr.c ****        The VCORE domain is consequently powered off. The PLL, the HSI, the HSI14 
 333:../stdperiph/source/stm32f37x_pwr.c ****        oscillator and the HSE oscillator are also switched off. SRAM and register 
 334:../stdperiph/source/stm32f37x_pwr.c ****        contents are lost except for the Backup domain (RTC registers, RTC backup 
 335:../stdperiph/source/stm32f37x_pwr.c ****        registers and Standby circuitry).
 336:../stdperiph/source/stm32f37x_pwr.c ****    
 337:../stdperiph/source/stm32f37x_pwr.c ****   [..] The voltage regulator is OFF.
 338:../stdperiph/source/stm32f37x_pwr.c **** 
 339:../stdperiph/source/stm32f37x_pwr.c ****     (+) Entry:
 340:../stdperiph/source/stm32f37x_pwr.c ****         (++) The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 341:../stdperiph/source/stm32f37x_pwr.c ****     (+) Exit:
 342:../stdperiph/source/stm32f37x_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 343:../stdperiph/source/stm32f37x_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 344:../stdperiph/source/stm32f37x_pwr.c **** 
 345:../stdperiph/source/stm32f37x_pwr.c ****   *** Auto-wakeup (AWU) from low-power mode *** 
 346:../stdperiph/source/stm32f37x_pwr.c ****   =============================================
 347:../stdperiph/source/stm32f37x_pwr.c ****   [..] The MCU can be woken up from low-power mode by an RTC Alarm event, a tamper 
 348:../stdperiph/source/stm32f37x_pwr.c ****        event, a time-stamp event, or a comparator event, without depending on an 
 349:../stdperiph/source/stm32f37x_pwr.c ****        external interrupt (Auto-wakeup mode).
 350:../stdperiph/source/stm32f37x_pwr.c **** 
 351:../stdperiph/source/stm32f37x_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Stop mode
 352:../stdperiph/source/stm32f37x_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 353:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 354:../stdperiph/source/stm32f37x_pwr.c ****                    or Event modes) using the EXTI_Init() function.
 355:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 356:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 357:../stdperiph/source/stm32f37x_pwr.c ****                    and RTC_AlarmCmd() functions.
 358:../stdperiph/source/stm32f37x_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 359:../stdperiph/source/stm32f37x_pwr.c ****              is necessary to:
 360:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the EXTI Line 19 to be sensitive to rising edges (Interrupt 
 361:../stdperiph/source/stm32f37x_pwr.c ****                    or Event modes) using the EXTI_Init() function.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 11


 362:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 363:../stdperiph/source/stm32f37x_pwr.c ****                    function.
 364:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the RTC to detect the tamper or time stamp event using the
 365:../stdperiph/source/stm32f37x_pwr.c ****                    RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 366:../stdperiph/source/stm32f37x_pwr.c ****                    functions.
 367:../stdperiph/source/stm32f37x_pwr.c **** 
 368:../stdperiph/source/stm32f37x_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Standby mode
 369:../stdperiph/source/stm32f37x_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 370:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function.
 371:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 372:../stdperiph/source/stm32f37x_pwr.c ****                    and RTC_AlarmCmd() functions.
 373:../stdperiph/source/stm32f37x_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 374:../stdperiph/source/stm32f37x_pwr.c ****              is necessary to:
 375:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 376:../stdperiph/source/stm32f37x_pwr.c ****                    function.
 377:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the RTC to detect the tamper or time stamp event using the
 378:../stdperiph/source/stm32f37x_pwr.c ****                    RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 379:../stdperiph/source/stm32f37x_pwr.c ****                    functions.
 380:../stdperiph/source/stm32f37x_pwr.c **** 
 381:../stdperiph/source/stm32f37x_pwr.c ****     (+) Comparator auto-wakeup (AWU) from the Stop mode
 382:../stdperiph/source/stm32f37x_pwr.c ****         (++) To wake up from the Stop mode with an comparator 1 or comparator 2 wakeup
 383:../stdperiph/source/stm32f37x_pwr.c ****              event, it is necessary to:
 384:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the EXTI Line 21 for comparator 1 or EXTI Line 22 for comparator 2 
 385:../stdperiph/source/stm32f37x_pwr.c ****                    to be sensitive to to the selected edges (falling, rising or falling 
 386:../stdperiph/source/stm32f37x_pwr.c ****                    and rising) (Interrupt or Event modes) using the EXTI_Init() function.
 387:../stdperiph/source/stm32f37x_pwr.c ****              (+++) Configure the comparator to generate the event.
 388:../stdperiph/source/stm32f37x_pwr.c **** 
 389:../stdperiph/source/stm32f37x_pwr.c **** @endverbatim
 390:../stdperiph/source/stm32f37x_pwr.c ****   * @{
 391:../stdperiph/source/stm32f37x_pwr.c ****   */
 392:../stdperiph/source/stm32f37x_pwr.c **** 
 393:../stdperiph/source/stm32f37x_pwr.c **** /**
 394:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Enters Sleep mode.
 395:../stdperiph/source/stm32f37x_pwr.c ****   * @note   In Sleep mode, all I/O pins keep the same state as in Run mode.
 396:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_SLEEPEntry: specifies if SLEEP mode in entered with WFI or WFE instruction.
 397:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be one of the following values:
 398:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_SLEEPEntry_WFI: enter SLEEP mode with WFI instruction
 399:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_SLEEPEntry_WFE: enter SLEEP mode with WFE instruction
 400:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 401:../stdperiph/source/stm32f37x_pwr.c ****   */
 402:../stdperiph/source/stm32f37x_pwr.c **** void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
 403:../stdperiph/source/stm32f37x_pwr.c **** {
 223              		.loc 1 403 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL16:
 404:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 405:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));
 406:../stdperiph/source/stm32f37x_pwr.c ****   
 407:../stdperiph/source/stm32f37x_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex-M4 System Control Register */
 408:../stdperiph/source/stm32f37x_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 229              		.loc 1 408 0
 230 0000 054A     		ldr	r2, .L25
 231 0002 1369     		ldr	r3, [r2, #16]
 232 0004 23F00403 		bic	r3, r3, #4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 12


 233 0008 1361     		str	r3, [r2, #16]
 409:../stdperiph/source/stm32f37x_pwr.c ****   
 410:../stdperiph/source/stm32f37x_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 411:../stdperiph/source/stm32f37x_pwr.c ****   if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
 234              		.loc 1 411 0
 235 000a 0128     		cmp	r0, #1
 236 000c 01D1     		bne	.L23
 237              	.LBB12:
 238              	.LBB13:
 239              		.file 2 "../cmsis/include/core_cmInstr.h"
   1:../cmsis/include/core_cmInstr.h **** /**************************************************************************//**
   2:../cmsis/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../cmsis/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../cmsis/include/core_cmInstr.h ****  * @version  V3.00
   5:../cmsis/include/core_cmInstr.h ****  * @date     07. February 2012
   6:../cmsis/include/core_cmInstr.h ****  *
   7:../cmsis/include/core_cmInstr.h ****  * @note
   8:../cmsis/include/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../cmsis/include/core_cmInstr.h ****  *
  10:../cmsis/include/core_cmInstr.h ****  * @par
  11:../cmsis/include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../cmsis/include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../cmsis/include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../cmsis/include/core_cmInstr.h ****  *
  15:../cmsis/include/core_cmInstr.h ****  * @par
  16:../cmsis/include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../cmsis/include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../cmsis/include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../cmsis/include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../cmsis/include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../cmsis/include/core_cmInstr.h ****  *
  22:../cmsis/include/core_cmInstr.h ****  ******************************************************************************/
  23:../cmsis/include/core_cmInstr.h **** 
  24:../cmsis/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../cmsis/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../cmsis/include/core_cmInstr.h **** 
  27:../cmsis/include/core_cmInstr.h **** 
  28:../cmsis/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../cmsis/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../cmsis/include/core_cmInstr.h ****   Access to dedicated instructions
  31:../cmsis/include/core_cmInstr.h ****   @{
  32:../cmsis/include/core_cmInstr.h **** */
  33:../cmsis/include/core_cmInstr.h **** 
  34:../cmsis/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../cmsis/include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../cmsis/include/core_cmInstr.h **** 
  37:../cmsis/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../cmsis/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../cmsis/include/core_cmInstr.h **** #endif
  40:../cmsis/include/core_cmInstr.h **** 
  41:../cmsis/include/core_cmInstr.h **** 
  42:../cmsis/include/core_cmInstr.h **** /** \brief  No Operation
  43:../cmsis/include/core_cmInstr.h **** 
  44:../cmsis/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../cmsis/include/core_cmInstr.h ****  */
  46:../cmsis/include/core_cmInstr.h **** #define __NOP                             __nop
  47:../cmsis/include/core_cmInstr.h **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 13


  48:../cmsis/include/core_cmInstr.h **** 
  49:../cmsis/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../cmsis/include/core_cmInstr.h **** 
  51:../cmsis/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../cmsis/include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../cmsis/include/core_cmInstr.h ****  */
  54:../cmsis/include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../cmsis/include/core_cmInstr.h **** 
  56:../cmsis/include/core_cmInstr.h **** 
  57:../cmsis/include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../cmsis/include/core_cmInstr.h **** 
  59:../cmsis/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../cmsis/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../cmsis/include/core_cmInstr.h ****  */
  62:../cmsis/include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../cmsis/include/core_cmInstr.h **** 
  64:../cmsis/include/core_cmInstr.h **** 
  65:../cmsis/include/core_cmInstr.h **** /** \brief  Send Event
  66:../cmsis/include/core_cmInstr.h **** 
  67:../cmsis/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../cmsis/include/core_cmInstr.h ****  */
  69:../cmsis/include/core_cmInstr.h **** #define __SEV                             __sev
  70:../cmsis/include/core_cmInstr.h **** 
  71:../cmsis/include/core_cmInstr.h **** 
  72:../cmsis/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../cmsis/include/core_cmInstr.h **** 
  74:../cmsis/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../cmsis/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../cmsis/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../cmsis/include/core_cmInstr.h ****  */
  78:../cmsis/include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../cmsis/include/core_cmInstr.h **** 
  80:../cmsis/include/core_cmInstr.h **** 
  81:../cmsis/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../cmsis/include/core_cmInstr.h **** 
  83:../cmsis/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../cmsis/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../cmsis/include/core_cmInstr.h ****  */
  86:../cmsis/include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../cmsis/include/core_cmInstr.h **** 
  88:../cmsis/include/core_cmInstr.h **** 
  89:../cmsis/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../cmsis/include/core_cmInstr.h **** 
  91:../cmsis/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../cmsis/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../cmsis/include/core_cmInstr.h ****  */
  94:../cmsis/include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../cmsis/include/core_cmInstr.h **** 
  96:../cmsis/include/core_cmInstr.h **** 
  97:../cmsis/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../cmsis/include/core_cmInstr.h **** 
  99:../cmsis/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../cmsis/include/core_cmInstr.h **** 
 101:../cmsis/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../cmsis/include/core_cmInstr.h ****     \return               Reversed value
 103:../cmsis/include/core_cmInstr.h ****  */
 104:../cmsis/include/core_cmInstr.h **** #define __REV                             __rev
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 14


 105:../cmsis/include/core_cmInstr.h **** 
 106:../cmsis/include/core_cmInstr.h **** 
 107:../cmsis/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../cmsis/include/core_cmInstr.h **** 
 109:../cmsis/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../cmsis/include/core_cmInstr.h **** 
 111:../cmsis/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../cmsis/include/core_cmInstr.h ****     \return               Reversed value
 113:../cmsis/include/core_cmInstr.h ****  */
 114:../cmsis/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../cmsis/include/core_cmInstr.h **** {
 116:../cmsis/include/core_cmInstr.h ****   rev16 r0, r0
 117:../cmsis/include/core_cmInstr.h ****   bx lr
 118:../cmsis/include/core_cmInstr.h **** }
 119:../cmsis/include/core_cmInstr.h **** 
 120:../cmsis/include/core_cmInstr.h **** 
 121:../cmsis/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../cmsis/include/core_cmInstr.h **** 
 123:../cmsis/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../cmsis/include/core_cmInstr.h **** 
 125:../cmsis/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../cmsis/include/core_cmInstr.h ****     \return               Reversed value
 127:../cmsis/include/core_cmInstr.h ****  */
 128:../cmsis/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../cmsis/include/core_cmInstr.h **** {
 130:../cmsis/include/core_cmInstr.h ****   revsh r0, r0
 131:../cmsis/include/core_cmInstr.h ****   bx lr
 132:../cmsis/include/core_cmInstr.h **** }
 133:../cmsis/include/core_cmInstr.h **** 
 134:../cmsis/include/core_cmInstr.h **** 
 135:../cmsis/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../cmsis/include/core_cmInstr.h **** 
 137:../cmsis/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../cmsis/include/core_cmInstr.h **** 
 139:../cmsis/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../cmsis/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../cmsis/include/core_cmInstr.h ****     \return               Rotated value
 142:../cmsis/include/core_cmInstr.h ****  */
 143:../cmsis/include/core_cmInstr.h **** #define __ROR                             __ror
 144:../cmsis/include/core_cmInstr.h **** 
 145:../cmsis/include/core_cmInstr.h **** 
 146:../cmsis/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../cmsis/include/core_cmInstr.h **** 
 148:../cmsis/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../cmsis/include/core_cmInstr.h **** 
 150:../cmsis/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../cmsis/include/core_cmInstr.h **** 
 152:../cmsis/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../cmsis/include/core_cmInstr.h ****     \return               Reversed value
 154:../cmsis/include/core_cmInstr.h ****  */
 155:../cmsis/include/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../cmsis/include/core_cmInstr.h **** 
 157:../cmsis/include/core_cmInstr.h **** 
 158:../cmsis/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../cmsis/include/core_cmInstr.h **** 
 160:../cmsis/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../cmsis/include/core_cmInstr.h **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 15


 162:../cmsis/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../cmsis/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../cmsis/include/core_cmInstr.h ****  */
 165:../cmsis/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../cmsis/include/core_cmInstr.h **** 
 167:../cmsis/include/core_cmInstr.h **** 
 168:../cmsis/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../cmsis/include/core_cmInstr.h **** 
 170:../cmsis/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../cmsis/include/core_cmInstr.h **** 
 172:../cmsis/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../cmsis/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../cmsis/include/core_cmInstr.h ****  */
 175:../cmsis/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../cmsis/include/core_cmInstr.h **** 
 177:../cmsis/include/core_cmInstr.h **** 
 178:../cmsis/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../cmsis/include/core_cmInstr.h **** 
 180:../cmsis/include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../cmsis/include/core_cmInstr.h **** 
 182:../cmsis/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../cmsis/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../cmsis/include/core_cmInstr.h ****  */
 185:../cmsis/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../cmsis/include/core_cmInstr.h **** 
 187:../cmsis/include/core_cmInstr.h **** 
 188:../cmsis/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../cmsis/include/core_cmInstr.h **** 
 190:../cmsis/include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../cmsis/include/core_cmInstr.h **** 
 192:../cmsis/include/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../cmsis/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../cmsis/include/core_cmInstr.h ****     \return          0  Function succeeded
 195:../cmsis/include/core_cmInstr.h ****     \return          1  Function failed
 196:../cmsis/include/core_cmInstr.h ****  */
 197:../cmsis/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../cmsis/include/core_cmInstr.h **** 
 199:../cmsis/include/core_cmInstr.h **** 
 200:../cmsis/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../cmsis/include/core_cmInstr.h **** 
 202:../cmsis/include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../cmsis/include/core_cmInstr.h **** 
 204:../cmsis/include/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../cmsis/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../cmsis/include/core_cmInstr.h ****     \return          0  Function succeeded
 207:../cmsis/include/core_cmInstr.h ****     \return          1  Function failed
 208:../cmsis/include/core_cmInstr.h ****  */
 209:../cmsis/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../cmsis/include/core_cmInstr.h **** 
 211:../cmsis/include/core_cmInstr.h **** 
 212:../cmsis/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../cmsis/include/core_cmInstr.h **** 
 214:../cmsis/include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../cmsis/include/core_cmInstr.h **** 
 216:../cmsis/include/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../cmsis/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../cmsis/include/core_cmInstr.h ****     \return          0  Function succeeded
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 16


 219:../cmsis/include/core_cmInstr.h ****     \return          1  Function failed
 220:../cmsis/include/core_cmInstr.h ****  */
 221:../cmsis/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../cmsis/include/core_cmInstr.h **** 
 223:../cmsis/include/core_cmInstr.h **** 
 224:../cmsis/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../cmsis/include/core_cmInstr.h **** 
 226:../cmsis/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../cmsis/include/core_cmInstr.h **** 
 228:../cmsis/include/core_cmInstr.h ****  */
 229:../cmsis/include/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../cmsis/include/core_cmInstr.h **** 
 231:../cmsis/include/core_cmInstr.h **** 
 232:../cmsis/include/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../cmsis/include/core_cmInstr.h **** 
 234:../cmsis/include/core_cmInstr.h ****     This function saturates a signed value.
 235:../cmsis/include/core_cmInstr.h **** 
 236:../cmsis/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../cmsis/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../cmsis/include/core_cmInstr.h ****     \return             Saturated value
 239:../cmsis/include/core_cmInstr.h ****  */
 240:../cmsis/include/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../cmsis/include/core_cmInstr.h **** 
 242:../cmsis/include/core_cmInstr.h **** 
 243:../cmsis/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../cmsis/include/core_cmInstr.h **** 
 245:../cmsis/include/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../cmsis/include/core_cmInstr.h **** 
 247:../cmsis/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../cmsis/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../cmsis/include/core_cmInstr.h ****     \return             Saturated value
 250:../cmsis/include/core_cmInstr.h ****  */
 251:../cmsis/include/core_cmInstr.h **** #define __USAT                            __usat
 252:../cmsis/include/core_cmInstr.h **** 
 253:../cmsis/include/core_cmInstr.h **** 
 254:../cmsis/include/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../cmsis/include/core_cmInstr.h **** 
 256:../cmsis/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../cmsis/include/core_cmInstr.h **** 
 258:../cmsis/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../cmsis/include/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../cmsis/include/core_cmInstr.h ****  */
 261:../cmsis/include/core_cmInstr.h **** #define __CLZ                             __clz
 262:../cmsis/include/core_cmInstr.h **** 
 263:../cmsis/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../cmsis/include/core_cmInstr.h **** 
 265:../cmsis/include/core_cmInstr.h **** 
 266:../cmsis/include/core_cmInstr.h **** 
 267:../cmsis/include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../cmsis/include/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../cmsis/include/core_cmInstr.h **** 
 270:../cmsis/include/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../cmsis/include/core_cmInstr.h **** 
 272:../cmsis/include/core_cmInstr.h **** 
 273:../cmsis/include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../cmsis/include/core_cmInstr.h **** /* TI CCS specific functions */
 275:../cmsis/include/core_cmInstr.h **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 17


 276:../cmsis/include/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../cmsis/include/core_cmInstr.h **** 
 278:../cmsis/include/core_cmInstr.h **** 
 279:../cmsis/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../cmsis/include/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../cmsis/include/core_cmInstr.h **** 
 282:../cmsis/include/core_cmInstr.h **** /** \brief  No Operation
 283:../cmsis/include/core_cmInstr.h **** 
 284:../cmsis/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../cmsis/include/core_cmInstr.h ****  */
 286:../cmsis/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../cmsis/include/core_cmInstr.h **** {
 288:../cmsis/include/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../cmsis/include/core_cmInstr.h **** }
 290:../cmsis/include/core_cmInstr.h **** 
 291:../cmsis/include/core_cmInstr.h **** 
 292:../cmsis/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../cmsis/include/core_cmInstr.h **** 
 294:../cmsis/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../cmsis/include/core_cmInstr.h ****     until one of a number of events occurs.
 296:../cmsis/include/core_cmInstr.h ****  */
 297:../cmsis/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../cmsis/include/core_cmInstr.h **** {
 299:../cmsis/include/core_cmInstr.h ****   __ASM volatile ("wfi");
 240              		.loc 2 299 0
 241              		.syntax unified
 242              	@ 299 "../cmsis/include/core_cmInstr.h" 1
 243 000e 30BF     		wfi
 244              	@ 0 "" 2
 245              		.thumb
 246              		.syntax unified
 247 0010 7047     		bx	lr
 248              	.L23:
 249              	.LBE13:
 250              	.LBE12:
 251              	.LBB14:
 252              	.LBB15:
 300:../cmsis/include/core_cmInstr.h **** }
 301:../cmsis/include/core_cmInstr.h **** 
 302:../cmsis/include/core_cmInstr.h **** 
 303:../cmsis/include/core_cmInstr.h **** /** \brief  Wait For Event
 304:../cmsis/include/core_cmInstr.h **** 
 305:../cmsis/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../cmsis/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../cmsis/include/core_cmInstr.h ****  */
 308:../cmsis/include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../cmsis/include/core_cmInstr.h **** {
 310:../cmsis/include/core_cmInstr.h ****   __ASM volatile ("wfe");
 253              		.loc 2 310 0
 254              		.syntax unified
 255              	@ 310 "../cmsis/include/core_cmInstr.h" 1
 256 0012 20BF     		wfe
 257              	@ 0 "" 2
 258              		.thumb
 259              		.syntax unified
 260 0014 7047     		bx	lr
 261              	.L26:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 18


 262 0016 00BF     		.align	2
 263              	.L25:
 264 0018 00ED00E0 		.word	-536810240
 265              	.LBE15:
 266              	.LBE14:
 267              		.cfi_endproc
 268              	.LFE117:
 270              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 271              		.align	2
 272              		.global	PWR_EnterSTOPMode
 273              		.thumb
 274              		.thumb_func
 276              	PWR_EnterSTOPMode:
 277              	.LFB118:
 412:../stdperiph/source/stm32f37x_pwr.c ****   {   
 413:../stdperiph/source/stm32f37x_pwr.c ****     /* Request Wait For Interrupt */
 414:../stdperiph/source/stm32f37x_pwr.c ****     __WFI();
 415:../stdperiph/source/stm32f37x_pwr.c ****   }
 416:../stdperiph/source/stm32f37x_pwr.c ****   else
 417:../stdperiph/source/stm32f37x_pwr.c ****   {
 418:../stdperiph/source/stm32f37x_pwr.c ****     /* Request Wait For Event */
 419:../stdperiph/source/stm32f37x_pwr.c ****     __WFE();
 420:../stdperiph/source/stm32f37x_pwr.c ****   }
 421:../stdperiph/source/stm32f37x_pwr.c **** }
 422:../stdperiph/source/stm32f37x_pwr.c **** 
 423:../stdperiph/source/stm32f37x_pwr.c **** /**
 424:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Enters STOP mode.
 425:../stdperiph/source/stm32f37x_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 426:../stdperiph/source/stm32f37x_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 427:../stdperiph/source/stm32f37x_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 428:../stdperiph/source/stm32f37x_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 429:../stdperiph/source/stm32f37x_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 430:../stdperiph/source/stm32f37x_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 431:../stdperiph/source/stm32f37x_pwr.c ****   *         is higher although the startup time is reduced.
 432:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 433:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be one of the following values:
 434:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_Regulator_ON: STOP mode with regulator ON
 435:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 436:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 437:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be one of the following values:
 438:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 439:../stdperiph/source/stm32f37x_pwr.c ****   *             @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 440:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 441:../stdperiph/source/stm32f37x_pwr.c ****   */
 442:../stdperiph/source/stm32f37x_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 443:../stdperiph/source/stm32f37x_pwr.c **** {
 278              		.loc 1 443 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283              	.LVL17:
 444:../stdperiph/source/stm32f37x_pwr.c ****   uint32_t tmpreg = 0;
 445:../stdperiph/source/stm32f37x_pwr.c ****   
 446:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 447:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 448:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 19


 449:../stdperiph/source/stm32f37x_pwr.c ****   
 450:../stdperiph/source/stm32f37x_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 451:../stdperiph/source/stm32f37x_pwr.c ****   tmpreg = PWR->CR;
 284              		.loc 1 451 0
 285 0000 0A4A     		ldr	r2, .L30
 286 0002 1368     		ldr	r3, [r2]
 287              	.LVL18:
 452:../stdperiph/source/stm32f37x_pwr.c ****   /* Clear PDDS and LPDSR bits */
 453:../stdperiph/source/stm32f37x_pwr.c ****   tmpreg &= CR_DS_MASK;
 288              		.loc 1 453 0
 289 0004 23F00303 		bic	r3, r3, #3
 290              	.LVL19:
 454:../stdperiph/source/stm32f37x_pwr.c ****   
 455:../stdperiph/source/stm32f37x_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 456:../stdperiph/source/stm32f37x_pwr.c ****   tmpreg |= PWR_Regulator;
 291              		.loc 1 456 0
 292 0008 1843     		orrs	r0, r0, r3
 293              	.LVL20:
 457:../stdperiph/source/stm32f37x_pwr.c ****   
 458:../stdperiph/source/stm32f37x_pwr.c ****   /* Store the new value */
 459:../stdperiph/source/stm32f37x_pwr.c ****   PWR->CR = tmpreg;
 294              		.loc 1 459 0
 295 000a 1060     		str	r0, [r2]
 460:../stdperiph/source/stm32f37x_pwr.c ****   
 461:../stdperiph/source/stm32f37x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 462:../stdperiph/source/stm32f37x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 296              		.loc 1 462 0
 297 000c 084A     		ldr	r2, .L30+4
 298 000e 1369     		ldr	r3, [r2, #16]
 299 0010 43F00403 		orr	r3, r3, #4
 300 0014 1361     		str	r3, [r2, #16]
 463:../stdperiph/source/stm32f37x_pwr.c ****   
 464:../stdperiph/source/stm32f37x_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 465:../stdperiph/source/stm32f37x_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 301              		.loc 1 465 0
 302 0016 0129     		cmp	r1, #1
 303 0018 01D1     		bne	.L28
 304              	.LBB16:
 305              	.LBB17:
 299:../cmsis/include/core_cmInstr.h **** }
 306              		.loc 2 299 0
 307              		.syntax unified
 308              	@ 299 "../cmsis/include/core_cmInstr.h" 1
 309 001a 30BF     		wfi
 310              	@ 0 "" 2
 311              		.thumb
 312              		.syntax unified
 313 001c 00E0     		b	.L29
 314              	.L28:
 315              	.LBE17:
 316              	.LBE16:
 317              	.LBB18:
 318              	.LBB19:
 319              		.loc 2 310 0
 320              		.syntax unified
 321              	@ 310 "../cmsis/include/core_cmInstr.h" 1
 322 001e 20BF     		wfe
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 20


 323              	@ 0 "" 2
 324              		.thumb
 325              		.syntax unified
 326              	.L29:
 327              	.LBE19:
 328              	.LBE18:
 466:../stdperiph/source/stm32f37x_pwr.c ****   {   
 467:../stdperiph/source/stm32f37x_pwr.c ****     /* Request Wait For Interrupt */
 468:../stdperiph/source/stm32f37x_pwr.c ****     __WFI();
 469:../stdperiph/source/stm32f37x_pwr.c ****   }
 470:../stdperiph/source/stm32f37x_pwr.c ****   else
 471:../stdperiph/source/stm32f37x_pwr.c ****   {
 472:../stdperiph/source/stm32f37x_pwr.c ****     /* Request Wait For Event */
 473:../stdperiph/source/stm32f37x_pwr.c ****     __WFE();
 474:../stdperiph/source/stm32f37x_pwr.c ****   }
 475:../stdperiph/source/stm32f37x_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 476:../stdperiph/source/stm32f37x_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 329              		.loc 1 476 0
 330 0020 034A     		ldr	r2, .L30+4
 331 0022 1369     		ldr	r3, [r2, #16]
 332 0024 23F00403 		bic	r3, r3, #4
 333 0028 1361     		str	r3, [r2, #16]
 334 002a 7047     		bx	lr
 335              	.L31:
 336              		.align	2
 337              	.L30:
 338 002c 00700040 		.word	1073770496
 339 0030 00ED00E0 		.word	-536810240
 340              		.cfi_endproc
 341              	.LFE118:
 343              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 344              		.align	2
 345              		.global	PWR_EnterSTANDBYMode
 346              		.thumb
 347              		.thumb_func
 349              	PWR_EnterSTANDBYMode:
 350              	.LFB119:
 477:../stdperiph/source/stm32f37x_pwr.c **** }
 478:../stdperiph/source/stm32f37x_pwr.c **** 
 479:../stdperiph/source/stm32f37x_pwr.c **** /**
 480:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Enters STANDBY mode.
 481:../stdperiph/source/stm32f37x_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 482:../stdperiph/source/stm32f37x_pwr.c ****   *          - Reset pad (still available) 
 483:../stdperiph/source/stm32f37x_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for Wakeup pin 2 (WKUP2), tamper, 
 484:../stdperiph/source/stm32f37x_pwr.c ****   *             time-stamp, RTC Alarm out, or RTC clock calibration out.
 485:../stdperiph/source/stm32f37x_pwr.c ****   *          - WKUP pin 1 (PA0) and WKUP pin 3 (PE6), if enabled.
 486:../stdperiph/source/stm32f37x_pwr.c ****   * @param  None
 487:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 488:../stdperiph/source/stm32f37x_pwr.c ****   */
 489:../stdperiph/source/stm32f37x_pwr.c **** void PWR_EnterSTANDBYMode(void)
 490:../stdperiph/source/stm32f37x_pwr.c **** {
 351              		.loc 1 490 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              		@ link register save eliminated.
 491:../stdperiph/source/stm32f37x_pwr.c ****   /* Clear Wakeup flag */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 21


 492:../stdperiph/source/stm32f37x_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 356              		.loc 1 492 0
 357 0000 074B     		ldr	r3, .L33
 358 0002 1A68     		ldr	r2, [r3]
 359 0004 42F00402 		orr	r2, r2, #4
 360 0008 1A60     		str	r2, [r3]
 493:../stdperiph/source/stm32f37x_pwr.c ****   
 494:../stdperiph/source/stm32f37x_pwr.c ****   /* Select STANDBY mode */
 495:../stdperiph/source/stm32f37x_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 361              		.loc 1 495 0
 362 000a 1A68     		ldr	r2, [r3]
 363 000c 42F00202 		orr	r2, r2, #2
 364 0010 1A60     		str	r2, [r3]
 496:../stdperiph/source/stm32f37x_pwr.c ****   
 497:../stdperiph/source/stm32f37x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex-M4 System Control Register */
 498:../stdperiph/source/stm32f37x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 365              		.loc 1 498 0
 366 0012 044A     		ldr	r2, .L33+4
 367 0014 1369     		ldr	r3, [r2, #16]
 368 0016 43F00403 		orr	r3, r3, #4
 369 001a 1361     		str	r3, [r2, #16]
 370              	.LBB20:
 371              	.LBB21:
 299:../cmsis/include/core_cmInstr.h **** }
 372              		.loc 2 299 0
 373              		.syntax unified
 374              	@ 299 "../cmsis/include/core_cmInstr.h" 1
 375 001c 30BF     		wfi
 376              	@ 0 "" 2
 377              		.thumb
 378              		.syntax unified
 379 001e 7047     		bx	lr
 380              	.L34:
 381              		.align	2
 382              	.L33:
 383 0020 00700040 		.word	1073770496
 384 0024 00ED00E0 		.word	-536810240
 385              	.LBE21:
 386              	.LBE20:
 387              		.cfi_endproc
 388              	.LFE119:
 390              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 391              		.align	2
 392              		.global	PWR_GetFlagStatus
 393              		.thumb
 394              		.thumb_func
 396              	PWR_GetFlagStatus:
 397              	.LFB120:
 499:../stdperiph/source/stm32f37x_pwr.c ****   
 500:../stdperiph/source/stm32f37x_pwr.c **** /* This option is used to ensure that store operations are completed */
 501:../stdperiph/source/stm32f37x_pwr.c **** #if defined ( __CC_ARM   )
 502:../stdperiph/source/stm32f37x_pwr.c ****   __force_stores();
 503:../stdperiph/source/stm32f37x_pwr.c **** #endif
 504:../stdperiph/source/stm32f37x_pwr.c ****   /* Request Wait For Interrupt */
 505:../stdperiph/source/stm32f37x_pwr.c ****   __WFI();
 506:../stdperiph/source/stm32f37x_pwr.c **** }
 507:../stdperiph/source/stm32f37x_pwr.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 22


 508:../stdperiph/source/stm32f37x_pwr.c **** /**
 509:../stdperiph/source/stm32f37x_pwr.c ****   * @}
 510:../stdperiph/source/stm32f37x_pwr.c ****   */
 511:../stdperiph/source/stm32f37x_pwr.c **** 
 512:../stdperiph/source/stm32f37x_pwr.c **** /** @defgroup PWR_Group6 Flags management functions
 513:../stdperiph/source/stm32f37x_pwr.c ****  *  @brief   Flags management functions 
 514:../stdperiph/source/stm32f37x_pwr.c ****  *
 515:../stdperiph/source/stm32f37x_pwr.c **** @verbatim
 516:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 517:../stdperiph/source/stm32f37x_pwr.c ****                        ##### Flags management functions #####
 518:../stdperiph/source/stm32f37x_pwr.c ****   ==============================================================================
 519:../stdperiph/source/stm32f37x_pwr.c **** 
 520:../stdperiph/source/stm32f37x_pwr.c **** @endverbatim
 521:../stdperiph/source/stm32f37x_pwr.c ****   * @{
 522:../stdperiph/source/stm32f37x_pwr.c ****   */
 523:../stdperiph/source/stm32f37x_pwr.c **** 
 524:../stdperiph/source/stm32f37x_pwr.c **** /**
 525:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 526:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 527:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be one of the following values:
 528:../stdperiph/source/stm32f37x_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 529:../stdperiph/source/stm32f37x_pwr.c ****   *                 was received from the WKUP pin or from the RTC alarm (Alarm A or Alarm B), 
 530:../stdperiph/source/stm32f37x_pwr.c ****   *                 RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 531:../stdperiph/source/stm32f37x_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 532:../stdperiph/source/stm32f37x_pwr.c ****   *                 resumed from StandBy mode.
 533:../stdperiph/source/stm32f37x_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 534:../stdperiph/source/stm32f37x_pwr.c ****   *                 by the PWR_PVDCmd() function.
 535:../stdperiph/source/stm32f37x_pwr.c ****   *            @arg PWR_FLAG_VREFINTRDY: Internal Voltage Reference Ready flag. This 
 536:../stdperiph/source/stm32f37x_pwr.c ****   *                 flag indicates the state of the internal voltage reference, VREFINT.
 537:../stdperiph/source/stm32f37x_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 538:../stdperiph/source/stm32f37x_pwr.c ****   */
 539:../stdperiph/source/stm32f37x_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 540:../stdperiph/source/stm32f37x_pwr.c **** {
 398              		.loc 1 540 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 403              	.LVL21:
 541:../stdperiph/source/stm32f37x_pwr.c ****   FlagStatus bitstatus = RESET;
 542:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 543:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 544:../stdperiph/source/stm32f37x_pwr.c ****   
 545:../stdperiph/source/stm32f37x_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 404              		.loc 1 545 0
 405 0000 034B     		ldr	r3, .L38
 406 0002 5B68     		ldr	r3, [r3, #4]
 407 0004 0342     		tst	r3, r0
 408 0006 01D0     		beq	.L37
 546:../stdperiph/source/stm32f37x_pwr.c ****   {
 547:../stdperiph/source/stm32f37x_pwr.c ****     bitstatus = SET;
 409              		.loc 1 547 0
 410 0008 0120     		movs	r0, #1
 411              	.LVL22:
 412 000a 7047     		bx	lr
 413              	.LVL23:
 414              	.L37:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 23


 548:../stdperiph/source/stm32f37x_pwr.c ****   }
 549:../stdperiph/source/stm32f37x_pwr.c ****   else
 550:../stdperiph/source/stm32f37x_pwr.c ****   {
 551:../stdperiph/source/stm32f37x_pwr.c ****     bitstatus = RESET;
 415              		.loc 1 551 0
 416 000c 0020     		movs	r0, #0
 417              	.LVL24:
 552:../stdperiph/source/stm32f37x_pwr.c ****   }
 553:../stdperiph/source/stm32f37x_pwr.c ****   /* Return the flag status */
 554:../stdperiph/source/stm32f37x_pwr.c ****   return bitstatus;
 555:../stdperiph/source/stm32f37x_pwr.c **** }
 418              		.loc 1 555 0
 419 000e 7047     		bx	lr
 420              	.L39:
 421              		.align	2
 422              	.L38:
 423 0010 00700040 		.word	1073770496
 424              		.cfi_endproc
 425              	.LFE120:
 427              		.section	.text.PWR_ClearFlag,"ax",%progbits
 428              		.align	2
 429              		.global	PWR_ClearFlag
 430              		.thumb
 431              		.thumb_func
 433              	PWR_ClearFlag:
 434              	.LFB121:
 556:../stdperiph/source/stm32f37x_pwr.c **** 
 557:../stdperiph/source/stm32f37x_pwr.c **** /**
 558:../stdperiph/source/stm32f37x_pwr.c ****   * @brief  Clears the PWR's pending flags.
 559:../stdperiph/source/stm32f37x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 560:../stdperiph/source/stm32f37x_pwr.c ****   *          This parameter can be one of the following values:
 561:../stdperiph/source/stm32f37x_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 562:../stdperiph/source/stm32f37x_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 563:../stdperiph/source/stm32f37x_pwr.c ****   * @retval None
 564:../stdperiph/source/stm32f37x_pwr.c ****   */
 565:../stdperiph/source/stm32f37x_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 566:../stdperiph/source/stm32f37x_pwr.c **** {
 435              		.loc 1 566 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440              	.LVL25:
 567:../stdperiph/source/stm32f37x_pwr.c ****   /* Check the parameters */
 568:../stdperiph/source/stm32f37x_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 569:../stdperiph/source/stm32f37x_pwr.c ****          
 570:../stdperiph/source/stm32f37x_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 441              		.loc 1 570 0
 442 0000 024A     		ldr	r2, .L41
 443 0002 1368     		ldr	r3, [r2]
 444 0004 43EA8000 		orr	r0, r3, r0, lsl #2
 445              	.LVL26:
 446 0008 1060     		str	r0, [r2]
 447 000a 7047     		bx	lr
 448              	.L42:
 449              		.align	2
 450              	.L41:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 24


 451 000c 00700040 		.word	1073770496
 452              		.cfi_endproc
 453              	.LFE121:
 455              		.text
 456              	.Letext0:
 457              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 458              		.file 4 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 459              		.file 5 "../cmsis/include/core_cm4.h"
 460              		.file 6 "../cmsis/include/stm32f37x.h"
 461              		.file 7 "../stdperiph/include/stm32f37x_rcc.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccEuam6X.s 			page 25


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f37x_pwr.c
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:22     .text.PWR_DeInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:27     .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:54     .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:59     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:74     .text.PWR_BackupAccessCmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:79     .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:84     .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:108    .text.PWR_PVDLevelConfig:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:113    .text.PWR_PVDCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:118    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:133    .text.PWR_PVDCmd:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:138    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:143    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:172    .text.PWR_WakeUpPinCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:177    .text.PWR_SDADCAnalogCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:182    .text.PWR_SDADCAnalogCmd:00000000 PWR_SDADCAnalogCmd
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:211    .text.PWR_SDADCAnalogCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:216    .text.PWR_EnterSleepMode:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:221    .text.PWR_EnterSleepMode:00000000 PWR_EnterSleepMode
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:264    .text.PWR_EnterSleepMode:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:271    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:276    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:338    .text.PWR_EnterSTOPMode:0000002c $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:344    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:349    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:383    .text.PWR_EnterSTANDBYMode:00000020 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:391    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:396    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:423    .text.PWR_GetFlagStatus:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:428    .text.PWR_ClearFlag:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:433    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
C:\Users\strag\AppData\Local\Temp\ccEuam6X.s:451    .text.PWR_ClearFlag:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
