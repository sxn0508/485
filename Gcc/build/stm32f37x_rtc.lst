ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f37x_rtc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	RTC_ByteToBcd2:
  27              	.LFB162:
  28              		.file 1 "../stdperiph/source/stm32f37x_rtc.c"
   1:../stdperiph/source/stm32f37x_rtc.c **** /**
   2:../stdperiph/source/stm32f37x_rtc.c ****   ******************************************************************************
   3:../stdperiph/source/stm32f37x_rtc.c ****   * @file    stm32f37x_rtc.c
   4:../stdperiph/source/stm32f37x_rtc.c ****   * @author  MCD Application Team
   5:../stdperiph/source/stm32f37x_rtc.c ****   * @version V1.0.0
   6:../stdperiph/source/stm32f37x_rtc.c ****   * @date    20-September-2012
   7:../stdperiph/source/stm32f37x_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../stdperiph/source/stm32f37x_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../stdperiph/source/stm32f37x_rtc.c ****   *           + Initialization
  10:../stdperiph/source/stm32f37x_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:../stdperiph/source/stm32f37x_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:../stdperiph/source/stm32f37x_rtc.c ****   *           + WakeUp Timer configuration
  13:../stdperiph/source/stm32f37x_rtc.c ****   *           + Daylight Saving configuration
  14:../stdperiph/source/stm32f37x_rtc.c ****   *           + Output pin Configuration
  15:../stdperiph/source/stm32f37x_rtc.c ****   *           + Original Digital Calibration configuration  
  16:../stdperiph/source/stm32f37x_rtc.c ****   *           + Digital Calibration configuration
  17:../stdperiph/source/stm32f37x_rtc.c ****   *           + TimeStamp configuration
  18:../stdperiph/source/stm32f37x_rtc.c ****   *           + Tampers configuration
  19:../stdperiph/source/stm32f37x_rtc.c ****   *           + Backup Data Registers configuration
  20:../stdperiph/source/stm32f37x_rtc.c ****   *           + Output Type Config configuration
  21:../stdperiph/source/stm32f37x_rtc.c ****   *           + Shift control synchronisation  
  22:../stdperiph/source/stm32f37x_rtc.c ****   *           + Interrupts and flags management       
  23:../stdperiph/source/stm32f37x_rtc.c ****   *                     
  24:../stdperiph/source/stm32f37x_rtc.c ****   @verbatim
  25:../stdperiph/source/stm32f37x_rtc.c ****   ===============================================================================
  26:../stdperiph/source/stm32f37x_rtc.c ****                     ##### Backup Domain Operating Condition #####
  27:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
  28:../stdperiph/source/stm32f37x_rtc.c ****     [..] The real-time clock (RTC) and the RTC backup registers can be powered
  29:../stdperiph/source/stm32f37x_rtc.c ****          from the VBAT voltage when the main VDD supply is powered off.
  30:../stdperiph/source/stm32f37x_rtc.c ****          To retain the content of the RTC backup registers and supply the RTC 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 2


  31:../stdperiph/source/stm32f37x_rtc.c ****          when VDD is turned off, VBAT pin can be connected to an optional
  32:../stdperiph/source/stm32f37x_rtc.c ****          standby voltage supplied by a battery or by another source.
  33:../stdperiph/source/stm32f37x_rtc.c ****   
  34:../stdperiph/source/stm32f37x_rtc.c ****     [..] To allow the RTC to operate even when the main digital supply (VDD) 
  35:../stdperiph/source/stm32f37x_rtc.c ****          is turned off, the VBAT pin powers the following blocks:
  36:../stdperiph/source/stm32f37x_rtc.c ****            (#) The RTC
  37:../stdperiph/source/stm32f37x_rtc.c ****            (#) The LSE oscillator
  38:../stdperiph/source/stm32f37x_rtc.c ****            (#) PC13 to PC15 I/Os I/Os (when available)
  39:../stdperiph/source/stm32f37x_rtc.c ****   
  40:../stdperiph/source/stm32f37x_rtc.c ****     [..] When the backup domain is supplied by VDD (analog switch connected 
  41:../stdperiph/source/stm32f37x_rtc.c ****          to VDD), the following functions are available:
  42:../stdperiph/source/stm32f37x_rtc.c ****            (#) PC14 and PC15 can be used as either GPIO or LSE pins
  43:../stdperiph/source/stm32f37x_rtc.c ****            (#) PC13 can be used as a GPIO or as the RTC_AF pin
  44:../stdperiph/source/stm32f37x_rtc.c ****   
  45:../stdperiph/source/stm32f37x_rtc.c ****     [..] When the backup domain is supplied by VBAT (analog switch connected 
  46:../stdperiph/source/stm32f37x_rtc.c ****          to VBAT because VDD is not present), the following functions are available:
  47:../stdperiph/source/stm32f37x_rtc.c ****            (#) PC14 and PC15 can be used as LSE pins only
  48:../stdperiph/source/stm32f37x_rtc.c ****            (#) PC13 can be used as the RTC_AF pin 
  49:../stdperiph/source/stm32f37x_rtc.c ****   
  50:../stdperiph/source/stm32f37x_rtc.c ****                      ##### Backup Domain Reset #####
  51:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
  52:../stdperiph/source/stm32f37x_rtc.c ****     [..] The backup domain reset sets all RTC registers and the RCC_BDCR 
  53:../stdperiph/source/stm32f37x_rtc.c ****          register to their reset values. 
  54:../stdperiph/source/stm32f37x_rtc.c ****          A backup domain reset is generated when one of the following events
  55:../stdperiph/source/stm32f37x_rtc.c ****          occurs:
  56:../stdperiph/source/stm32f37x_rtc.c ****            (#) Software reset, triggered by setting the BDRST bit in the 
  57:../stdperiph/source/stm32f37x_rtc.c ****                RCC Backup domain control register (RCC_BDCR). You can use the
  58:../stdperiph/source/stm32f37x_rtc.c ****                RCC_BackupResetCmd().
  59:../stdperiph/source/stm32f37x_rtc.c ****            (#) VDD or VBAT power on, if both supplies have previously been
  60:../stdperiph/source/stm32f37x_rtc.c ****                powered off.
  61:../stdperiph/source/stm32f37x_rtc.c ****   
  62:../stdperiph/source/stm32f37x_rtc.c ****                      ##### Backup Domain Access #####
  63:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
  64:../stdperiph/source/stm32f37x_rtc.c ****     [..] After reset, the backup domain (RTC registers and RTC backup data 
  65:../stdperiph/source/stm32f37x_rtc.c ****          registers) is protected against possible unwanted write accesses. 
  66:../stdperiph/source/stm32f37x_rtc.c ****     [..] To enable access to the Backup Domain and RTC registers, proceed as follows:
  67:../stdperiph/source/stm32f37x_rtc.c ****          (#) Enable the Power Controller (PWR) APB1 interface clock using the
  68:../stdperiph/source/stm32f37x_rtc.c ****              RCC_APB1PeriphClockCmd() function.
  69:../stdperiph/source/stm32f37x_rtc.c ****          (#) Enable access to Backup domain using the PWR_BackupAccessCmd() function.
  70:../stdperiph/source/stm32f37x_rtc.c ****          (#) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  71:../stdperiph/source/stm32f37x_rtc.c ****          (#) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  72:../stdperiph/source/stm32f37x_rtc.c ****                                                                                            
  73:../stdperiph/source/stm32f37x_rtc.c ****   
  74:../stdperiph/source/stm32f37x_rtc.c ****                      ##### How to use this driver #####
  75:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
  76:../stdperiph/source/stm32f37x_rtc.c ****     [..]
  77:../stdperiph/source/stm32f37x_rtc.c ****         (+) Enable the backup domain access (see description in the section above)
  78:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and
  79:../stdperiph/source/stm32f37x_rtc.c ****             RTC hour format using the RTC_Init() function.
  80:../stdperiph/source/stm32f37x_rtc.c ****   
  81:../stdperiph/source/stm32f37x_rtc.c ****  ***Time and Date configuration ***
  82:../stdperiph/source/stm32f37x_rtc.c ****  ==================================
  83:../stdperiph/source/stm32f37x_rtc.c ****      [..]
  84:../stdperiph/source/stm32f37x_rtc.c ****         (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  85:../stdperiph/source/stm32f37x_rtc.c ****             and RTC_SetDate() functions.
  86:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  87:../stdperiph/source/stm32f37x_rtc.c ****             functions.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 3


  88:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC subsecond, use the RTC_GetSubSecond() function.
  89:../stdperiph/source/stm32f37x_rtc.c ****         (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  90:../stdperiph/source/stm32f37x_rtc.c ****             hour to the RTC Calendar.
  91:../stdperiph/source/stm32f37x_rtc.c ****   
  92:../stdperiph/source/stm32f37x_rtc.c ****  ***Alarm configuration ***
  93:../stdperiph/source/stm32f37x_rtc.c ****  ========================== 
  94:../stdperiph/source/stm32f37x_rtc.c ****      [..]  
  95:../stdperiph/source/stm32f37x_rtc.c ****         (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
  96:../stdperiph/source/stm32f37x_rtc.c ****         (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function  
  97:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
  98:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
  99:../stdperiph/source/stm32f37x_rtc.c ****  
 100:../stdperiph/source/stm32f37x_rtc.c ****  ***RTC Wakeup configuration***
 101:../stdperiph/source/stm32f37x_rtc.c ****  ========================== 
 102:../stdperiph/source/stm32f37x_rtc.c ****     [..]  
 103:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 104:../stdperiph/source/stm32f37x_rtc.c ****             function.
 105:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 106:../stdperiph/source/stm32f37x_rtc.c ****             function  
 107:../stdperiph/source/stm32f37x_rtc.c ****         (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 108:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 109:../stdperiph/source/stm32f37x_rtc.c ****             function.
 110:../stdperiph/source/stm32f37x_rtc.c ****   
 111:../stdperiph/source/stm32f37x_rtc.c ****  ***Outputs configuration ***
 112:../stdperiph/source/stm32f37x_rtc.c ****  ============================
 113:../stdperiph/source/stm32f37x_rtc.c ****     [..] The RTC has 2 different outputs:
 114:../stdperiph/source/stm32f37x_rtc.c ****         (+) AFO_ALARM: this output is used to manage the RTC Alarm A.
 115:../stdperiph/source/stm32f37x_rtc.c ****             To output the selected RTC signal on RTC_AF pin, use the 
 116:../stdperiph/source/stm32f37x_rtc.c ****             RTC_OutputConfig() function.                
 117:../stdperiph/source/stm32f37x_rtc.c ****         (+) AFO_CALIB: this output is 512Hz signal or 1Hz .
 118:../stdperiph/source/stm32f37x_rtc.c ****             To output the RTC Clock on RTC_AF pin, use the RTC_CalibOutputCmd()
 119:../stdperiph/source/stm32f37x_rtc.c ****             function.                
 120:../stdperiph/source/stm32f37x_rtc.c ****   
 121:../stdperiph/source/stm32f37x_rtc.c ****  ***Original Digital Calibration configuration ***
 122:../stdperiph/source/stm32f37x_rtc.c ****  =================================    
 123:../stdperiph/source/stm32f37x_rtc.c ****     [..] Configure the RTC Original Digital Calibration Value and the corresponding
 124:../stdperiph/source/stm32f37x_rtc.c ****          calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig()
 125:../stdperiph/source/stm32f37x_rtc.c ****          function.
 126:../stdperiph/source/stm32f37x_rtc.c ****   
 127:../stdperiph/source/stm32f37x_rtc.c ****  ***TimeStamp configuration ***
 128:../stdperiph/source/stm32f37x_rtc.c ****  ==============================
 129:../stdperiph/source/stm32f37x_rtc.c ****     [..]  
 130:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the RTC_AF trigger and enables the RTC TimeStamp 
 131:../stdperiph/source/stm32f37x_rtc.c ****             using the RTC_TimeStampCmd() function.
 132:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC TimeStamp Time and Date register, use the 
 133:../stdperiph/source/stm32f37x_rtc.c ****             RTC_GetTimeStamp() function.
 134:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC TimeStamp SubSecond register, use the 
 135:../stdperiph/source/stm32f37x_rtc.c ****             RTC_GetTimeStampSubSecond() function.
 136:../stdperiph/source/stm32f37x_rtc.c ****   
 137:../stdperiph/source/stm32f37x_rtc.c ****  ***Tamper configuration ***
 138:../stdperiph/source/stm32f37x_rtc.c ****  ===========================
 139:../stdperiph/source/stm32f37x_rtc.c ****     [..]   
 140:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 141:../stdperiph/source/stm32f37x_rtc.c ****             function. 
 142:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 143:../stdperiph/source/stm32f37x_rtc.c ****             filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 144:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 4


 145:../stdperiph/source/stm32f37x_rtc.c ****             function.
 146:../stdperiph/source/stm32f37x_rtc.c ****         (+) Configure the Tamper precharge or discharge duration using 
 147:../stdperiph/source/stm32f37x_rtc.c ****             RTC_TamperPinsPrechargeDuration() function.
 148:../stdperiph/source/stm32f37x_rtc.c ****         (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 149:../stdperiph/source/stm32f37x_rtc.c ****         (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 150:../stdperiph/source/stm32f37x_rtc.c ****         (+) Enable the Time stamp on Tamper detection event using  
 151:../stdperiph/source/stm32f37x_rtc.c ****             RTC_TSOnTamperDetecCmd() function.     
 152:../stdperiph/source/stm32f37x_rtc.c ****   
 153:../stdperiph/source/stm32f37x_rtc.c ****  ***Backup Data Registers configuration ***
 154:../stdperiph/source/stm32f37x_rtc.c ****  ==========================================
 155:../stdperiph/source/stm32f37x_rtc.c ****     [..]  
 156:../stdperiph/source/stm32f37x_rtc.c ****         (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 157:../stdperiph/source/stm32f37x_rtc.c ****             function.  
 158:../stdperiph/source/stm32f37x_rtc.c ****         (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 159:../stdperiph/source/stm32f37x_rtc.c ****             function.  
 160:../stdperiph/source/stm32f37x_rtc.c ****   
 161:../stdperiph/source/stm32f37x_rtc.c ****                        ##### RTC and low power modes #####
 162:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
 163:../stdperiph/source/stm32f37x_rtc.c ****     [..] The MCU can be woken up from a low power mode by an RTC alternate 
 164:../stdperiph/source/stm32f37x_rtc.c ****          function.
 165:../stdperiph/source/stm32f37x_rtc.c ****     [..] The RTC alternate functions are the RTC alarm (Alarm A), RTC tamper 
 166:../stdperiph/source/stm32f37x_rtc.c ****          event detection and RTC time stamp event detection.
 167:../stdperiph/source/stm32f37x_rtc.c ****          These RTC alternate functions can wake up the system from the Stop 
 168:../stdperiph/source/stm32f37x_rtc.c ****          and Standby lowpower modes.
 169:../stdperiph/source/stm32f37x_rtc.c ****          The system can also wake up from low power modes without depending 
 170:../stdperiph/source/stm32f37x_rtc.c ****          on an external interrupt (Auto-wakeup mode), by using the RTC alarm events.
 171:../stdperiph/source/stm32f37x_rtc.c ****     [..] The RTC provides a programmable time base for waking up from the 
 172:../stdperiph/source/stm32f37x_rtc.c ****          Stop or Standby mode at regular intervals.
 173:../stdperiph/source/stm32f37x_rtc.c ****          Wakeup from STOP and Standby modes is possible only when the RTC 
 174:../stdperiph/source/stm32f37x_rtc.c ****          clock source is LSE or LSI.
 175:../stdperiph/source/stm32f37x_rtc.c ****   
 176:../stdperiph/source/stm32f37x_rtc.c ****                ##### Selection of RTC_AF alternate functions #####
 177:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
 178:../stdperiph/source/stm32f37x_rtc.c ****     [..] The RTC_AF pin (PC13) can be used for the following purposes:
 179:../stdperiph/source/stm32f37x_rtc.c ****          (+) Wakeup pin 2 (WKUP2) using the PWR_WakeUpPinCmd() function.
 180:../stdperiph/source/stm32f37x_rtc.c ****          (+) AFO_ALARM output       
 181:../stdperiph/source/stm32f37x_rtc.c ****          (+) AFO_CALIB output
 182:../stdperiph/source/stm32f37x_rtc.c ****          (+) AFI_TAMPER
 183:../stdperiph/source/stm32f37x_rtc.c ****          (+) AFI_TIMESTAMP
 184:../stdperiph/source/stm32f37x_rtc.c ****                            
 185:../stdperiph/source/stm32f37x_rtc.c ****    +------------------------------------------------------------------------------------------+
 186:../stdperiph/source/stm32f37x_rtc.c ****    |     Pin         |RTC ALARM |RTC CALIB |RTC TAMPER |RTC TIMESTAMP |PC13MODE|  PC13VALUE   |
 187:../stdperiph/source/stm32f37x_rtc.c ****    |  configuration  | OUTPUT   | OUTPUT   |  INPUT    |    INPUT     |  bit   |     bit      |
 188:../stdperiph/source/stm32f37x_rtc.c ****    |  and function   | ENABLED  | ENABLED  | ENABLED   |   ENABLED    |        |              |
 189:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 190:../stdperiph/source/stm32f37x_rtc.c ****    |   Alarm out     |          |          |           |              | Don't  |              |
 191:../stdperiph/source/stm32f37x_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   | care   |      0       |
 192:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 193:../stdperiph/source/stm32f37x_rtc.c ****    |   Alarm out     |          |          |           |              | Don't  |              |
 194:../stdperiph/source/stm32f37x_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   | care   |      1       |
 195:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 196:../stdperiph/source/stm32f37x_rtc.c ****    | Calibration out |          |          |           |              | Don't  |              |
 197:../stdperiph/source/stm32f37x_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   | care   |  Don't care  |
 198:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 199:../stdperiph/source/stm32f37x_rtc.c ****    |  TAMPER input   |          |          |           |              | Don't  |              |
 200:../stdperiph/source/stm32f37x_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       | care   |  Don't care  |
 201:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 5


 202:../stdperiph/source/stm32f37x_rtc.c ****    |  TIMESTAMP and  |          |          |           |              | Don't  |              |
 203:../stdperiph/source/stm32f37x_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       | care   |  Don't care  |
 204:../stdperiph/source/stm32f37x_rtc.c ****    |   floating      |          |          |           |              |        |              |
 205:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 206:../stdperiph/source/stm32f37x_rtc.c ****    | TIMESTAMP input |          |          |           |              | Don't  |              |
 207:../stdperiph/source/stm32f37x_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       | care   |  Don't care  |
 208:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 209:../stdperiph/source/stm32f37x_rtc.c ****    |   Output PP     |     0    |    0     |     0     |      0       |   1    | PC13 output  |
 210:../stdperiph/source/stm32f37x_rtc.c ****    |    Forced       |          |          |           |              |        |              |
 211:../stdperiph/source/stm32f37x_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 212:../stdperiph/source/stm32f37x_rtc.c ****    |  Wakeup Pin or  |     0    |    0     |     0     |      0       |   0    | Don't care   |
 213:../stdperiph/source/stm32f37x_rtc.c ****    |  Standard GPIO  |          |          |           |              |        |              |
 214:../stdperiph/source/stm32f37x_rtc.c ****    +------------------------------------------------------------------------------------------+
 215:../stdperiph/source/stm32f37x_rtc.c ****   
 216:../stdperiph/source/stm32f37x_rtc.c ****  @endverbatim
 217:../stdperiph/source/stm32f37x_rtc.c **** 
 218:../stdperiph/source/stm32f37x_rtc.c ****   ******************************************************************************
 219:../stdperiph/source/stm32f37x_rtc.c ****   * @attention
 220:../stdperiph/source/stm32f37x_rtc.c ****   *
 221:../stdperiph/source/stm32f37x_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 222:../stdperiph/source/stm32f37x_rtc.c ****   *
 223:../stdperiph/source/stm32f37x_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 224:../stdperiph/source/stm32f37x_rtc.c ****   * You may not use this file except in compliance with the License.
 225:../stdperiph/source/stm32f37x_rtc.c ****   * You may obtain a copy of the License at:
 226:../stdperiph/source/stm32f37x_rtc.c ****   *
 227:../stdperiph/source/stm32f37x_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 228:../stdperiph/source/stm32f37x_rtc.c ****   *
 229:../stdperiph/source/stm32f37x_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 230:../stdperiph/source/stm32f37x_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 231:../stdperiph/source/stm32f37x_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 232:../stdperiph/source/stm32f37x_rtc.c ****   * See the License for the specific language governing permissions and
 233:../stdperiph/source/stm32f37x_rtc.c ****   * limitations under the License.
 234:../stdperiph/source/stm32f37x_rtc.c ****   *
 235:../stdperiph/source/stm32f37x_rtc.c ****   ******************************************************************************
 236:../stdperiph/source/stm32f37x_rtc.c ****   */
 237:../stdperiph/source/stm32f37x_rtc.c **** 
 238:../stdperiph/source/stm32f37x_rtc.c **** /* Includes ------------------------------------------------------------------*/
 239:../stdperiph/source/stm32f37x_rtc.c **** #include "stm32f37x_rtc.h"
 240:../stdperiph/source/stm32f37x_rtc.c **** #include "stm32f37x_rcc.h"
 241:../stdperiph/source/stm32f37x_rtc.c **** 
 242:../stdperiph/source/stm32f37x_rtc.c **** /** @addtogroup STM32F37x_StdPeriph_Driver
 243:../stdperiph/source/stm32f37x_rtc.c ****   * @{
 244:../stdperiph/source/stm32f37x_rtc.c ****   */
 245:../stdperiph/source/stm32f37x_rtc.c **** 
 246:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC 
 247:../stdperiph/source/stm32f37x_rtc.c ****   * @brief RTC driver modules
 248:../stdperiph/source/stm32f37x_rtc.c ****   * @{
 249:../stdperiph/source/stm32f37x_rtc.c ****   */
 250:../stdperiph/source/stm32f37x_rtc.c **** 
 251:../stdperiph/source/stm32f37x_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 252:../stdperiph/source/stm32f37x_rtc.c **** /* Private define ------------------------------------------------------------*/
 253:../stdperiph/source/stm32f37x_rtc.c **** 
 254:../stdperiph/source/stm32f37x_rtc.c **** /* Masks Definition */
 255:../stdperiph/source/stm32f37x_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 256:../stdperiph/source/stm32f37x_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 257:../stdperiph/source/stm32f37x_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 258:../stdperiph/source/stm32f37x_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 6


 259:../stdperiph/source/stm32f37x_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 260:../stdperiph/source/stm32f37x_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 261:../stdperiph/source/stm32f37x_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 262:../stdperiph/source/stm32f37x_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 263:../stdperiph/source/stm32f37x_rtc.c ****                                             RTC_FLAG_TAMP2F | RTC_FLAG_TAMP3F | RTC_FLAG_RECALPF | 
 264:../stdperiph/source/stm32f37x_rtc.c ****                                             RTC_FLAG_SHPF))
 265:../stdperiph/source/stm32f37x_rtc.c **** 
 266:../stdperiph/source/stm32f37x_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00002000)
 267:../stdperiph/source/stm32f37x_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00004000)
 268:../stdperiph/source/stm32f37x_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00001000)
 269:../stdperiph/source/stm32f37x_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 270:../stdperiph/source/stm32f37x_rtc.c **** 
 271:../stdperiph/source/stm32f37x_rtc.c **** /* Private macro -------------------------------------------------------------*/
 272:../stdperiph/source/stm32f37x_rtc.c **** /* Private variables ---------------------------------------------------------*/
 273:../stdperiph/source/stm32f37x_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 274:../stdperiph/source/stm32f37x_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 275:../stdperiph/source/stm32f37x_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 276:../stdperiph/source/stm32f37x_rtc.c **** 
 277:../stdperiph/source/stm32f37x_rtc.c **** /* Private functions ---------------------------------------------------------*/
 278:../stdperiph/source/stm32f37x_rtc.c **** 
 279:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Private_Functions
 280:../stdperiph/source/stm32f37x_rtc.c ****   * @{
 281:../stdperiph/source/stm32f37x_rtc.c ****   */ 
 282:../stdperiph/source/stm32f37x_rtc.c **** 
 283:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 284:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Initialization and Configuration functions 
 285:../stdperiph/source/stm32f37x_rtc.c ****  *
 286:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
 287:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
 288:../stdperiph/source/stm32f37x_rtc.c ****             ##### Initialization and Configuration functions #####
 289:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
 290:../stdperiph/source/stm32f37x_rtc.c **** 
 291:../stdperiph/source/stm32f37x_rtc.c ****     [..] This section provide functions allowing to initialize and configure the RTC
 292:../stdperiph/source/stm32f37x_rtc.c ****          Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 293:../stdperiph/source/stm32f37x_rtc.c ****          Write protection, enter and exit the RTC initialization mode, RTC registers
 294:../stdperiph/source/stm32f37x_rtc.c ****          synchronization check and reference clock detection enable.
 295:../stdperiph/source/stm32f37x_rtc.c ****   
 296:../stdperiph/source/stm32f37x_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 297:../stdperiph/source/stm32f37x_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 298:../stdperiph/source/stm32f37x_rtc.c ****              (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 299:../stdperiph/source/stm32f37x_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 300:../stdperiph/source/stm32f37x_rtc.c ****                   asynchronous prescaler to a high value to minimize consumption.
 301:../stdperiph/source/stm32f37x_rtc.c **** 
 302:../stdperiph/source/stm32f37x_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 303:../stdperiph/source/stm32f37x_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 304:../stdperiph/source/stm32f37x_rtc.c **** 
 305:../stdperiph/source/stm32f37x_rtc.c ****          (#) To Configure the RTC Calendar, user application should enter initialization
 306:../stdperiph/source/stm32f37x_rtc.c ****              mode. In this mode, the calendar counter is stopped and its value can be 
 307:../stdperiph/source/stm32f37x_rtc.c ****              updated. When the initialization sequence is complete, the calendar restarts 
 308:../stdperiph/source/stm32f37x_rtc.c ****              counting after 4 RTCCLK cycles.
 309:../stdperiph/source/stm32f37x_rtc.c **** 
 310:../stdperiph/source/stm32f37x_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar initialization,
 311:../stdperiph/source/stm32f37x_rtc.c ****              calendar update or after wakeup from low power modes the software must first 
 312:../stdperiph/source/stm32f37x_rtc.c ****              clear the RSF flag. The software must then wait until it is set again before 
 313:../stdperiph/source/stm32f37x_rtc.c ****              reading the calendar, which means that the calendar registers have been 
 314:../stdperiph/source/stm32f37x_rtc.c ****              correctly copied into the RTC_TR and RTC_DR shadow registers.
 315:../stdperiph/source/stm32f37x_rtc.c ****              The RTC_WaitForSynchro() function implements the above software sequence 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 7


 316:../stdperiph/source/stm32f37x_rtc.c ****             (RSF clear and RSF check).
 317:../stdperiph/source/stm32f37x_rtc.c **** 
 318:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
 319:../stdperiph/source/stm32f37x_rtc.c ****   * @{
 320:../stdperiph/source/stm32f37x_rtc.c ****   */
 321:../stdperiph/source/stm32f37x_rtc.c **** 
 322:../stdperiph/source/stm32f37x_rtc.c **** /**
 323:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 324:../stdperiph/source/stm32f37x_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 325:../stdperiph/source/stm32f37x_rtc.c ****   *         registers.       
 326:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
 327:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
 328:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 329:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 330:../stdperiph/source/stm32f37x_rtc.c ****   */
 331:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_DeInit(void)
 332:../stdperiph/source/stm32f37x_rtc.c **** {
 333:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 334:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t wutwfstatus = 0x00;
 335:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 336:../stdperiph/source/stm32f37x_rtc.c ****   
 337:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
 338:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
 339:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 340:../stdperiph/source/stm32f37x_rtc.c **** 
 341:../stdperiph/source/stm32f37x_rtc.c ****   /* Set Initialization mode */
 342:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 343:../stdperiph/source/stm32f37x_rtc.c ****   {
 344:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
 345:../stdperiph/source/stm32f37x_rtc.c ****   }  
 346:../stdperiph/source/stm32f37x_rtc.c ****   else
 347:../stdperiph/source/stm32f37x_rtc.c ****   {
 348:../stdperiph/source/stm32f37x_rtc.c ****     /* Reset TR, DR and CR registers */
 349:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 350:../stdperiph/source/stm32f37x_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 351:../stdperiph/source/stm32f37x_rtc.c ****     
 352:../stdperiph/source/stm32f37x_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 353:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 354:../stdperiph/source/stm32f37x_rtc.c ****   
 355:../stdperiph/source/stm32f37x_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 356:../stdperiph/source/stm32f37x_rtc.c ****     do
 357:../stdperiph/source/stm32f37x_rtc.c ****     {
 358:../stdperiph/source/stm32f37x_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 359:../stdperiph/source/stm32f37x_rtc.c ****       wutcounter++;  
 360:../stdperiph/source/stm32f37x_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 361:../stdperiph/source/stm32f37x_rtc.c ****     
 362:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 363:../stdperiph/source/stm32f37x_rtc.c ****     {
 364:../stdperiph/source/stm32f37x_rtc.c ****       status = ERROR;
 365:../stdperiph/source/stm32f37x_rtc.c ****     }
 366:../stdperiph/source/stm32f37x_rtc.c ****     else
 367:../stdperiph/source/stm32f37x_rtc.c ****     {
 368:../stdperiph/source/stm32f37x_rtc.c ****       /* Reset all RTC CR register bits */
 369:../stdperiph/source/stm32f37x_rtc.c ****       RTC->CR        &= (uint32_t)0x00000000;
 370:../stdperiph/source/stm32f37x_rtc.c ****       RTC->WUTR      = (uint32_t)0x0000FFFF;
 371:../stdperiph/source/stm32f37x_rtc.c ****       RTC->PRER      = (uint32_t)0x007F00FF;
 372:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMAR    = (uint32_t)0x00000000;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 8


 373:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMBR    = (uint32_t)0x00000000;
 374:../stdperiph/source/stm32f37x_rtc.c ****       RTC->SHIFTR    = (uint32_t)0x00000000;
 375:../stdperiph/source/stm32f37x_rtc.c ****       RTC->CALR       = (uint32_t)0x00000000;
 376:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMASSR  = (uint32_t)0x00000000;
 377:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMBSSR  = (uint32_t)0x00000000;
 378:../stdperiph/source/stm32f37x_rtc.c **** 
 379:../stdperiph/source/stm32f37x_rtc.c ****       /* Reset ISR register and exit initialization mode */
 380:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 381:../stdperiph/source/stm32f37x_rtc.c ****       
 382:../stdperiph/source/stm32f37x_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 383:../stdperiph/source/stm32f37x_rtc.c ****       RTC->TAFCR = 0x00000000;
 384:../stdperiph/source/stm32f37x_rtc.c ****       
 385:../stdperiph/source/stm32f37x_rtc.c ****       /* Wait till the RTC RSF flag is set */
 386:../stdperiph/source/stm32f37x_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 387:../stdperiph/source/stm32f37x_rtc.c ****       {
 388:../stdperiph/source/stm32f37x_rtc.c ****         status = ERROR;
 389:../stdperiph/source/stm32f37x_rtc.c ****       }
 390:../stdperiph/source/stm32f37x_rtc.c ****       else
 391:../stdperiph/source/stm32f37x_rtc.c ****       {
 392:../stdperiph/source/stm32f37x_rtc.c ****         status = SUCCESS;
 393:../stdperiph/source/stm32f37x_rtc.c ****       }
 394:../stdperiph/source/stm32f37x_rtc.c ****     }
 395:../stdperiph/source/stm32f37x_rtc.c ****   }
 396:../stdperiph/source/stm32f37x_rtc.c ****   
 397:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
 398:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;  
 399:../stdperiph/source/stm32f37x_rtc.c ****   
 400:../stdperiph/source/stm32f37x_rtc.c ****   return status;
 401:../stdperiph/source/stm32f37x_rtc.c **** }
 402:../stdperiph/source/stm32f37x_rtc.c **** 
 403:../stdperiph/source/stm32f37x_rtc.c **** /**
 404:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 405:../stdperiph/source/stm32f37x_rtc.c ****   *         in RTC_InitStruct.
 406:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 407:../stdperiph/source/stm32f37x_rtc.c ****   *         the configuration information for the RTC peripheral.
 408:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 409:../stdperiph/source/stm32f37x_rtc.c ****   *         initialization mode only.  
 410:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
 411:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 412:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 413:../stdperiph/source/stm32f37x_rtc.c ****   */
 414:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 415:../stdperiph/source/stm32f37x_rtc.c **** {
 416:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 417:../stdperiph/source/stm32f37x_rtc.c ****   
 418:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 419:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 420:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 421:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 422:../stdperiph/source/stm32f37x_rtc.c **** 
 423:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
 424:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
 425:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 426:../stdperiph/source/stm32f37x_rtc.c **** 
 427:../stdperiph/source/stm32f37x_rtc.c ****   /* Set Initialization mode */
 428:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 429:../stdperiph/source/stm32f37x_rtc.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 9


 430:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
 431:../stdperiph/source/stm32f37x_rtc.c ****   } 
 432:../stdperiph/source/stm32f37x_rtc.c ****   else
 433:../stdperiph/source/stm32f37x_rtc.c ****   {
 434:../stdperiph/source/stm32f37x_rtc.c ****     /* Clear RTC CR FMT Bit */
 435:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 436:../stdperiph/source/stm32f37x_rtc.c ****     /* Set RTC_CR register */
 437:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 438:../stdperiph/source/stm32f37x_rtc.c ****   
 439:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the RTC PRER */
 440:../stdperiph/source/stm32f37x_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 441:../stdperiph/source/stm32f37x_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 442:../stdperiph/source/stm32f37x_rtc.c **** 
 443:../stdperiph/source/stm32f37x_rtc.c ****     /* Exit Initialization mode */
 444:../stdperiph/source/stm32f37x_rtc.c ****     RTC_ExitInitMode();
 445:../stdperiph/source/stm32f37x_rtc.c **** 
 446:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;    
 447:../stdperiph/source/stm32f37x_rtc.c ****   }
 448:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
 449:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF; 
 450:../stdperiph/source/stm32f37x_rtc.c ****   
 451:../stdperiph/source/stm32f37x_rtc.c ****   return status;
 452:../stdperiph/source/stm32f37x_rtc.c **** }
 453:../stdperiph/source/stm32f37x_rtc.c **** 
 454:../stdperiph/source/stm32f37x_rtc.c **** /**
 455:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 456:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 457:../stdperiph/source/stm32f37x_rtc.c ****   *         initialized.
 458:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
 459:../stdperiph/source/stm32f37x_rtc.c ****   */
 460:../stdperiph/source/stm32f37x_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 461:../stdperiph/source/stm32f37x_rtc.c **** {
 462:../stdperiph/source/stm32f37x_rtc.c ****   /* Initialize the RTC_HourFormat member */
 463:../stdperiph/source/stm32f37x_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 464:../stdperiph/source/stm32f37x_rtc.c ****     
 465:../stdperiph/source/stm32f37x_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 466:../stdperiph/source/stm32f37x_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 467:../stdperiph/source/stm32f37x_rtc.c **** 
 468:../stdperiph/source/stm32f37x_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 469:../stdperiph/source/stm32f37x_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 470:../stdperiph/source/stm32f37x_rtc.c **** }
 471:../stdperiph/source/stm32f37x_rtc.c **** 
 472:../stdperiph/source/stm32f37x_rtc.c **** /**
 473:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 474:../stdperiph/source/stm32f37x_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 475:../stdperiph/source/stm32f37x_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 476:../stdperiph/source/stm32f37x_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 477:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 478:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the write protection.
 479:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 480:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
 481:../stdperiph/source/stm32f37x_rtc.c ****   */
 482:../stdperiph/source/stm32f37x_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 483:../stdperiph/source/stm32f37x_rtc.c **** {
 484:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 485:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:../stdperiph/source/stm32f37x_rtc.c ****     
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 10


 487:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
 488:../stdperiph/source/stm32f37x_rtc.c ****   {
 489:../stdperiph/source/stm32f37x_rtc.c ****     /* Enable the write protection for RTC registers */
 490:../stdperiph/source/stm32f37x_rtc.c ****     RTC->WPR = 0xFF;   
 491:../stdperiph/source/stm32f37x_rtc.c ****   }
 492:../stdperiph/source/stm32f37x_rtc.c ****   else
 493:../stdperiph/source/stm32f37x_rtc.c ****   {
 494:../stdperiph/source/stm32f37x_rtc.c ****     /* Disable the write protection for RTC registers */
 495:../stdperiph/source/stm32f37x_rtc.c ****     RTC->WPR = 0xCA;
 496:../stdperiph/source/stm32f37x_rtc.c ****     RTC->WPR = 0x53;    
 497:../stdperiph/source/stm32f37x_rtc.c ****   }
 498:../stdperiph/source/stm32f37x_rtc.c **** }
 499:../stdperiph/source/stm32f37x_rtc.c **** 
 500:../stdperiph/source/stm32f37x_rtc.c **** /**
 501:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 502:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 503:../stdperiph/source/stm32f37x_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 504:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
 505:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
 506:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 507:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 508:../stdperiph/source/stm32f37x_rtc.c ****   */
 509:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 510:../stdperiph/source/stm32f37x_rtc.c **** {
 511:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t initcounter = 0x00;
 512:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 513:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t initstatus = 0x00;
 514:../stdperiph/source/stm32f37x_rtc.c ****      
 515:../stdperiph/source/stm32f37x_rtc.c ****   /* Check if the Initialization mode is set */
 516:../stdperiph/source/stm32f37x_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 517:../stdperiph/source/stm32f37x_rtc.c ****   {
 518:../stdperiph/source/stm32f37x_rtc.c ****     /* Set the Initialization mode */
 519:../stdperiph/source/stm32f37x_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 520:../stdperiph/source/stm32f37x_rtc.c ****     
 521:../stdperiph/source/stm32f37x_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 522:../stdperiph/source/stm32f37x_rtc.c ****     do
 523:../stdperiph/source/stm32f37x_rtc.c ****     {
 524:../stdperiph/source/stm32f37x_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 525:../stdperiph/source/stm32f37x_rtc.c ****       initcounter++;  
 526:../stdperiph/source/stm32f37x_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 527:../stdperiph/source/stm32f37x_rtc.c ****     
 528:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 529:../stdperiph/source/stm32f37x_rtc.c ****     {
 530:../stdperiph/source/stm32f37x_rtc.c ****       status = SUCCESS;
 531:../stdperiph/source/stm32f37x_rtc.c ****     }
 532:../stdperiph/source/stm32f37x_rtc.c ****     else
 533:../stdperiph/source/stm32f37x_rtc.c ****     {
 534:../stdperiph/source/stm32f37x_rtc.c ****       status = ERROR;
 535:../stdperiph/source/stm32f37x_rtc.c ****     }        
 536:../stdperiph/source/stm32f37x_rtc.c ****   }
 537:../stdperiph/source/stm32f37x_rtc.c ****   else
 538:../stdperiph/source/stm32f37x_rtc.c ****   {
 539:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;  
 540:../stdperiph/source/stm32f37x_rtc.c ****   } 
 541:../stdperiph/source/stm32f37x_rtc.c ****     
 542:../stdperiph/source/stm32f37x_rtc.c ****   return (status);  
 543:../stdperiph/source/stm32f37x_rtc.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 11


 544:../stdperiph/source/stm32f37x_rtc.c **** 
 545:../stdperiph/source/stm32f37x_rtc.c **** /**
 546:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 547:../stdperiph/source/stm32f37x_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 548:../stdperiph/source/stm32f37x_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 549:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 550:../stdperiph/source/stm32f37x_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 551:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
 552:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
 553:../stdperiph/source/stm32f37x_rtc.c ****   */
 554:../stdperiph/source/stm32f37x_rtc.c **** void RTC_ExitInitMode(void)
 555:../stdperiph/source/stm32f37x_rtc.c **** {
 556:../stdperiph/source/stm32f37x_rtc.c ****   /* Exit Initialization mode */
 557:../stdperiph/source/stm32f37x_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 558:../stdperiph/source/stm32f37x_rtc.c **** }
 559:../stdperiph/source/stm32f37x_rtc.c **** 
 560:../stdperiph/source/stm32f37x_rtc.c **** /**
 561:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 562:../stdperiph/source/stm32f37x_rtc.c ****   *         synchronized with RTC APB clock.
 563:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 564:../stdperiph/source/stm32f37x_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 565:../stdperiph/source/stm32f37x_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 566:../stdperiph/source/stm32f37x_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 567:../stdperiph/source/stm32f37x_rtc.c ****   *         the software must first clear the RSF flag. 
 568:../stdperiph/source/stm32f37x_rtc.c ****   *         The software must then wait until it is set again before reading 
 569:../stdperiph/source/stm32f37x_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 570:../stdperiph/source/stm32f37x_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 571:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
 572:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
 573:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 574:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 575:../stdperiph/source/stm32f37x_rtc.c ****   */
 576:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 577:../stdperiph/source/stm32f37x_rtc.c **** {
 578:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t synchrocounter = 0;
 579:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 580:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t synchrostatus = 0x00;
 581:../stdperiph/source/stm32f37x_rtc.c **** 
 582:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
 583:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
 584:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 585:../stdperiph/source/stm32f37x_rtc.c ****     
 586:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear RSF flag */
 587:../stdperiph/source/stm32f37x_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 588:../stdperiph/source/stm32f37x_rtc.c ****     
 589:../stdperiph/source/stm32f37x_rtc.c ****   /* Wait the registers to be synchronised */
 590:../stdperiph/source/stm32f37x_rtc.c ****   do
 591:../stdperiph/source/stm32f37x_rtc.c ****   {
 592:../stdperiph/source/stm32f37x_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 593:../stdperiph/source/stm32f37x_rtc.c ****     synchrocounter++;  
 594:../stdperiph/source/stm32f37x_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 595:../stdperiph/source/stm32f37x_rtc.c ****     
 596:../stdperiph/source/stm32f37x_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 597:../stdperiph/source/stm32f37x_rtc.c ****   {
 598:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;
 599:../stdperiph/source/stm32f37x_rtc.c ****   }
 600:../stdperiph/source/stm32f37x_rtc.c ****   else
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 12


 601:../stdperiph/source/stm32f37x_rtc.c ****   {
 602:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
 603:../stdperiph/source/stm32f37x_rtc.c ****   }
 604:../stdperiph/source/stm32f37x_rtc.c **** 
 605:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
 606:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
 607:../stdperiph/source/stm32f37x_rtc.c ****     
 608:../stdperiph/source/stm32f37x_rtc.c ****   return (status);
 609:../stdperiph/source/stm32f37x_rtc.c **** }
 610:../stdperiph/source/stm32f37x_rtc.c **** 
 611:../stdperiph/source/stm32f37x_rtc.c **** /**
 612:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 613:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 614:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 615:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
 616:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 617:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 618:../stdperiph/source/stm32f37x_rtc.c ****   */
 619:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 620:../stdperiph/source/stm32f37x_rtc.c **** {
 621:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 622:../stdperiph/source/stm32f37x_rtc.c **** 
 623:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 624:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 625:../stdperiph/source/stm32f37x_rtc.c **** 
 626:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
 627:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
 628:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 629:../stdperiph/source/stm32f37x_rtc.c **** 
 630:../stdperiph/source/stm32f37x_rtc.c ****   /* Set Initialization mode */
 631:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 632:../stdperiph/source/stm32f37x_rtc.c ****   {
 633:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
 634:../stdperiph/source/stm32f37x_rtc.c ****   }
 635:../stdperiph/source/stm32f37x_rtc.c ****   else
 636:../stdperiph/source/stm32f37x_rtc.c ****   {
 637:../stdperiph/source/stm32f37x_rtc.c ****     if (NewState != DISABLE)
 638:../stdperiph/source/stm32f37x_rtc.c ****     {
 639:../stdperiph/source/stm32f37x_rtc.c ****       /* Enable the RTC reference clock detection */
 640:../stdperiph/source/stm32f37x_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 641:../stdperiph/source/stm32f37x_rtc.c ****     }
 642:../stdperiph/source/stm32f37x_rtc.c ****     else
 643:../stdperiph/source/stm32f37x_rtc.c ****     {
 644:../stdperiph/source/stm32f37x_rtc.c ****       /* Disable the RTC reference clock detection */
 645:../stdperiph/source/stm32f37x_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 646:../stdperiph/source/stm32f37x_rtc.c ****     }
 647:../stdperiph/source/stm32f37x_rtc.c ****     /* Exit Initialization mode */
 648:../stdperiph/source/stm32f37x_rtc.c ****     RTC_ExitInitMode();
 649:../stdperiph/source/stm32f37x_rtc.c **** 
 650:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;
 651:../stdperiph/source/stm32f37x_rtc.c ****   }
 652:../stdperiph/source/stm32f37x_rtc.c **** 
 653:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
 654:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
 655:../stdperiph/source/stm32f37x_rtc.c **** 
 656:../stdperiph/source/stm32f37x_rtc.c ****   return status;
 657:../stdperiph/source/stm32f37x_rtc.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 13


 658:../stdperiph/source/stm32f37x_rtc.c **** 
 659:../stdperiph/source/stm32f37x_rtc.c **** /**
 660:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 661:../stdperiph/source/stm32f37x_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 662:../stdperiph/source/stm32f37x_rtc.c ****   *         directly from the Calendar counter.
 663:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 664:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 665:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
 666:../stdperiph/source/stm32f37x_rtc.c **** */
 667:../stdperiph/source/stm32f37x_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 668:../stdperiph/source/stm32f37x_rtc.c **** {
 669:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 670:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 671:../stdperiph/source/stm32f37x_rtc.c **** 
 672:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
 673:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
 674:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 675:../stdperiph/source/stm32f37x_rtc.c ****   
 676:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
 677:../stdperiph/source/stm32f37x_rtc.c ****   {
 678:../stdperiph/source/stm32f37x_rtc.c ****     /* Set the BYPSHAD bit */
 679:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 680:../stdperiph/source/stm32f37x_rtc.c ****   }
 681:../stdperiph/source/stm32f37x_rtc.c ****   else
 682:../stdperiph/source/stm32f37x_rtc.c ****   {
 683:../stdperiph/source/stm32f37x_rtc.c ****     /* Reset the BYPSHAD bit */
 684:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 685:../stdperiph/source/stm32f37x_rtc.c ****   }
 686:../stdperiph/source/stm32f37x_rtc.c **** 
 687:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
 688:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
 689:../stdperiph/source/stm32f37x_rtc.c **** }
 690:../stdperiph/source/stm32f37x_rtc.c **** 
 691:../stdperiph/source/stm32f37x_rtc.c **** /**
 692:../stdperiph/source/stm32f37x_rtc.c ****   * @}
 693:../stdperiph/source/stm32f37x_rtc.c ****   */
 694:../stdperiph/source/stm32f37x_rtc.c **** 
 695:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 696:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Time and Date configuration functions
 697:../stdperiph/source/stm32f37x_rtc.c ****  *
 698:../stdperiph/source/stm32f37x_rtc.c **** @verbatim
 699:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
 700:../stdperiph/source/stm32f37x_rtc.c ****             ##### Time and Date configuration functions #####
 701:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
 702:../stdperiph/source/stm32f37x_rtc.c ****     [..]  This section provide functions allowing to program and read the RTC
 703:../stdperiph/source/stm32f37x_rtc.c ****           Calendar (Time and Date).
 704:../stdperiph/source/stm32f37x_rtc.c **** 
 705:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
 706:../stdperiph/source/stm32f37x_rtc.c ****   * @{
 707:../stdperiph/source/stm32f37x_rtc.c ****   */
 708:../stdperiph/source/stm32f37x_rtc.c **** 
 709:../stdperiph/source/stm32f37x_rtc.c **** /**
 710:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Set the RTC current time.
 711:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 712:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be  one of the following values:
 713:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 714:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 14


 715:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 716:../stdperiph/source/stm32f37x_rtc.c ****   *                        the time configuration information for the RTC.
 717:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
 718:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 719:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC Time register is not configured
 720:../stdperiph/source/stm32f37x_rtc.c ****   */
 721:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 722:../stdperiph/source/stm32f37x_rtc.c **** {
 723:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 724:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 725:../stdperiph/source/stm32f37x_rtc.c ****     
 726:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 727:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 728:../stdperiph/source/stm32f37x_rtc.c ****   
 729:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 730:../stdperiph/source/stm32f37x_rtc.c ****   {
 731:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 732:../stdperiph/source/stm32f37x_rtc.c ****     {
 733:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 734:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 735:../stdperiph/source/stm32f37x_rtc.c ****     } 
 736:../stdperiph/source/stm32f37x_rtc.c ****     else
 737:../stdperiph/source/stm32f37x_rtc.c ****     {
 738:../stdperiph/source/stm32f37x_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 739:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 740:../stdperiph/source/stm32f37x_rtc.c ****     }
 741:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 742:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 743:../stdperiph/source/stm32f37x_rtc.c ****   }
 744:../stdperiph/source/stm32f37x_rtc.c ****   else
 745:../stdperiph/source/stm32f37x_rtc.c ****   {
 746:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 747:../stdperiph/source/stm32f37x_rtc.c ****     {
 748:../stdperiph/source/stm32f37x_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 749:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 750:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 751:../stdperiph/source/stm32f37x_rtc.c ****     } 
 752:../stdperiph/source/stm32f37x_rtc.c ****     else
 753:../stdperiph/source/stm32f37x_rtc.c ****     {
 754:../stdperiph/source/stm32f37x_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 755:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 756:../stdperiph/source/stm32f37x_rtc.c ****     }
 757:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 758:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 759:../stdperiph/source/stm32f37x_rtc.c ****   }
 760:../stdperiph/source/stm32f37x_rtc.c ****   
 761:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the input parameters format */
 762:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 763:../stdperiph/source/stm32f37x_rtc.c ****   {
 764:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 765:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 766:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 767:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 768:../stdperiph/source/stm32f37x_rtc.c ****   }  
 769:../stdperiph/source/stm32f37x_rtc.c ****   else
 770:../stdperiph/source/stm32f37x_rtc.c ****   {
 771:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 15


 772:../stdperiph/source/stm32f37x_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 773:../stdperiph/source/stm32f37x_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 774:../stdperiph/source/stm32f37x_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 775:../stdperiph/source/stm32f37x_rtc.c ****   }  
 776:../stdperiph/source/stm32f37x_rtc.c **** 
 777:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
 778:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
 779:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 780:../stdperiph/source/stm32f37x_rtc.c **** 
 781:../stdperiph/source/stm32f37x_rtc.c ****   /* Set Initialization mode */
 782:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 783:../stdperiph/source/stm32f37x_rtc.c ****   {
 784:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
 785:../stdperiph/source/stm32f37x_rtc.c ****   } 
 786:../stdperiph/source/stm32f37x_rtc.c ****   else
 787:../stdperiph/source/stm32f37x_rtc.c ****   {
 788:../stdperiph/source/stm32f37x_rtc.c ****     /* Set the RTC_TR register */
 789:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 790:../stdperiph/source/stm32f37x_rtc.c **** 
 791:../stdperiph/source/stm32f37x_rtc.c ****     /* Exit Initialization mode */
 792:../stdperiph/source/stm32f37x_rtc.c ****     RTC_ExitInitMode(); 
 793:../stdperiph/source/stm32f37x_rtc.c **** 
 794:../stdperiph/source/stm32f37x_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 795:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 796:../stdperiph/source/stm32f37x_rtc.c ****     {
 797:../stdperiph/source/stm32f37x_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 798:../stdperiph/source/stm32f37x_rtc.c ****       {
 799:../stdperiph/source/stm32f37x_rtc.c ****         status = ERROR;
 800:../stdperiph/source/stm32f37x_rtc.c ****       }
 801:../stdperiph/source/stm32f37x_rtc.c ****       else
 802:../stdperiph/source/stm32f37x_rtc.c ****       {
 803:../stdperiph/source/stm32f37x_rtc.c ****         status = SUCCESS;
 804:../stdperiph/source/stm32f37x_rtc.c ****       }
 805:../stdperiph/source/stm32f37x_rtc.c ****     }
 806:../stdperiph/source/stm32f37x_rtc.c ****     else
 807:../stdperiph/source/stm32f37x_rtc.c ****     {
 808:../stdperiph/source/stm32f37x_rtc.c ****       status = SUCCESS;
 809:../stdperiph/source/stm32f37x_rtc.c ****     }
 810:../stdperiph/source/stm32f37x_rtc.c ****   
 811:../stdperiph/source/stm32f37x_rtc.c ****   }
 812:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
 813:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
 814:../stdperiph/source/stm32f37x_rtc.c ****     
 815:../stdperiph/source/stm32f37x_rtc.c ****   return status;
 816:../stdperiph/source/stm32f37x_rtc.c **** }
 817:../stdperiph/source/stm32f37x_rtc.c **** 
 818:../stdperiph/source/stm32f37x_rtc.c **** /**
 819:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 820:../stdperiph/source/stm32f37x_rtc.c ****   *         (Time = 00h:00min:00sec).
 821:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 822:../stdperiph/source/stm32f37x_rtc.c ****   *         initialized.
 823:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
 824:../stdperiph/source/stm32f37x_rtc.c ****   */
 825:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 826:../stdperiph/source/stm32f37x_rtc.c **** {
 827:../stdperiph/source/stm32f37x_rtc.c ****   /* Time = 00h:00min:00sec */
 828:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 16


 829:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 830:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 831:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 832:../stdperiph/source/stm32f37x_rtc.c **** }
 833:../stdperiph/source/stm32f37x_rtc.c **** 
 834:../stdperiph/source/stm32f37x_rtc.c **** /**
 835:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Get the RTC current Time.
 836:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 837:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be  one of the following values:
 838:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 839:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 840:../stdperiph/source/stm32f37x_rtc.c ****   * @param RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 841:../stdperiph/source/stm32f37x_rtc.c ****   *                        contain the returned current time configuration.     
 842:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
 843:../stdperiph/source/stm32f37x_rtc.c ****   */
 844:../stdperiph/source/stm32f37x_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 845:../stdperiph/source/stm32f37x_rtc.c **** {
 846:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 847:../stdperiph/source/stm32f37x_rtc.c **** 
 848:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 849:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 850:../stdperiph/source/stm32f37x_rtc.c **** 
 851:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the RTC_TR register */
 852:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 853:../stdperiph/source/stm32f37x_rtc.c ****   
 854:../stdperiph/source/stm32f37x_rtc.c ****   /* Fill the structure fields with the read parameters */
 855:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 856:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 857:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 858:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 859:../stdperiph/source/stm32f37x_rtc.c **** 
 860:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the input parameters format */
 861:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 862:../stdperiph/source/stm32f37x_rtc.c ****   {
 863:../stdperiph/source/stm32f37x_rtc.c ****     /* Convert the structure parameters to Binary format */
 864:../stdperiph/source/stm32f37x_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 865:../stdperiph/source/stm32f37x_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 866:../stdperiph/source/stm32f37x_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 867:../stdperiph/source/stm32f37x_rtc.c ****   }
 868:../stdperiph/source/stm32f37x_rtc.c **** }
 869:../stdperiph/source/stm32f37x_rtc.c **** 
 870:../stdperiph/source/stm32f37x_rtc.c **** /**
 871:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 872:../stdperiph/source/stm32f37x_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 873:../stdperiph/source/stm32f37x_rtc.c ****   *         SSR register.
 874:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
 875:../stdperiph/source/stm32f37x_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 876:../stdperiph/source/stm32f37x_rtc.c ****   */
 877:../stdperiph/source/stm32f37x_rtc.c **** uint32_t RTC_GetSubSecond(void)
 878:../stdperiph/source/stm32f37x_rtc.c **** {
 879:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 880:../stdperiph/source/stm32f37x_rtc.c ****   
 881:../stdperiph/source/stm32f37x_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 882:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 883:../stdperiph/source/stm32f37x_rtc.c ****   
 884:../stdperiph/source/stm32f37x_rtc.c ****   /* Read DR register to unfroze calendar registers */
 885:../stdperiph/source/stm32f37x_rtc.c ****   (void) (RTC->DR);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 17


 886:../stdperiph/source/stm32f37x_rtc.c ****   
 887:../stdperiph/source/stm32f37x_rtc.c ****   return (tmpreg);
 888:../stdperiph/source/stm32f37x_rtc.c **** }
 889:../stdperiph/source/stm32f37x_rtc.c **** 
 890:../stdperiph/source/stm32f37x_rtc.c **** /**
 891:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Set the RTC current date.
 892:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 893:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be  one of the following values:
 894:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 895:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 896:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 897:../stdperiph/source/stm32f37x_rtc.c ****   *                         the date configuration information for the RTC.
 898:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
 899:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 900:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC Date register is not configured
 901:../stdperiph/source/stm32f37x_rtc.c ****   */
 902:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 903:../stdperiph/source/stm32f37x_rtc.c **** {
 904:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 905:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 906:../stdperiph/source/stm32f37x_rtc.c ****   
 907:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 908:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 909:../stdperiph/source/stm32f37x_rtc.c **** 
 910:../stdperiph/source/stm32f37x_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 911:../stdperiph/source/stm32f37x_rtc.c ****   {
 912:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 913:../stdperiph/source/stm32f37x_rtc.c ****   }  
 914:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 915:../stdperiph/source/stm32f37x_rtc.c ****   {
 916:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 917:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 918:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 919:../stdperiph/source/stm32f37x_rtc.c ****   }
 920:../stdperiph/source/stm32f37x_rtc.c ****   else
 921:../stdperiph/source/stm32f37x_rtc.c ****   {
 922:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 923:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 924:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 925:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 926:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 927:../stdperiph/source/stm32f37x_rtc.c ****   }
 928:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 929:../stdperiph/source/stm32f37x_rtc.c **** 
 930:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the input parameters format */
 931:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 932:../stdperiph/source/stm32f37x_rtc.c ****   {
 933:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 934:../stdperiph/source/stm32f37x_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 935:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 936:../stdperiph/source/stm32f37x_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 937:../stdperiph/source/stm32f37x_rtc.c ****   }  
 938:../stdperiph/source/stm32f37x_rtc.c ****   else
 939:../stdperiph/source/stm32f37x_rtc.c ****   {
 940:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 941:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 942:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 18


 943:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 944:../stdperiph/source/stm32f37x_rtc.c ****   }
 945:../stdperiph/source/stm32f37x_rtc.c **** 
 946:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
 947:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
 948:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 949:../stdperiph/source/stm32f37x_rtc.c **** 
 950:../stdperiph/source/stm32f37x_rtc.c ****   /* Set Initialization mode */
 951:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 952:../stdperiph/source/stm32f37x_rtc.c ****   {
 953:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
 954:../stdperiph/source/stm32f37x_rtc.c ****   } 
 955:../stdperiph/source/stm32f37x_rtc.c ****   else
 956:../stdperiph/source/stm32f37x_rtc.c ****   {
 957:../stdperiph/source/stm32f37x_rtc.c ****     /* Set the RTC_DR register */
 958:../stdperiph/source/stm32f37x_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 959:../stdperiph/source/stm32f37x_rtc.c **** 
 960:../stdperiph/source/stm32f37x_rtc.c ****     /* Exit Initialization mode */
 961:../stdperiph/source/stm32f37x_rtc.c ****     RTC_ExitInitMode(); 
 962:../stdperiph/source/stm32f37x_rtc.c **** 
 963:../stdperiph/source/stm32f37x_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 964:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 965:../stdperiph/source/stm32f37x_rtc.c ****     {
 966:../stdperiph/source/stm32f37x_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 967:../stdperiph/source/stm32f37x_rtc.c ****       {
 968:../stdperiph/source/stm32f37x_rtc.c ****         status = ERROR;
 969:../stdperiph/source/stm32f37x_rtc.c ****       }
 970:../stdperiph/source/stm32f37x_rtc.c ****       else
 971:../stdperiph/source/stm32f37x_rtc.c ****       {
 972:../stdperiph/source/stm32f37x_rtc.c ****         status = SUCCESS;
 973:../stdperiph/source/stm32f37x_rtc.c ****       }
 974:../stdperiph/source/stm32f37x_rtc.c ****     }
 975:../stdperiph/source/stm32f37x_rtc.c ****     else
 976:../stdperiph/source/stm32f37x_rtc.c ****     {
 977:../stdperiph/source/stm32f37x_rtc.c ****       status = SUCCESS;
 978:../stdperiph/source/stm32f37x_rtc.c ****     }
 979:../stdperiph/source/stm32f37x_rtc.c ****   }
 980:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
 981:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
 982:../stdperiph/source/stm32f37x_rtc.c ****   
 983:../stdperiph/source/stm32f37x_rtc.c ****   return status;
 984:../stdperiph/source/stm32f37x_rtc.c **** }
 985:../stdperiph/source/stm32f37x_rtc.c **** 
 986:../stdperiph/source/stm32f37x_rtc.c **** /**
 987:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
 988:../stdperiph/source/stm32f37x_rtc.c ****   *         (Monday, January 01 xx00).
 989:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
 990:../stdperiph/source/stm32f37x_rtc.c ****   *         initialized.
 991:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
 992:../stdperiph/source/stm32f37x_rtc.c ****   */
 993:../stdperiph/source/stm32f37x_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
 994:../stdperiph/source/stm32f37x_rtc.c **** {
 995:../stdperiph/source/stm32f37x_rtc.c ****   /* Monday, January 01 xx00 */
 996:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 997:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 998:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 999:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 19


1000:../stdperiph/source/stm32f37x_rtc.c **** }
1001:../stdperiph/source/stm32f37x_rtc.c **** 
1002:../stdperiph/source/stm32f37x_rtc.c **** /**
1003:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Get the RTC current date.
1004:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1005:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1006:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1007:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1008:../stdperiph/source/stm32f37x_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1009:../stdperiph/source/stm32f37x_rtc.c ****   *                        contain the returned current date configuration.
1010:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1011:../stdperiph/source/stm32f37x_rtc.c ****   */
1012:../stdperiph/source/stm32f37x_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1013:../stdperiph/source/stm32f37x_rtc.c **** {
1014:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
1015:../stdperiph/source/stm32f37x_rtc.c **** 
1016:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1017:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1018:../stdperiph/source/stm32f37x_rtc.c ****   
1019:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the RTC_TR register */
1020:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1021:../stdperiph/source/stm32f37x_rtc.c **** 
1022:../stdperiph/source/stm32f37x_rtc.c ****   /* Fill the structure fields with the read parameters */
1023:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1024:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1025:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1026:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
1027:../stdperiph/source/stm32f37x_rtc.c **** 
1028:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the input parameters format */
1029:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1030:../stdperiph/source/stm32f37x_rtc.c ****   {
1031:../stdperiph/source/stm32f37x_rtc.c ****     /* Convert the structure parameters to Binary format */
1032:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1033:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1034:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1035:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
1036:../stdperiph/source/stm32f37x_rtc.c ****   }
1037:../stdperiph/source/stm32f37x_rtc.c **** }
1038:../stdperiph/source/stm32f37x_rtc.c **** 
1039:../stdperiph/source/stm32f37x_rtc.c **** /**
1040:../stdperiph/source/stm32f37x_rtc.c ****   * @}
1041:../stdperiph/source/stm32f37x_rtc.c ****   */
1042:../stdperiph/source/stm32f37x_rtc.c **** 
1043:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1044:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1045:../stdperiph/source/stm32f37x_rtc.c ****  *
1046:../stdperiph/source/stm32f37x_rtc.c **** @verbatim
1047:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1048:../stdperiph/source/stm32f37x_rtc.c ****          ##### Alarms (Alarm A and Alarm B) configuration functions #####
1049:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1050:../stdperiph/source/stm32f37x_rtc.c ****     [..] This section provide functions allowing to program and read the RTC 
1051:../stdperiph/source/stm32f37x_rtc.c ****          Alarms.
1052:../stdperiph/source/stm32f37x_rtc.c **** 
1053:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
1054:../stdperiph/source/stm32f37x_rtc.c ****   * @{
1055:../stdperiph/source/stm32f37x_rtc.c ****   */
1056:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 20


1057:../stdperiph/source/stm32f37x_rtc.c **** /**
1058:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Set the specified RTC Alarm.
1059:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1060:../stdperiph/source/stm32f37x_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1061:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1062:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1063:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1064:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1065:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1066:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1067:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1068:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1069:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1070:../stdperiph/source/stm32f37x_rtc.c ****   *                          contains the alarm configuration parameters.
1071:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1072:../stdperiph/source/stm32f37x_rtc.c ****   */
1073:../stdperiph/source/stm32f37x_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1074:../stdperiph/source/stm32f37x_rtc.c **** {
1075:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
1076:../stdperiph/source/stm32f37x_rtc.c ****   
1077:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1078:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1079:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1080:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1081:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1082:../stdperiph/source/stm32f37x_rtc.c **** 
1083:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1084:../stdperiph/source/stm32f37x_rtc.c ****   {
1085:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1086:../stdperiph/source/stm32f37x_rtc.c ****     {
1087:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1088:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1089:../stdperiph/source/stm32f37x_rtc.c ****     } 
1090:../stdperiph/source/stm32f37x_rtc.c ****     else
1091:../stdperiph/source/stm32f37x_rtc.c ****     {
1092:../stdperiph/source/stm32f37x_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1093:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1094:../stdperiph/source/stm32f37x_rtc.c ****     }
1095:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1096:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1097:../stdperiph/source/stm32f37x_rtc.c ****     
1098:../stdperiph/source/stm32f37x_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1099:../stdperiph/source/stm32f37x_rtc.c ****     {
1100:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1101:../stdperiph/source/stm32f37x_rtc.c ****     }
1102:../stdperiph/source/stm32f37x_rtc.c ****     else
1103:../stdperiph/source/stm32f37x_rtc.c ****     {
1104:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1105:../stdperiph/source/stm32f37x_rtc.c ****     }
1106:../stdperiph/source/stm32f37x_rtc.c ****   }
1107:../stdperiph/source/stm32f37x_rtc.c ****   else
1108:../stdperiph/source/stm32f37x_rtc.c ****   {
1109:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1110:../stdperiph/source/stm32f37x_rtc.c ****     {
1111:../stdperiph/source/stm32f37x_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1112:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1113:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 21


1114:../stdperiph/source/stm32f37x_rtc.c ****     } 
1115:../stdperiph/source/stm32f37x_rtc.c ****     else
1116:../stdperiph/source/stm32f37x_rtc.c ****     {
1117:../stdperiph/source/stm32f37x_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1118:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1119:../stdperiph/source/stm32f37x_rtc.c ****     }
1120:../stdperiph/source/stm32f37x_rtc.c ****     
1121:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1122:../stdperiph/source/stm32f37x_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1123:../stdperiph/source/stm32f37x_rtc.c ****     
1124:../stdperiph/source/stm32f37x_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1125:../stdperiph/source/stm32f37x_rtc.c ****     {
1126:../stdperiph/source/stm32f37x_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1127:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1128:../stdperiph/source/stm32f37x_rtc.c ****     }
1129:../stdperiph/source/stm32f37x_rtc.c ****     else
1130:../stdperiph/source/stm32f37x_rtc.c ****     {
1131:../stdperiph/source/stm32f37x_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1132:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1133:../stdperiph/source/stm32f37x_rtc.c ****     }    
1134:../stdperiph/source/stm32f37x_rtc.c ****   }
1135:../stdperiph/source/stm32f37x_rtc.c **** 
1136:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the input parameters format */
1137:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1138:../stdperiph/source/stm32f37x_rtc.c ****   {
1139:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1140:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1141:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1142:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1143:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1144:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1145:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1146:../stdperiph/source/stm32f37x_rtc.c ****   }  
1147:../stdperiph/source/stm32f37x_rtc.c ****   else
1148:../stdperiph/source/stm32f37x_rtc.c ****   {
1149:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1150:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1151:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1152:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1153:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1154:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1155:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1156:../stdperiph/source/stm32f37x_rtc.c ****   } 
1157:../stdperiph/source/stm32f37x_rtc.c **** 
1158:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1159:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1160:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1161:../stdperiph/source/stm32f37x_rtc.c **** 
1162:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the Alarm register */
1163:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1164:../stdperiph/source/stm32f37x_rtc.c ****   {
1165:../stdperiph/source/stm32f37x_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1166:../stdperiph/source/stm32f37x_rtc.c ****   }
1167:../stdperiph/source/stm32f37x_rtc.c ****   else
1168:../stdperiph/source/stm32f37x_rtc.c ****   {
1169:../stdperiph/source/stm32f37x_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1170:../stdperiph/source/stm32f37x_rtc.c ****   }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 22


1171:../stdperiph/source/stm32f37x_rtc.c **** 
1172:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1173:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;   
1174:../stdperiph/source/stm32f37x_rtc.c **** }
1175:../stdperiph/source/stm32f37x_rtc.c **** 
1176:../stdperiph/source/stm32f37x_rtc.c **** /**
1177:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1178:../stdperiph/source/stm32f37x_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1179:../stdperiph/source/stm32f37x_rtc.c ****   *         all fields are masked).
1180:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1181:../stdperiph/source/stm32f37x_rtc.c ****   *         will be initialized.
1182:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1183:../stdperiph/source/stm32f37x_rtc.c ****   */
1184:../stdperiph/source/stm32f37x_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1185:../stdperiph/source/stm32f37x_rtc.c **** {
1186:../stdperiph/source/stm32f37x_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1187:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1188:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1189:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1190:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1191:../stdperiph/source/stm32f37x_rtc.c **** 
1192:../stdperiph/source/stm32f37x_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1193:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1194:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1195:../stdperiph/source/stm32f37x_rtc.c **** 
1196:../stdperiph/source/stm32f37x_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1197:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1198:../stdperiph/source/stm32f37x_rtc.c **** }
1199:../stdperiph/source/stm32f37x_rtc.c **** 
1200:../stdperiph/source/stm32f37x_rtc.c **** /**
1201:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1202:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1203:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1204:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1205:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1206:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1207:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1208:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1209:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1210:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1211:../stdperiph/source/stm32f37x_rtc.c ****   *                          contains the output alarm configuration values.     
1212:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1213:../stdperiph/source/stm32f37x_rtc.c ****   */
1214:../stdperiph/source/stm32f37x_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1215:../stdperiph/source/stm32f37x_rtc.c **** {
1216:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
1217:../stdperiph/source/stm32f37x_rtc.c **** 
1218:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1219:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1220:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1221:../stdperiph/source/stm32f37x_rtc.c **** 
1222:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the RTC_ALRMxR register */
1223:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1224:../stdperiph/source/stm32f37x_rtc.c ****   {
1225:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1226:../stdperiph/source/stm32f37x_rtc.c ****   }
1227:../stdperiph/source/stm32f37x_rtc.c ****   else
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 23


1228:../stdperiph/source/stm32f37x_rtc.c ****   {
1229:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1230:../stdperiph/source/stm32f37x_rtc.c ****   }
1231:../stdperiph/source/stm32f37x_rtc.c **** 
1232:../stdperiph/source/stm32f37x_rtc.c ****   /* Fill the structure with the read parameters */
1233:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1234:../stdperiph/source/stm32f37x_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1235:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1236:../stdperiph/source/stm32f37x_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1237:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1238:../stdperiph/source/stm32f37x_rtc.c ****                                                      RTC_ALRMAR_SU));
1239:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1240:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1241:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1242:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1243:../stdperiph/source/stm32f37x_rtc.c **** 
1244:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1245:../stdperiph/source/stm32f37x_rtc.c ****   {
1246:../stdperiph/source/stm32f37x_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1247:../stdperiph/source/stm32f37x_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1248:../stdperiph/source/stm32f37x_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1249:../stdperiph/source/stm32f37x_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1250:../stdperiph/source/stm32f37x_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1251:../stdperiph/source/stm32f37x_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1252:../stdperiph/source/stm32f37x_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1253:../stdperiph/source/stm32f37x_rtc.c ****   }  
1254:../stdperiph/source/stm32f37x_rtc.c **** }
1255:../stdperiph/source/stm32f37x_rtc.c **** 
1256:../stdperiph/source/stm32f37x_rtc.c **** /**
1257:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1258:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1259:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be any combination of the following values:
1260:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1261:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1262:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the specified alarm.
1263:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1264:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
1265:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1266:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1267:../stdperiph/source/stm32f37x_rtc.c ****   */
1268:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1269:../stdperiph/source/stm32f37x_rtc.c **** {
1270:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1271:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t alarmstatus = 0x00;
1272:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
1273:../stdperiph/source/stm32f37x_rtc.c ****     
1274:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1275:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1276:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1277:../stdperiph/source/stm32f37x_rtc.c **** 
1278:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1279:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1280:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1281:../stdperiph/source/stm32f37x_rtc.c **** 
1282:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the Alarm state */
1283:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
1284:../stdperiph/source/stm32f37x_rtc.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 24


1285:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1286:../stdperiph/source/stm32f37x_rtc.c **** 
1287:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;    
1288:../stdperiph/source/stm32f37x_rtc.c ****   }
1289:../stdperiph/source/stm32f37x_rtc.c ****   else
1290:../stdperiph/source/stm32f37x_rtc.c ****   { 
1291:../stdperiph/source/stm32f37x_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1292:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1293:../stdperiph/source/stm32f37x_rtc.c ****    
1294:../stdperiph/source/stm32f37x_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1295:../stdperiph/source/stm32f37x_rtc.c ****     do
1296:../stdperiph/source/stm32f37x_rtc.c ****     {
1297:../stdperiph/source/stm32f37x_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1298:../stdperiph/source/stm32f37x_rtc.c ****       alarmcounter++;  
1299:../stdperiph/source/stm32f37x_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1300:../stdperiph/source/stm32f37x_rtc.c ****     
1301:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1302:../stdperiph/source/stm32f37x_rtc.c ****     {
1303:../stdperiph/source/stm32f37x_rtc.c ****       status = ERROR;
1304:../stdperiph/source/stm32f37x_rtc.c ****     } 
1305:../stdperiph/source/stm32f37x_rtc.c ****     else
1306:../stdperiph/source/stm32f37x_rtc.c ****     {
1307:../stdperiph/source/stm32f37x_rtc.c ****       status = SUCCESS;
1308:../stdperiph/source/stm32f37x_rtc.c ****     }        
1309:../stdperiph/source/stm32f37x_rtc.c ****   } 
1310:../stdperiph/source/stm32f37x_rtc.c **** 
1311:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1312:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1313:../stdperiph/source/stm32f37x_rtc.c ****   
1314:../stdperiph/source/stm32f37x_rtc.c ****   return status;
1315:../stdperiph/source/stm32f37x_rtc.c **** }
1316:../stdperiph/source/stm32f37x_rtc.c **** 
1317:../stdperiph/source/stm32f37x_rtc.c **** /**
1318:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.
1319:../stdperiph/source/stm32f37x_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1320:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1321:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1322:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1323:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B
1324:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1325:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be a value from 0 to 0x00007FFF.
1326:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1327:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be any combination of the following values:
1328:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_All: All Alarm SS fields are masked.
1329:../stdperiph/source/stm32f37x_rtc.c ****   *                                             There is no comparison on sub seconds for Alarm.
1330:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_1: SS[14:1] are don't care in Alarm comparison.
1331:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[0] is compared
1332:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_2: SS[14:2] are don't care in Alarm comparison.
1333:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[1:0] are compared
1334:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_3: SS[14:3] are don't care in Alarm comparison.
1335:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[2:0] are compared
1336:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_4: SS[14:4] are don't care in Alarm comparison.
1337:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[3:0] are compared
1338:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_5: SS[14:5] are don't care in Alarm comparison.
1339:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[4:0] are compared
1340:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_6: SS[14:6] are don't care in Alarm comparison.
1341:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[5:0] are compared
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 25


1342:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_7: SS[14:7] are don't care in Alarm comparison.
1343:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[6:0] are compared
1344:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_8: SS[14:8] are don't care in Alarm comparison.
1345:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[7:0] are compared
1346:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_9: SS[14:9] are don't care in Alarm comparison.
1347:../stdperiph/source/stm32f37x_rtc.c ****   *                                                Only SS[8:0] are compared
1348:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1349:../stdperiph/source/stm32f37x_rtc.c ****   *                                                 Only SS[9:0] are compared
1350:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1351:../stdperiph/source/stm32f37x_rtc.c ****   *                                                 Only SS[10:0] are compared
1352:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1353:../stdperiph/source/stm32f37x_rtc.c ****   *                                                 Only SS[11:0] are compared
1354:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1355:../stdperiph/source/stm32f37x_rtc.c ****   *                                                 Only SS[12:0] are compared
1356:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14: SS[14] is don't care in Alarm comparison.
1357:../stdperiph/source/stm32f37x_rtc.c ****   *                                              Only SS[13:0] are compared
1358:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_None: SS[14:0] are compared and must match to activate a
1359:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1360:../stdperiph/source/stm32f37x_rtc.c ****   */
1361:../stdperiph/source/stm32f37x_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1362:../stdperiph/source/stm32f37x_rtc.c **** {
1363:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
1364:../stdperiph/source/stm32f37x_rtc.c **** 
1365:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1366:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1367:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1368:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1369:../stdperiph/source/stm32f37x_rtc.c ****   
1370:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1371:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1372:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1373:../stdperiph/source/stm32f37x_rtc.c ****   
1374:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1375:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1376:../stdperiph/source/stm32f37x_rtc.c ****   
1377:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1378:../stdperiph/source/stm32f37x_rtc.c ****   {
1379:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the AlarmA SubSecond register */
1380:../stdperiph/source/stm32f37x_rtc.c ****     RTC->ALRMASSR = tmpreg;
1381:../stdperiph/source/stm32f37x_rtc.c ****   }
1382:../stdperiph/source/stm32f37x_rtc.c ****   else
1383:../stdperiph/source/stm32f37x_rtc.c ****   {
1384:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Alarm B SubSecond register */
1385:../stdperiph/source/stm32f37x_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1386:../stdperiph/source/stm32f37x_rtc.c ****   }
1387:../stdperiph/source/stm32f37x_rtc.c **** 
1388:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1389:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1390:../stdperiph/source/stm32f37x_rtc.c **** 
1391:../stdperiph/source/stm32f37x_rtc.c **** }
1392:../stdperiph/source/stm32f37x_rtc.c **** 
1393:../stdperiph/source/stm32f37x_rtc.c **** /**
1394:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1395:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1396:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1397:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1398:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 26


1399:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
1400:../stdperiph/source/stm32f37x_rtc.c ****   * @retval RTC Alarm Subseconds value.
1401:../stdperiph/source/stm32f37x_rtc.c ****   */
1402:../stdperiph/source/stm32f37x_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1403:../stdperiph/source/stm32f37x_rtc.c **** {
1404:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
1405:../stdperiph/source/stm32f37x_rtc.c ****   
1406:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the RTC_ALRMxR register */
1407:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1408:../stdperiph/source/stm32f37x_rtc.c ****   {
1409:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1410:../stdperiph/source/stm32f37x_rtc.c ****   }
1411:../stdperiph/source/stm32f37x_rtc.c ****   else
1412:../stdperiph/source/stm32f37x_rtc.c ****   {
1413:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1414:../stdperiph/source/stm32f37x_rtc.c ****   } 
1415:../stdperiph/source/stm32f37x_rtc.c ****   
1416:../stdperiph/source/stm32f37x_rtc.c ****   return (tmpreg);
1417:../stdperiph/source/stm32f37x_rtc.c **** }
1418:../stdperiph/source/stm32f37x_rtc.c **** 
1419:../stdperiph/source/stm32f37x_rtc.c **** /**
1420:../stdperiph/source/stm32f37x_rtc.c ****   * @}
1421:../stdperiph/source/stm32f37x_rtc.c ****   */
1422:../stdperiph/source/stm32f37x_rtc.c **** 
1423:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1424:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1425:../stdperiph/source/stm32f37x_rtc.c ****  *
1426:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
1427:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1428:../stdperiph/source/stm32f37x_rtc.c ****             ##### WakeUp Timer configuration functions #####
1429:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
1430:../stdperiph/source/stm32f37x_rtc.c **** 
1431:../stdperiph/source/stm32f37x_rtc.c ****     [..] This section provide functions allowing to program and read the RTC WakeUp.
1432:../stdperiph/source/stm32f37x_rtc.c **** 
1433:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
1434:../stdperiph/source/stm32f37x_rtc.c ****   * @{
1435:../stdperiph/source/stm32f37x_rtc.c ****   */
1436:../stdperiph/source/stm32f37x_rtc.c **** 
1437:../stdperiph/source/stm32f37x_rtc.c **** /**
1438:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1439:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1440:../stdperiph/source/stm32f37x_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).
1441:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1442:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1443:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16
1444:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8
1445:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4
1446:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2
1447:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits
1448:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits
1449:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1450:../stdperiph/source/stm32f37x_rtc.c ****   */
1451:../stdperiph/source/stm32f37x_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1452:../stdperiph/source/stm32f37x_rtc.c **** {
1453:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1454:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1455:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 27


1456:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1457:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1458:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1459:../stdperiph/source/stm32f37x_rtc.c **** 
1460:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1461:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1462:../stdperiph/source/stm32f37x_rtc.c **** 
1463:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the clock source */
1464:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1465:../stdperiph/source/stm32f37x_rtc.c ****   
1466:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1467:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1468:../stdperiph/source/stm32f37x_rtc.c **** }
1469:../stdperiph/source/stm32f37x_rtc.c **** 
1470:../stdperiph/source/stm32f37x_rtc.c **** /**
1471:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1472:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1473:../stdperiph/source/stm32f37x_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).
1474:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1475:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1476:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1477:../stdperiph/source/stm32f37x_rtc.c ****   */
1478:../stdperiph/source/stm32f37x_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1479:../stdperiph/source/stm32f37x_rtc.c **** {
1480:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1481:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1482:../stdperiph/source/stm32f37x_rtc.c ****   
1483:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1484:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1485:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1486:../stdperiph/source/stm32f37x_rtc.c ****   
1487:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the Wakeup Timer counter */
1488:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1489:../stdperiph/source/stm32f37x_rtc.c ****   
1490:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1491:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1492:../stdperiph/source/stm32f37x_rtc.c **** }
1493:../stdperiph/source/stm32f37x_rtc.c **** 
1494:../stdperiph/source/stm32f37x_rtc.c **** /**
1495:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1496:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
1497:../stdperiph/source/stm32f37x_rtc.c ****   * @retval The RTC WakeUp Counter value.
1498:../stdperiph/source/stm32f37x_rtc.c ****   */
1499:../stdperiph/source/stm32f37x_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1500:../stdperiph/source/stm32f37x_rtc.c **** {
1501:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the counter value */
1502:../stdperiph/source/stm32f37x_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1503:../stdperiph/source/stm32f37x_rtc.c **** }
1504:../stdperiph/source/stm32f37x_rtc.c **** 
1505:../stdperiph/source/stm32f37x_rtc.c **** /**
1506:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1507:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1508:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1509:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1510:../stdperiph/source/stm32f37x_rtc.c ****   */
1511:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1512:../stdperiph/source/stm32f37x_rtc.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 28


1513:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1514:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t wutwfstatus = 0x00;
1515:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
1516:../stdperiph/source/stm32f37x_rtc.c ****   
1517:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1518:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1519:../stdperiph/source/stm32f37x_rtc.c **** 
1520:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1521:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1522:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1523:../stdperiph/source/stm32f37x_rtc.c **** 
1524:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
1525:../stdperiph/source/stm32f37x_rtc.c ****   {
1526:../stdperiph/source/stm32f37x_rtc.c ****     /* Enable the Wakeup Timer */
1527:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1528:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;    
1529:../stdperiph/source/stm32f37x_rtc.c ****   }
1530:../stdperiph/source/stm32f37x_rtc.c ****   else
1531:../stdperiph/source/stm32f37x_rtc.c ****   {
1532:../stdperiph/source/stm32f37x_rtc.c ****     /* Disable the Wakeup Timer */
1533:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1534:../stdperiph/source/stm32f37x_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1535:../stdperiph/source/stm32f37x_rtc.c ****     do
1536:../stdperiph/source/stm32f37x_rtc.c ****     {
1537:../stdperiph/source/stm32f37x_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1538:../stdperiph/source/stm32f37x_rtc.c ****       wutcounter++;  
1539:../stdperiph/source/stm32f37x_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1540:../stdperiph/source/stm32f37x_rtc.c ****     
1541:../stdperiph/source/stm32f37x_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1542:../stdperiph/source/stm32f37x_rtc.c ****     {
1543:../stdperiph/source/stm32f37x_rtc.c ****       status = ERROR;
1544:../stdperiph/source/stm32f37x_rtc.c ****     }
1545:../stdperiph/source/stm32f37x_rtc.c ****     else
1546:../stdperiph/source/stm32f37x_rtc.c ****     {
1547:../stdperiph/source/stm32f37x_rtc.c ****       status = SUCCESS;
1548:../stdperiph/source/stm32f37x_rtc.c ****     }    
1549:../stdperiph/source/stm32f37x_rtc.c ****   }
1550:../stdperiph/source/stm32f37x_rtc.c **** 
1551:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1552:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1553:../stdperiph/source/stm32f37x_rtc.c ****   
1554:../stdperiph/source/stm32f37x_rtc.c ****   return status;
1555:../stdperiph/source/stm32f37x_rtc.c **** }
1556:../stdperiph/source/stm32f37x_rtc.c **** 
1557:../stdperiph/source/stm32f37x_rtc.c **** /**
1558:../stdperiph/source/stm32f37x_rtc.c ****   * @}
1559:../stdperiph/source/stm32f37x_rtc.c ****   */
1560:../stdperiph/source/stm32f37x_rtc.c **** 
1561:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1562:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1563:../stdperiph/source/stm32f37x_rtc.c ****  *
1564:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
1565:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1566:../stdperiph/source/stm32f37x_rtc.c ****             ##### Daylight Saving configuration functions #####
1567:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
1568:../stdperiph/source/stm32f37x_rtc.c ****    [..] This section provides functions allowing to configure the RTC DayLight Saving.
1569:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 29


1570:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
1571:../stdperiph/source/stm32f37x_rtc.c ****   * @{
1572:../stdperiph/source/stm32f37x_rtc.c ****   */
1573:../stdperiph/source/stm32f37x_rtc.c **** 
1574:../stdperiph/source/stm32f37x_rtc.c **** /**
1575:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1576:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1577:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1578:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1579:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1580:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1581:../stdperiph/source/stm32f37x_rtc.c ****   *                             in CR register to store the operation.
1582:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1583:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1584:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1585:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1586:../stdperiph/source/stm32f37x_rtc.c ****   */
1587:../stdperiph/source/stm32f37x_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1588:../stdperiph/source/stm32f37x_rtc.c **** {
1589:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1590:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1591:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1592:../stdperiph/source/stm32f37x_rtc.c **** 
1593:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1594:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1595:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1596:../stdperiph/source/stm32f37x_rtc.c **** 
1597:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear the bits to be configured */
1598:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1599:../stdperiph/source/stm32f37x_rtc.c **** 
1600:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the RTC_CR register */
1601:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1602:../stdperiph/source/stm32f37x_rtc.c **** 
1603:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1604:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1605:../stdperiph/source/stm32f37x_rtc.c **** }
1606:../stdperiph/source/stm32f37x_rtc.c **** 
1607:../stdperiph/source/stm32f37x_rtc.c **** /**
1608:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1609:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
1610:../stdperiph/source/stm32f37x_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1611:../stdperiph/source/stm32f37x_rtc.c ****   *          - RTC_StoreOperation_Reset
1612:../stdperiph/source/stm32f37x_rtc.c ****   *          - RTC_StoreOperation_Set
1613:../stdperiph/source/stm32f37x_rtc.c ****   */
1614:../stdperiph/source/stm32f37x_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1615:../stdperiph/source/stm32f37x_rtc.c **** {
1616:../stdperiph/source/stm32f37x_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1617:../stdperiph/source/stm32f37x_rtc.c **** }
1618:../stdperiph/source/stm32f37x_rtc.c **** 
1619:../stdperiph/source/stm32f37x_rtc.c **** /**
1620:../stdperiph/source/stm32f37x_rtc.c ****   * @}
1621:../stdperiph/source/stm32f37x_rtc.c ****   */
1622:../stdperiph/source/stm32f37x_rtc.c **** 
1623:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1624:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Output pin Configuration function 
1625:../stdperiph/source/stm32f37x_rtc.c ****  *
1626:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 30


1627:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1628:../stdperiph/source/stm32f37x_rtc.c ****             ##### Output pin Configuration function #####
1629:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1630:../stdperiph/source/stm32f37x_rtc.c ****     [..] This section provides functions allowing to configure the RTC Output source.
1631:../stdperiph/source/stm32f37x_rtc.c **** 
1632:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
1633:../stdperiph/source/stm32f37x_rtc.c ****   * @{
1634:../stdperiph/source/stm32f37x_rtc.c ****   */
1635:../stdperiph/source/stm32f37x_rtc.c **** 
1636:../stdperiph/source/stm32f37x_rtc.c **** /**
1637:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1638:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1639:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1640:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1641:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1642:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1643:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1644:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1645:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following:
1646:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1647:../stdperiph/source/stm32f37x_rtc.c ****   *                                          ALRAF/ALRBF/WUTF is high (depending on OSEL)
1648:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1649:../stdperiph/source/stm32f37x_rtc.c ****   *                                         ALRAF/ALRBF/WUTF is high (depending on OSEL)
1650:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1651:../stdperiph/source/stm32f37x_rtc.c ****   */
1652:../stdperiph/source/stm32f37x_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1653:../stdperiph/source/stm32f37x_rtc.c **** {
1654:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1655:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1656:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1657:../stdperiph/source/stm32f37x_rtc.c **** 
1658:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1659:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1660:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1661:../stdperiph/source/stm32f37x_rtc.c **** 
1662:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear the bits to be configured */
1663:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1664:../stdperiph/source/stm32f37x_rtc.c **** 
1665:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the output selection and polarity */
1666:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1667:../stdperiph/source/stm32f37x_rtc.c **** 
1668:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1669:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1670:../stdperiph/source/stm32f37x_rtc.c **** }
1671:../stdperiph/source/stm32f37x_rtc.c **** 
1672:../stdperiph/source/stm32f37x_rtc.c **** /**
1673:../stdperiph/source/stm32f37x_rtc.c ****   * @}
1674:../stdperiph/source/stm32f37x_rtc.c ****   */
1675:../stdperiph/source/stm32f37x_rtc.c **** 
1676:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1677:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Digital Calibration configuration functions 
1678:../stdperiph/source/stm32f37x_rtc.c ****  *
1679:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
1680:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1681:../stdperiph/source/stm32f37x_rtc.c ****           ##### Digital Calibration configuration functions #####
1682:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1683:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 31


1684:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
1685:../stdperiph/source/stm32f37x_rtc.c ****   * @{
1686:../stdperiph/source/stm32f37x_rtc.c ****   */
1687:../stdperiph/source/stm32f37x_rtc.c **** 
1688:../stdperiph/source/stm32f37x_rtc.c **** /**
1689:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1690:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1691:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1692:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1693:../stdperiph/source/stm32f37x_rtc.c ****   */
1694:../stdperiph/source/stm32f37x_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1695:../stdperiph/source/stm32f37x_rtc.c **** {
1696:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1697:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1698:../stdperiph/source/stm32f37x_rtc.c ****   
1699:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1700:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1701:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1702:../stdperiph/source/stm32f37x_rtc.c ****   
1703:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
1704:../stdperiph/source/stm32f37x_rtc.c ****   {
1705:../stdperiph/source/stm32f37x_rtc.c ****     /* Enable the RTC clock output */
1706:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1707:../stdperiph/source/stm32f37x_rtc.c ****   }
1708:../stdperiph/source/stm32f37x_rtc.c ****   else
1709:../stdperiph/source/stm32f37x_rtc.c ****   { 
1710:../stdperiph/source/stm32f37x_rtc.c ****     /* Disable the RTC clock output */
1711:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1712:../stdperiph/source/stm32f37x_rtc.c ****   }
1713:../stdperiph/source/stm32f37x_rtc.c ****   
1714:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1715:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF; 
1716:../stdperiph/source/stm32f37x_rtc.c **** }
1717:../stdperiph/source/stm32f37x_rtc.c **** 
1718:../stdperiph/source/stm32f37x_rtc.c **** /**
1719:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1720:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_CalibOutput: Select the Calibration output Selection .
1721:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1722:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1723:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_CalibOutput_1Hz: A signal has a regular waveform at 1Hz.
1724:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1725:../stdperiph/source/stm32f37x_rtc.c **** */
1726:../stdperiph/source/stm32f37x_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1727:../stdperiph/source/stm32f37x_rtc.c **** {
1728:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1729:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1730:../stdperiph/source/stm32f37x_rtc.c **** 
1731:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1732:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1733:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1734:../stdperiph/source/stm32f37x_rtc.c ****   
1735:../stdperiph/source/stm32f37x_rtc.c ****   /*clear flags before config*/
1736:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1737:../stdperiph/source/stm32f37x_rtc.c **** 
1738:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the RTC_CR register */
1739:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1740:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 32


1741:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1742:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1743:../stdperiph/source/stm32f37x_rtc.c **** }
1744:../stdperiph/source/stm32f37x_rtc.c **** 
1745:../stdperiph/source/stm32f37x_rtc.c **** /**
1746:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1747:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_SmoothCalibPeriod: Select the Smooth Calibration Period.
1748:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be can be one of the following values:
1749:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_32sec: The smooth calibration periode is 32s.
1750:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_16sec: The smooth calibration periode is 16s.
1751:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_8sec: The smooth calibartion periode is 8s.
1752:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses: Select to Set or reset the CALP bit.
1753:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1754:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_SmoothCalibPlusPulses_Set: Add one RTCCLK puls every 2**11 pulses.
1755:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1756:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1757:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one any value from 0 to 0x000001FF.
1758:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
1759:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1760:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1761:../stdperiph/source/stm32f37x_rtc.c **** */
1762:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1763:../stdperiph/source/stm32f37x_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1764:../stdperiph/source/stm32f37x_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1765:../stdperiph/source/stm32f37x_rtc.c **** {
1766:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
1767:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t recalpfcount = 0;
1768:../stdperiph/source/stm32f37x_rtc.c **** 
1769:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1770:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1771:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1772:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1773:../stdperiph/source/stm32f37x_rtc.c **** 
1774:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1775:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1776:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1777:../stdperiph/source/stm32f37x_rtc.c ****   
1778:../stdperiph/source/stm32f37x_rtc.c ****   /* check if a calibration is pending*/
1779:../stdperiph/source/stm32f37x_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1780:../stdperiph/source/stm32f37x_rtc.c ****   {
1781:../stdperiph/source/stm32f37x_rtc.c ****     /* wait until the Calibration is completed*/
1782:../stdperiph/source/stm32f37x_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1783:../stdperiph/source/stm32f37x_rtc.c ****     {
1784:../stdperiph/source/stm32f37x_rtc.c ****       recalpfcount++;
1785:../stdperiph/source/stm32f37x_rtc.c ****     }
1786:../stdperiph/source/stm32f37x_rtc.c ****   }
1787:../stdperiph/source/stm32f37x_rtc.c **** 
1788:../stdperiph/source/stm32f37x_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1789:../stdperiph/source/stm32f37x_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1790:../stdperiph/source/stm32f37x_rtc.c ****   {
1791:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Smooth calibration settings */
1792:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1793:../stdperiph/source/stm32f37x_rtc.c **** 
1794:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;
1795:../stdperiph/source/stm32f37x_rtc.c ****   }
1796:../stdperiph/source/stm32f37x_rtc.c ****   else
1797:../stdperiph/source/stm32f37x_rtc.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 33


1798:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
1799:../stdperiph/source/stm32f37x_rtc.c ****   }
1800:../stdperiph/source/stm32f37x_rtc.c **** 
1801:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1802:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1803:../stdperiph/source/stm32f37x_rtc.c ****   
1804:../stdperiph/source/stm32f37x_rtc.c ****   return (ErrorStatus)(status);
1805:../stdperiph/source/stm32f37x_rtc.c **** }
1806:../stdperiph/source/stm32f37x_rtc.c **** 
1807:../stdperiph/source/stm32f37x_rtc.c **** /**
1808:../stdperiph/source/stm32f37x_rtc.c ****   * @}
1809:../stdperiph/source/stm32f37x_rtc.c ****   */
1810:../stdperiph/source/stm32f37x_rtc.c **** 
1811:../stdperiph/source/stm32f37x_rtc.c **** 
1812:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1813:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   TimeStamp configuration functions 
1814:../stdperiph/source/stm32f37x_rtc.c ****  *
1815:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
1816:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1817:../stdperiph/source/stm32f37x_rtc.c ****             ##### TimeStamp configuration functions #####
1818:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
1819:../stdperiph/source/stm32f37x_rtc.c **** 
1820:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
1821:../stdperiph/source/stm32f37x_rtc.c ****   * @{
1822:../stdperiph/source/stm32f37x_rtc.c ****   */
1823:../stdperiph/source/stm32f37x_rtc.c **** 
1824:../stdperiph/source/stm32f37x_rtc.c **** /**
1825:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1826:../stdperiph/source/stm32f37x_rtc.c ****   *         specified time stamp pin stimulating edge.
1827:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1828:../stdperiph/source/stm32f37x_rtc.c ****   *         activated.
1829:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following:
1830:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1831:../stdperiph/source/stm32f37x_rtc.c ****   *                                           edge of the related pin.
1832:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1833:../stdperiph/source/stm32f37x_rtc.c ****   *                                            falling edge of the related pin.
1834:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1835:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1836:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1837:../stdperiph/source/stm32f37x_rtc.c ****   */
1838:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1839:../stdperiph/source/stm32f37x_rtc.c **** {
1840:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
1841:../stdperiph/source/stm32f37x_rtc.c **** 
1842:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1843:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1844:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1845:../stdperiph/source/stm32f37x_rtc.c **** 
1846:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1847:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1848:../stdperiph/source/stm32f37x_rtc.c **** 
1849:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the new configuration */
1850:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
1851:../stdperiph/source/stm32f37x_rtc.c ****   {
1852:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1853:../stdperiph/source/stm32f37x_rtc.c ****   }
1854:../stdperiph/source/stm32f37x_rtc.c ****   else
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 34


1855:../stdperiph/source/stm32f37x_rtc.c ****   {
1856:../stdperiph/source/stm32f37x_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1857:../stdperiph/source/stm32f37x_rtc.c ****   }
1858:../stdperiph/source/stm32f37x_rtc.c **** 
1859:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
1860:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
1861:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
1862:../stdperiph/source/stm32f37x_rtc.c **** 
1863:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1864:../stdperiph/source/stm32f37x_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
1865:../stdperiph/source/stm32f37x_rtc.c **** 
1866:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
1867:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
1868:../stdperiph/source/stm32f37x_rtc.c **** }
1869:../stdperiph/source/stm32f37x_rtc.c **** 
1870:../stdperiph/source/stm32f37x_rtc.c **** /**
1871:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1872:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1873:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1874:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1875:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1876:../stdperiph/source/stm32f37x_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1877:../stdperiph/source/stm32f37x_rtc.c ****   *                             contains the TimeStamp time values. 
1878:../stdperiph/source/stm32f37x_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1879:../stdperiph/source/stm32f37x_rtc.c ****   *                             contains the TimeStamp date values.     
1880:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1881:../stdperiph/source/stm32f37x_rtc.c ****   */
1882:../stdperiph/source/stm32f37x_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
1883:../stdperiph/source/stm32f37x_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
1884:../stdperiph/source/stm32f37x_rtc.c **** {
1885:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
1886:../stdperiph/source/stm32f37x_rtc.c **** 
1887:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1888:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1889:../stdperiph/source/stm32f37x_rtc.c **** 
1890:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the TimeStamp time and date registers values */
1891:../stdperiph/source/stm32f37x_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
1892:../stdperiph/source/stm32f37x_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
1893:../stdperiph/source/stm32f37x_rtc.c **** 
1894:../stdperiph/source/stm32f37x_rtc.c ****   /* Fill the Time structure fields with the read parameters */
1895:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
1896:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
1897:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
1898:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
1899:../stdperiph/source/stm32f37x_rtc.c **** 
1900:../stdperiph/source/stm32f37x_rtc.c ****   /* Fill the Date structure fields with the read parameters */
1901:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
1902:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1903:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
1904:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
1905:../stdperiph/source/stm32f37x_rtc.c **** 
1906:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the input parameters format */
1907:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1908:../stdperiph/source/stm32f37x_rtc.c ****   {
1909:../stdperiph/source/stm32f37x_rtc.c ****     /* Convert the Time structure parameters to Binary format */
1910:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
1911:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 35


1912:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
1913:../stdperiph/source/stm32f37x_rtc.c **** 
1914:../stdperiph/source/stm32f37x_rtc.c ****     /* Convert the Date structure parameters to Binary format */
1915:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
1916:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
1917:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
1918:../stdperiph/source/stm32f37x_rtc.c ****   }
1919:../stdperiph/source/stm32f37x_rtc.c **** }
1920:../stdperiph/source/stm32f37x_rtc.c **** 
1921:../stdperiph/source/stm32f37x_rtc.c **** /**
1922:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
1923:../stdperiph/source/stm32f37x_rtc.c ****   * @param  None
1924:../stdperiph/source/stm32f37x_rtc.c ****   * @retval RTC current timestamp Subseconds value.
1925:../stdperiph/source/stm32f37x_rtc.c ****   */
1926:../stdperiph/source/stm32f37x_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
1927:../stdperiph/source/stm32f37x_rtc.c **** {
1928:../stdperiph/source/stm32f37x_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
1929:../stdperiph/source/stm32f37x_rtc.c ****   return (uint32_t)(RTC->TSSSR);
1930:../stdperiph/source/stm32f37x_rtc.c **** }
1931:../stdperiph/source/stm32f37x_rtc.c **** 
1932:../stdperiph/source/stm32f37x_rtc.c **** /**
1933:../stdperiph/source/stm32f37x_rtc.c ****   * @}
1934:../stdperiph/source/stm32f37x_rtc.c ****   */
1935:../stdperiph/source/stm32f37x_rtc.c **** 
1936:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
1937:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Tampers configuration functions 
1938:../stdperiph/source/stm32f37x_rtc.c ****  *
1939:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
1940:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
1941:../stdperiph/source/stm32f37x_rtc.c ****             ##### Tampers configuration functions #####
1942:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
1943:../stdperiph/source/stm32f37x_rtc.c **** 
1944:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
1945:../stdperiph/source/stm32f37x_rtc.c ****   * @{
1946:../stdperiph/source/stm32f37x_rtc.c ****   */
1947:../stdperiph/source/stm32f37x_rtc.c **** 
1948:../stdperiph/source/stm32f37x_rtc.c **** /**
1949:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the select Tamper pin edge.
1950:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1951:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be any combination of the following values:
1952:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Tamper_1: Select Tamper 1.
1953:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Tamper_2: Select Tamper 2.
1954:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Tamper_3: Select Tamper 3.
1955:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
1956:../stdperiph/source/stm32f37x_rtc.c ****   *                            stimulates tamper event. 
1957:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
1958:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event
1959:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper eve
1960:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
1961:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
1962:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1963:../stdperiph/source/stm32f37x_rtc.c ****   */
1964:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
1965:../stdperiph/source/stm32f37x_rtc.c **** {
1966:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1967:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
1968:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 36


1969:../stdperiph/source/stm32f37x_rtc.c ****  
1970:../stdperiph/source/stm32f37x_rtc.c ****   /* Check if the  active level for Tamper is rising edge (Low level)*/
1971:../stdperiph/source/stm32f37x_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
1972:../stdperiph/source/stm32f37x_rtc.c ****   {  
1973:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the RTC_TAFCR register */
1974:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
1975:../stdperiph/source/stm32f37x_rtc.c ****   }
1976:../stdperiph/source/stm32f37x_rtc.c ****   else
1977:../stdperiph/source/stm32f37x_rtc.c ****   { 
1978:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the RTC_TAFCR register */
1979:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
1980:../stdperiph/source/stm32f37x_rtc.c ****   }  
1981:../stdperiph/source/stm32f37x_rtc.c **** }
1982:../stdperiph/source/stm32f37x_rtc.c **** 
1983:../stdperiph/source/stm32f37x_rtc.c **** /**
1984:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
1985:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1986:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be any combination of the following values:
1987:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Tamper_1: Select Tamper 1.
1988:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Tamper_2: Select Tamper 2.
1989:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_Tamper_3: Select Tamper 3.
1990:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the tamper pin.
1991:../stdperiph/source/stm32f37x_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.                   
1992:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
1993:../stdperiph/source/stm32f37x_rtc.c ****   */
1994:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
1995:../stdperiph/source/stm32f37x_rtc.c **** {
1996:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
1997:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
1998:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1999:../stdperiph/source/stm32f37x_rtc.c ****   
2000:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
2001:../stdperiph/source/stm32f37x_rtc.c ****   {
2002:../stdperiph/source/stm32f37x_rtc.c ****     /* Enable the selected Tamper pin */
2003:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2004:../stdperiph/source/stm32f37x_rtc.c ****   }
2005:../stdperiph/source/stm32f37x_rtc.c ****   else
2006:../stdperiph/source/stm32f37x_rtc.c ****   {
2007:../stdperiph/source/stm32f37x_rtc.c ****     /* Disable the selected Tamper pin */
2008:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2009:../stdperiph/source/stm32f37x_rtc.c ****   }  
2010:../stdperiph/source/stm32f37x_rtc.c **** }
2011:../stdperiph/source/stm32f37x_rtc.c **** 
2012:../stdperiph/source/stm32f37x_rtc.c **** /**
2013:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the Tampers Filter.
2014:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2015:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
2016:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2017:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2018:../stdperiph/source/stm32f37x_rtc.c ****   *                                           samples at the active level 
2019:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2020:../stdperiph/source/stm32f37x_rtc.c ****   *                                           samples at the active level
2021:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2022:../stdperiph/source/stm32f37x_rtc.c ****   *                                           samples at the active level 
2023:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2024:../stdperiph/source/stm32f37x_rtc.c ****   */
2025:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 37


2026:../stdperiph/source/stm32f37x_rtc.c **** {
2027:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2028:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2029:../stdperiph/source/stm32f37x_rtc.c ****    
2030:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2031:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2032:../stdperiph/source/stm32f37x_rtc.c **** 
2033:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the RTC_TAFCR register */
2034:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2035:../stdperiph/source/stm32f37x_rtc.c **** }
2036:../stdperiph/source/stm32f37x_rtc.c **** 
2037:../stdperiph/source/stm32f37x_rtc.c **** /**
2038:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2039:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2040:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
2041:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2042:../stdperiph/source/stm32f37x_rtc.c ****   *                                                         with a frequency =  RTCCLK / 32768
2043:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2044:../stdperiph/source/stm32f37x_rtc.c ****   *                                                         with a frequency =  RTCCLK / 16384
2045:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2046:../stdperiph/source/stm32f37x_rtc.c ****   *                                                        with a frequency =  RTCCLK / 8192
2047:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2048:../stdperiph/source/stm32f37x_rtc.c ****   *                                                        with a frequency =  RTCCLK / 4096
2049:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2050:../stdperiph/source/stm32f37x_rtc.c ****   *                                                        with a frequency =  RTCCLK / 2048
2051:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2052:../stdperiph/source/stm32f37x_rtc.c ****   *                                                        with a frequency =  RTCCLK / 1024
2053:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2054:../stdperiph/source/stm32f37x_rtc.c ****   *                                                       with a frequency =  RTCCLK / 512  
2055:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2056:../stdperiph/source/stm32f37x_rtc.c ****   *                                                       with a frequency =  RTCCLK / 256  
2057:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2058:../stdperiph/source/stm32f37x_rtc.c ****   */
2059:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2060:../stdperiph/source/stm32f37x_rtc.c **** {
2061:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2062:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2063:../stdperiph/source/stm32f37x_rtc.c ****  
2064:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2065:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2066:../stdperiph/source/stm32f37x_rtc.c **** 
2067:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the RTC_TAFCR register */
2068:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2069:../stdperiph/source/stm32f37x_rtc.c **** }
2070:../stdperiph/source/stm32f37x_rtc.c **** 
2071:../stdperiph/source/stm32f37x_rtc.c **** /**
2072:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2073:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2074:../stdperiph/source/stm32f37x_rtc.c ****   *         Precharge Duration.
2075:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
2076:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before samplin
2077:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before samplin
2078:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before samplin
2079:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before samplin
2080:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2081:../stdperiph/source/stm32f37x_rtc.c ****   */
2082:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 38


2083:../stdperiph/source/stm32f37x_rtc.c **** {
2084:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2085:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2086:../stdperiph/source/stm32f37x_rtc.c ****    
2087:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2088:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2089:../stdperiph/source/stm32f37x_rtc.c **** 
2090:../stdperiph/source/stm32f37x_rtc.c ****   /* Configure the RTC_TAFCR register */
2091:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2092:../stdperiph/source/stm32f37x_rtc.c **** }
2093:../stdperiph/source/stm32f37x_rtc.c **** 
2094:../stdperiph/source/stm32f37x_rtc.c **** /**
2095:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2096:../stdperiph/source/stm32f37x_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2097:../stdperiph/source/stm32f37x_rtc.c ****   *         is reset.   
2098:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2099:../stdperiph/source/stm32f37x_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2100:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2101:../stdperiph/source/stm32f37x_rtc.c ****   */
2102:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2103:../stdperiph/source/stm32f37x_rtc.c **** {
2104:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2105:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2106:../stdperiph/source/stm32f37x_rtc.c ****    
2107:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
2108:../stdperiph/source/stm32f37x_rtc.c ****   {
2109:../stdperiph/source/stm32f37x_rtc.c ****     /* Save timestamp on tamper detection event */
2110:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2111:../stdperiph/source/stm32f37x_rtc.c ****   }
2112:../stdperiph/source/stm32f37x_rtc.c ****   else
2113:../stdperiph/source/stm32f37x_rtc.c ****   {
2114:../stdperiph/source/stm32f37x_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2115:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2116:../stdperiph/source/stm32f37x_rtc.c ****   }
2117:../stdperiph/source/stm32f37x_rtc.c **** }
2118:../stdperiph/source/stm32f37x_rtc.c **** 
2119:../stdperiph/source/stm32f37x_rtc.c **** /**
2120:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2121:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of tamper pull up.
2122:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2123:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2124:../stdperiph/source/stm32f37x_rtc.c ****   */
2125:../stdperiph/source/stm32f37x_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2126:../stdperiph/source/stm32f37x_rtc.c **** {
2127:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2128:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2129:../stdperiph/source/stm32f37x_rtc.c ****   
2130:../stdperiph/source/stm32f37x_rtc.c ****  if (NewState != DISABLE)
2131:../stdperiph/source/stm32f37x_rtc.c ****   {
2132:../stdperiph/source/stm32f37x_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2133:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2134:../stdperiph/source/stm32f37x_rtc.c ****   }
2135:../stdperiph/source/stm32f37x_rtc.c ****   else
2136:../stdperiph/source/stm32f37x_rtc.c ****   {
2137:../stdperiph/source/stm32f37x_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2138:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2139:../stdperiph/source/stm32f37x_rtc.c ****   } 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 39


2140:../stdperiph/source/stm32f37x_rtc.c **** }
2141:../stdperiph/source/stm32f37x_rtc.c **** 
2142:../stdperiph/source/stm32f37x_rtc.c **** /**
2143:../stdperiph/source/stm32f37x_rtc.c ****   * @}
2144:../stdperiph/source/stm32f37x_rtc.c ****   */
2145:../stdperiph/source/stm32f37x_rtc.c **** 
2146:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2147:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2148:../stdperiph/source/stm32f37x_rtc.c ****  *
2149:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
2150:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
2151:../stdperiph/source/stm32f37x_rtc.c ****           ##### Backup Data Registers configuration functions ##### 
2152:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
2153:../stdperiph/source/stm32f37x_rtc.c **** 
2154:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
2155:../stdperiph/source/stm32f37x_rtc.c ****   * @{
2156:../stdperiph/source/stm32f37x_rtc.c ****   */
2157:../stdperiph/source/stm32f37x_rtc.c **** 
2158:../stdperiph/source/stm32f37x_rtc.c **** /**
2159:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2160:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2161:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2162:../stdperiph/source/stm32f37x_rtc.c ****   *                                 specify the register.
2163:../stdperiph/source/stm32f37x_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2164:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2165:../stdperiph/source/stm32f37x_rtc.c ****   */
2166:../stdperiph/source/stm32f37x_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2167:../stdperiph/source/stm32f37x_rtc.c **** {
2168:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t tmp = 0;
2169:../stdperiph/source/stm32f37x_rtc.c ****   
2170:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2171:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2172:../stdperiph/source/stm32f37x_rtc.c **** 
2173:../stdperiph/source/stm32f37x_rtc.c ****   tmp = RTC_BASE + 0x50;
2174:../stdperiph/source/stm32f37x_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2175:../stdperiph/source/stm32f37x_rtc.c **** 
2176:../stdperiph/source/stm32f37x_rtc.c ****   /* Write the specified register */
2177:../stdperiph/source/stm32f37x_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2178:../stdperiph/source/stm32f37x_rtc.c **** }
2179:../stdperiph/source/stm32f37x_rtc.c **** 
2180:../stdperiph/source/stm32f37x_rtc.c **** /**
2181:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2182:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2183:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2184:../stdperiph/source/stm32f37x_rtc.c ****   *                          specify the register.                   
2185:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2186:../stdperiph/source/stm32f37x_rtc.c ****   */
2187:../stdperiph/source/stm32f37x_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2188:../stdperiph/source/stm32f37x_rtc.c **** {
2189:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t tmp = 0;
2190:../stdperiph/source/stm32f37x_rtc.c ****   
2191:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2192:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2193:../stdperiph/source/stm32f37x_rtc.c **** 
2194:../stdperiph/source/stm32f37x_rtc.c ****   tmp = RTC_BASE + 0x50;
2195:../stdperiph/source/stm32f37x_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2196:../stdperiph/source/stm32f37x_rtc.c ****   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 40


2197:../stdperiph/source/stm32f37x_rtc.c ****   /* Read the specified register */
2198:../stdperiph/source/stm32f37x_rtc.c ****   return (*(__IO uint32_t *)tmp);
2199:../stdperiph/source/stm32f37x_rtc.c **** }
2200:../stdperiph/source/stm32f37x_rtc.c **** 
2201:../stdperiph/source/stm32f37x_rtc.c **** /**
2202:../stdperiph/source/stm32f37x_rtc.c ****   * @}
2203:../stdperiph/source/stm32f37x_rtc.c ****   */
2204:../stdperiph/source/stm32f37x_rtc.c **** 
2205:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group11 Output Type Config configuration functions
2206:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Output Type Config configuration functions  
2207:../stdperiph/source/stm32f37x_rtc.c ****  *
2208:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
2209:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
2210:../stdperiph/source/stm32f37x_rtc.c ****             ##### Output Type Config configuration functions ##### 
2211:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
2212:../stdperiph/source/stm32f37x_rtc.c **** 
2213:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
2214:../stdperiph/source/stm32f37x_rtc.c ****   * @{
2215:../stdperiph/source/stm32f37x_rtc.c ****   */
2216:../stdperiph/source/stm32f37x_rtc.c **** 
2217:../stdperiph/source/stm32f37x_rtc.c **** /**
2218:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2219:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2220:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
2221:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2222:../stdperiph/source/stm32f37x_rtc.c ****   *                                    Open Drain mode.
2223:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2224:../stdperiph/source/stm32f37x_rtc.c ****   *                                    Push Pull mode.    
2225:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2226:../stdperiph/source/stm32f37x_rtc.c ****   */
2227:../stdperiph/source/stm32f37x_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2228:../stdperiph/source/stm32f37x_rtc.c **** {
2229:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2230:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2231:../stdperiph/source/stm32f37x_rtc.c ****   
2232:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2233:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2234:../stdperiph/source/stm32f37x_rtc.c **** }
2235:../stdperiph/source/stm32f37x_rtc.c **** 
2236:../stdperiph/source/stm32f37x_rtc.c **** /**
2237:../stdperiph/source/stm32f37x_rtc.c ****   * @}
2238:../stdperiph/source/stm32f37x_rtc.c ****   */
2239:../stdperiph/source/stm32f37x_rtc.c **** 
2240:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2241:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Shift control synchronisation functions 
2242:../stdperiph/source/stm32f37x_rtc.c ****  *
2243:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
2244:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
2245:../stdperiph/source/stm32f37x_rtc.c ****             ##### Shift control synchronisation functions #####
2246:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
2247:../stdperiph/source/stm32f37x_rtc.c **** 
2248:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
2249:../stdperiph/source/stm32f37x_rtc.c ****   * @{
2250:../stdperiph/source/stm32f37x_rtc.c ****   */
2251:../stdperiph/source/stm32f37x_rtc.c **** 
2252:../stdperiph/source/stm32f37x_rtc.c **** /**
2253:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 41


2254:../stdperiph/source/stm32f37x_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2255:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_ShiftAdd1S: Select to add or not 1 second to the time Calendar.
2256:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values :
2257:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_ShiftAdd1S_Set: Add one second to the clock calendar. 
2258:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_ShiftAdd1S_Reset: No effect.
2259:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2260:../stdperiph/source/stm32f37x_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2261:../stdperiph/source/stm32f37x_rtc.c ****   * @retval An ErrorStatus enumeration value:
2262:../stdperiph/source/stm32f37x_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2263:../stdperiph/source/stm32f37x_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2264:../stdperiph/source/stm32f37x_rtc.c **** */
2265:../stdperiph/source/stm32f37x_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2266:../stdperiph/source/stm32f37x_rtc.c **** {
2267:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
2268:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t shpfcount = 0;
2269:../stdperiph/source/stm32f37x_rtc.c **** 
2270:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2271:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2272:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2273:../stdperiph/source/stm32f37x_rtc.c **** 
2274:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
2275:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
2276:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
2277:../stdperiph/source/stm32f37x_rtc.c ****   
2278:../stdperiph/source/stm32f37x_rtc.c ****   /* Check if a Shift is pending*/
2279:../stdperiph/source/stm32f37x_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2280:../stdperiph/source/stm32f37x_rtc.c ****   {
2281:../stdperiph/source/stm32f37x_rtc.c ****     /* Wait until the shift is completed*/
2282:../stdperiph/source/stm32f37x_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2283:../stdperiph/source/stm32f37x_rtc.c ****     {
2284:../stdperiph/source/stm32f37x_rtc.c ****       shpfcount++;
2285:../stdperiph/source/stm32f37x_rtc.c ****     }
2286:../stdperiph/source/stm32f37x_rtc.c ****   }
2287:../stdperiph/source/stm32f37x_rtc.c **** 
2288:../stdperiph/source/stm32f37x_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2289:../stdperiph/source/stm32f37x_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2290:../stdperiph/source/stm32f37x_rtc.c ****   {
2291:../stdperiph/source/stm32f37x_rtc.c ****     /* check if the reference clock detection is disabled */
2292:../stdperiph/source/stm32f37x_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2293:../stdperiph/source/stm32f37x_rtc.c ****     {
2294:../stdperiph/source/stm32f37x_rtc.c ****       /* Configure the Shift settings */
2295:../stdperiph/source/stm32f37x_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2296:../stdperiph/source/stm32f37x_rtc.c ****     
2297:../stdperiph/source/stm32f37x_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2298:../stdperiph/source/stm32f37x_rtc.c ****       {
2299:../stdperiph/source/stm32f37x_rtc.c ****         status = ERROR;
2300:../stdperiph/source/stm32f37x_rtc.c ****       }
2301:../stdperiph/source/stm32f37x_rtc.c ****       else
2302:../stdperiph/source/stm32f37x_rtc.c ****       {
2303:../stdperiph/source/stm32f37x_rtc.c ****         status = SUCCESS;
2304:../stdperiph/source/stm32f37x_rtc.c ****       }
2305:../stdperiph/source/stm32f37x_rtc.c ****     }
2306:../stdperiph/source/stm32f37x_rtc.c ****     else
2307:../stdperiph/source/stm32f37x_rtc.c ****     {
2308:../stdperiph/source/stm32f37x_rtc.c ****       status = ERROR;
2309:../stdperiph/source/stm32f37x_rtc.c ****     }
2310:../stdperiph/source/stm32f37x_rtc.c ****   }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 42


2311:../stdperiph/source/stm32f37x_rtc.c ****   else
2312:../stdperiph/source/stm32f37x_rtc.c ****   {
2313:../stdperiph/source/stm32f37x_rtc.c ****     status = ERROR;
2314:../stdperiph/source/stm32f37x_rtc.c ****   }
2315:../stdperiph/source/stm32f37x_rtc.c **** 
2316:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
2317:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF;
2318:../stdperiph/source/stm32f37x_rtc.c ****   
2319:../stdperiph/source/stm32f37x_rtc.c ****   return (ErrorStatus)(status);
2320:../stdperiph/source/stm32f37x_rtc.c **** }
2321:../stdperiph/source/stm32f37x_rtc.c **** 
2322:../stdperiph/source/stm32f37x_rtc.c **** /**
2323:../stdperiph/source/stm32f37x_rtc.c ****   * @}
2324:../stdperiph/source/stm32f37x_rtc.c ****   */
2325:../stdperiph/source/stm32f37x_rtc.c **** 
2326:../stdperiph/source/stm32f37x_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2327:../stdperiph/source/stm32f37x_rtc.c ****  *  @brief   Interrupts and flags management functions  
2328:../stdperiph/source/stm32f37x_rtc.c ****  *
2329:../stdperiph/source/stm32f37x_rtc.c **** @verbatim   
2330:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================
2331:../stdperiph/source/stm32f37x_rtc.c ****             ##### Interrupts and flags management functions #####
2332:../stdperiph/source/stm32f37x_rtc.c ****  ===============================================================================  
2333:../stdperiph/source/stm32f37x_rtc.c ****     [..] All RTC interrupts are connected to the EXTI controller.
2334:../stdperiph/source/stm32f37x_rtc.c ****  
2335:../stdperiph/source/stm32f37x_rtc.c ****          (+) To enable the RTC Alarm interrupt, the following sequence is required:
2336:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2337:../stdperiph/source/stm32f37x_rtc.c ****                   the rising edge sensitivity using the EXTI_Init() function.
2338:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using 
2339:../stdperiph/source/stm32f37x_rtc.c ****                   the NVIC_Init() function.
2340:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) 
2341:../stdperiph/source/stm32f37x_rtc.c ****                   using the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2342:../stdperiph/source/stm32f37x_rtc.c **** 
2343:../stdperiph/source/stm32f37x_rtc.c ****          (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2344:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the EXTI Line 20 in interrupt mode and select 
2345:../stdperiph/source/stm32f37x_rtc.c ****                   the rising edge sensitivity using the EXTI_Init() function.
2346:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using 
2347:../stdperiph/source/stm32f37x_rtc.c ****                   the NVIC_Init() function.
2348:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure the RTC to generate the RTC wakeup timer event using the 
2349:../stdperiph/source/stm32f37x_rtc.c ****                   RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2350:../stdperiph/source/stm32f37x_rtc.c ****                   functions.
2351:../stdperiph/source/stm32f37x_rtc.c **** 
2352:../stdperiph/source/stm32f37x_rtc.c ****          (+) To enable the RTC Tamper interrupt, the following sequence is required:
2353:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the EXTI Line 19 in interrupt mode and select 
2354:../stdperiph/source/stm32f37x_rtc.c ****                   the rising edge sensitivity using the EXTI_Init() function.
2355:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using 
2356:../stdperiph/source/stm32f37x_rtc.c ****                   the NVIC_Init() function.
2357:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure the RTC to detect the RTC tamper event using the 
2358:../stdperiph/source/stm32f37x_rtc.c ****                   RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2359:../stdperiph/source/stm32f37x_rtc.c **** 
2360:../stdperiph/source/stm32f37x_rtc.c ****          (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2361:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the EXTI Line 19 in interrupt mode and select 
2362:../stdperiph/source/stm32f37x_rtc.c ****                   the rising edge sensitivity using the EXTI_Init() function.
2363:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using 
2364:../stdperiph/source/stm32f37x_rtc.c ****                   the NVIC_Init() function.
2365:../stdperiph/source/stm32f37x_rtc.c ****              (++) Configure the RTC to detect the RTC time-stamp event using the 
2366:../stdperiph/source/stm32f37x_rtc.c ****                   RTC_TimeStampCmd() function.
2367:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 43


2368:../stdperiph/source/stm32f37x_rtc.c **** @endverbatim
2369:../stdperiph/source/stm32f37x_rtc.c ****   * @{
2370:../stdperiph/source/stm32f37x_rtc.c ****   */
2371:../stdperiph/source/stm32f37x_rtc.c **** 
2372:../stdperiph/source/stm32f37x_rtc.c **** /**
2373:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2374:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2375:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be any combination of the following values:
2376:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2377:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2378:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2379:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2380:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2381:../stdperiph/source/stm32f37x_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2382:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2383:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2384:../stdperiph/source/stm32f37x_rtc.c ****   */
2385:../stdperiph/source/stm32f37x_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2386:../stdperiph/source/stm32f37x_rtc.c **** {
2387:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2388:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2389:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2390:../stdperiph/source/stm32f37x_rtc.c **** 
2391:../stdperiph/source/stm32f37x_rtc.c ****   /* Disable the write protection for RTC registers */
2392:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xCA;
2393:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
2394:../stdperiph/source/stm32f37x_rtc.c **** 
2395:../stdperiph/source/stm32f37x_rtc.c ****   if (NewState != DISABLE)
2396:../stdperiph/source/stm32f37x_rtc.c ****   {
2397:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2398:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2399:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2400:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2401:../stdperiph/source/stm32f37x_rtc.c ****   }
2402:../stdperiph/source/stm32f37x_rtc.c ****   else
2403:../stdperiph/source/stm32f37x_rtc.c ****   {
2404:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2405:../stdperiph/source/stm32f37x_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2406:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2407:../stdperiph/source/stm32f37x_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2408:../stdperiph/source/stm32f37x_rtc.c ****   }
2409:../stdperiph/source/stm32f37x_rtc.c ****   /* Enable the write protection for RTC registers */
2410:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0xFF; 
2411:../stdperiph/source/stm32f37x_rtc.c **** }
2412:../stdperiph/source/stm32f37x_rtc.c **** 
2413:../stdperiph/source/stm32f37x_rtc.c **** /**
2414:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2415:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2416:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
2417:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag
2418:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TAMP3F: Tamper 3 event flag
2419:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag   
2420:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2421:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2422:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2423:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2424:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 44


2425:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2426:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2427:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2428:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2429:../stdperiph/source/stm32f37x_rtc.c ****   *            @argRTC_FLAG_SHPF  : Shift operation pending flag.  
2430:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2431:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2432:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2433:../stdperiph/source/stm32f37x_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2434:../stdperiph/source/stm32f37x_rtc.c ****   */
2435:../stdperiph/source/stm32f37x_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2436:../stdperiph/source/stm32f37x_rtc.c **** {
2437:../stdperiph/source/stm32f37x_rtc.c ****   FlagStatus bitstatus = RESET;
2438:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
2439:../stdperiph/source/stm32f37x_rtc.c ****   
2440:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2441:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2442:../stdperiph/source/stm32f37x_rtc.c ****   
2443:../stdperiph/source/stm32f37x_rtc.c ****   /* Get all the flags */
2444:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2445:../stdperiph/source/stm32f37x_rtc.c ****   
2446:../stdperiph/source/stm32f37x_rtc.c ****   /* Return the status of the flag */
2447:../stdperiph/source/stm32f37x_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2448:../stdperiph/source/stm32f37x_rtc.c ****   {
2449:../stdperiph/source/stm32f37x_rtc.c ****     bitstatus = SET;
2450:../stdperiph/source/stm32f37x_rtc.c ****   }
2451:../stdperiph/source/stm32f37x_rtc.c ****   else
2452:../stdperiph/source/stm32f37x_rtc.c ****   {
2453:../stdperiph/source/stm32f37x_rtc.c ****     bitstatus = RESET;
2454:../stdperiph/source/stm32f37x_rtc.c ****   }
2455:../stdperiph/source/stm32f37x_rtc.c ****   return bitstatus;
2456:../stdperiph/source/stm32f37x_rtc.c **** }
2457:../stdperiph/source/stm32f37x_rtc.c **** 
2458:../stdperiph/source/stm32f37x_rtc.c **** /**
2459:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Clears the RTC's pending flags.
2460:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2461:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be any combination of the following values:
2462:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TAMP3F: Tamper 3 event flag
2463:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2464:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag 
2465:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2466:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2467:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2468:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2469:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2470:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2471:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2472:../stdperiph/source/stm32f37x_rtc.c ****   */
2473:../stdperiph/source/stm32f37x_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2474:../stdperiph/source/stm32f37x_rtc.c **** {
2475:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2476:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2477:../stdperiph/source/stm32f37x_rtc.c **** 
2478:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2479:../stdperiph/source/stm32f37x_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR &
2480:../stdperiph/source/stm32f37x_rtc.c **** }
2481:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 45


2482:../stdperiph/source/stm32f37x_rtc.c **** /**
2483:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2484:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2485:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be one of the following values:
2486:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2487:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2488:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2489:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2490:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper1 event interrupt 
2491:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper2 event interrupt 
2492:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TAMP3: Tamper3 event interrupt
2493:../stdperiph/source/stm32f37x_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2494:../stdperiph/source/stm32f37x_rtc.c ****   */
2495:../stdperiph/source/stm32f37x_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2496:../stdperiph/source/stm32f37x_rtc.c **** {
2497:../stdperiph/source/stm32f37x_rtc.c ****   ITStatus bitstatus = RESET;
2498:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2499:../stdperiph/source/stm32f37x_rtc.c ****  
2500:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2501:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2502:../stdperiph/source/stm32f37x_rtc.c ****   
2503:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2504:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2505:../stdperiph/source/stm32f37x_rtc.c ****  
2506:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the Interrupt enable Status */
2507:../stdperiph/source/stm32f37x_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
2508:../stdperiph/source/stm32f37x_rtc.c ****   
2509:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the Interrupt pending bit */
2510:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2511:../stdperiph/source/stm32f37x_rtc.c ****   
2512:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the status of the Interrupt */
2513:../stdperiph/source/stm32f37x_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2514:../stdperiph/source/stm32f37x_rtc.c ****   {
2515:../stdperiph/source/stm32f37x_rtc.c ****     bitstatus = SET;
2516:../stdperiph/source/stm32f37x_rtc.c ****   }
2517:../stdperiph/source/stm32f37x_rtc.c ****   else
2518:../stdperiph/source/stm32f37x_rtc.c ****   {
2519:../stdperiph/source/stm32f37x_rtc.c ****     bitstatus = RESET;
2520:../stdperiph/source/stm32f37x_rtc.c ****   }
2521:../stdperiph/source/stm32f37x_rtc.c ****   return bitstatus;
2522:../stdperiph/source/stm32f37x_rtc.c **** }
2523:../stdperiph/source/stm32f37x_rtc.c **** 
2524:../stdperiph/source/stm32f37x_rtc.c **** /**
2525:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2526:../stdperiph/source/stm32f37x_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2527:../stdperiph/source/stm32f37x_rtc.c ****   *          This parameter can be any combination of the following values:
2528:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2529:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2530:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2531:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2532:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper1 event interrupt
2533:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper2 event interrupt
2534:../stdperiph/source/stm32f37x_rtc.c ****   *            @arg RTC_IT_TAMP3: Tamper3 event interrupt 
2535:../stdperiph/source/stm32f37x_rtc.c ****   * @retval None
2536:../stdperiph/source/stm32f37x_rtc.c ****   */
2537:../stdperiph/source/stm32f37x_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2538:../stdperiph/source/stm32f37x_rtc.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 46


2539:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
2540:../stdperiph/source/stm32f37x_rtc.c **** 
2541:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
2542:../stdperiph/source/stm32f37x_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2543:../stdperiph/source/stm32f37x_rtc.c **** 
2544:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2545:../stdperiph/source/stm32f37x_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2546:../stdperiph/source/stm32f37x_rtc.c **** 
2547:../stdperiph/source/stm32f37x_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2548:../stdperiph/source/stm32f37x_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2549:../stdperiph/source/stm32f37x_rtc.c **** }
2550:../stdperiph/source/stm32f37x_rtc.c **** 
2551:../stdperiph/source/stm32f37x_rtc.c **** /**
2552:../stdperiph/source/stm32f37x_rtc.c ****   * @}
2553:../stdperiph/source/stm32f37x_rtc.c ****   */
2554:../stdperiph/source/stm32f37x_rtc.c **** 
2555:../stdperiph/source/stm32f37x_rtc.c **** /**
2556:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2557:../stdperiph/source/stm32f37x_rtc.c ****   * @param  Value: Byte to be converted.
2558:../stdperiph/source/stm32f37x_rtc.c ****   * @retval Converted byte
2559:../stdperiph/source/stm32f37x_rtc.c ****   */
2560:../stdperiph/source/stm32f37x_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2561:../stdperiph/source/stm32f37x_rtc.c **** {
  29              		.loc 1 2561 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
2562:../stdperiph/source/stm32f37x_rtc.c ****   uint8_t bcdhigh = 0;
  35              		.loc 1 2562 0
  36 0000 0023     		movs	r3, #0
2563:../stdperiph/source/stm32f37x_rtc.c ****   
2564:../stdperiph/source/stm32f37x_rtc.c ****   while (Value >= 10)
  37              		.loc 1 2564 0
  38 0002 03E0     		b	.L2
  39              	.LVL1:
  40              	.L3:
2565:../stdperiph/source/stm32f37x_rtc.c ****   {
2566:../stdperiph/source/stm32f37x_rtc.c ****     bcdhigh++;
  41              		.loc 1 2566 0
  42 0004 0133     		adds	r3, r3, #1
  43              	.LVL2:
  44 0006 DBB2     		uxtb	r3, r3
  45              	.LVL3:
2567:../stdperiph/source/stm32f37x_rtc.c ****     Value -= 10;
  46              		.loc 1 2567 0
  47 0008 0A38     		subs	r0, r0, #10
  48              	.LVL4:
  49 000a C0B2     		uxtb	r0, r0
  50              	.LVL5:
  51              	.L2:
2564:../stdperiph/source/stm32f37x_rtc.c ****   {
  52              		.loc 1 2564 0
  53 000c 0928     		cmp	r0, #9
  54 000e F9D8     		bhi	.L3
2568:../stdperiph/source/stm32f37x_rtc.c ****   }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 47


2569:../stdperiph/source/stm32f37x_rtc.c ****   
2570:../stdperiph/source/stm32f37x_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  55              		.loc 1 2570 0
  56 0010 1B01     		lsls	r3, r3, #4
  57              	.LVL6:
  58 0012 DBB2     		uxtb	r3, r3
2571:../stdperiph/source/stm32f37x_rtc.c **** }
  59              		.loc 1 2571 0
  60 0014 1843     		orrs	r0, r0, r3
  61              	.LVL7:
  62 0016 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE162:
  66              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  67              		.align	2
  68              		.thumb
  69              		.thumb_func
  71              	RTC_Bcd2ToByte:
  72              	.LFB163:
2572:../stdperiph/source/stm32f37x_rtc.c **** 
2573:../stdperiph/source/stm32f37x_rtc.c **** /**
2574:../stdperiph/source/stm32f37x_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2575:../stdperiph/source/stm32f37x_rtc.c ****   * @param  Value: BCD value to be converted.
2576:../stdperiph/source/stm32f37x_rtc.c ****   * @retval Converted word
2577:../stdperiph/source/stm32f37x_rtc.c ****   */
2578:../stdperiph/source/stm32f37x_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2579:../stdperiph/source/stm32f37x_rtc.c **** {
  73              		.loc 1 2579 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL8:
2580:../stdperiph/source/stm32f37x_rtc.c ****   uint8_t tmp = 0;
2581:../stdperiph/source/stm32f37x_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  79              		.loc 1 2581 0
  80 0000 0309     		lsrs	r3, r0, #4
  81 0002 03EB8303 		add	r3, r3, r3, lsl #2
  82 0006 5A00     		lsls	r2, r3, #1
  83 0008 D2B2     		uxtb	r2, r2
  84              	.LVL9:
2582:../stdperiph/source/stm32f37x_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  85              		.loc 1 2582 0
  86 000a 00F00F00 		and	r0, r0, #15
  87              	.LVL10:
  88 000e 1044     		add	r0, r0, r2
2583:../stdperiph/source/stm32f37x_rtc.c **** }
  89              		.loc 1 2583 0
  90 0010 C0B2     		uxtb	r0, r0
  91 0012 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE163:
  95              		.section	.text.RTC_StructInit,"ax",%progbits
  96              		.align	2
  97              		.global	RTC_StructInit
  98              		.thumb
  99              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 48


 101              	RTC_StructInit:
 102              	.LFB113:
 461:../stdperiph/source/stm32f37x_rtc.c ****   /* Initialize the RTC_HourFormat member */
 103              		.loc 1 461 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.LVL11:
 463:../stdperiph/source/stm32f37x_rtc.c ****     
 109              		.loc 1 463 0
 110 0000 0023     		movs	r3, #0
 111 0002 0360     		str	r3, [r0]
 466:../stdperiph/source/stm32f37x_rtc.c **** 
 112              		.loc 1 466 0
 113 0004 7F23     		movs	r3, #127
 114 0006 4360     		str	r3, [r0, #4]
 469:../stdperiph/source/stm32f37x_rtc.c **** }
 115              		.loc 1 469 0
 116 0008 FF23     		movs	r3, #255
 117 000a 8360     		str	r3, [r0, #8]
 118 000c 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE113:
 122 000e 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 123              		.align	2
 124              		.global	RTC_WriteProtectionCmd
 125              		.thumb
 126              		.thumb_func
 128              	RTC_WriteProtectionCmd:
 129              	.LFB114:
 483:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 130              		.loc 1 483 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135              	.LVL12:
 487:../stdperiph/source/stm32f37x_rtc.c ****   {
 136              		.loc 1 487 0
 137 0000 18B1     		cbz	r0, .L7
 490:../stdperiph/source/stm32f37x_rtc.c ****   }
 138              		.loc 1 490 0
 139 0002 FF22     		movs	r2, #255
 140 0004 044B     		ldr	r3, .L9
 141 0006 5A62     		str	r2, [r3, #36]
 142 0008 7047     		bx	lr
 143              	.L7:
 495:../stdperiph/source/stm32f37x_rtc.c ****     RTC->WPR = 0x53;    
 144              		.loc 1 495 0
 145 000a 034B     		ldr	r3, .L9
 146 000c CA22     		movs	r2, #202
 147 000e 5A62     		str	r2, [r3, #36]
 496:../stdperiph/source/stm32f37x_rtc.c ****   }
 148              		.loc 1 496 0
 149 0010 5322     		movs	r2, #83
 150 0012 5A62     		str	r2, [r3, #36]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 49


 151 0014 7047     		bx	lr
 152              	.L10:
 153 0016 00BF     		.align	2
 154              	.L9:
 155 0018 00280040 		.word	1073752064
 156              		.cfi_endproc
 157              	.LFE114:
 159              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 160              		.align	2
 161              		.global	RTC_EnterInitMode
 162              		.thumb
 163              		.thumb_func
 165              	RTC_EnterInitMode:
 166              	.LFB115:
 510:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t initcounter = 0x00;
 167              		.loc 1 510 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 8
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 82B0     		sub	sp, sp, #8
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 8
 511:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 175              		.loc 1 511 0
 176 0002 0023     		movs	r3, #0
 177 0004 0193     		str	r3, [sp, #4]
 178              	.LVL13:
 516:../stdperiph/source/stm32f37x_rtc.c ****   {
 179              		.loc 1 516 0
 180 0006 114B     		ldr	r3, .L18
 181 0008 DB68     		ldr	r3, [r3, #12]
 182 000a 13F0400F 		tst	r3, #64
 183 000e 17D1     		bne	.L15
 519:../stdperiph/source/stm32f37x_rtc.c ****     
 184              		.loc 1 519 0
 185 0010 4FF0FF32 		mov	r2, #-1
 186 0014 0D4B     		ldr	r3, .L18
 187 0016 DA60     		str	r2, [r3, #12]
 188              	.LVL14:
 189              	.L14:
 524:../stdperiph/source/stm32f37x_rtc.c ****       initcounter++;  
 190              		.loc 1 524 0 discriminator 2
 191 0018 0C4B     		ldr	r3, .L18
 192 001a DB68     		ldr	r3, [r3, #12]
 193 001c 03F04002 		and	r2, r3, #64
 194              	.LVL15:
 525:../stdperiph/source/stm32f37x_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 195              		.loc 1 525 0 discriminator 2
 196 0020 019B     		ldr	r3, [sp, #4]
 197 0022 0133     		adds	r3, r3, #1
 198 0024 0193     		str	r3, [sp, #4]
 526:../stdperiph/source/stm32f37x_rtc.c ****     
 199              		.loc 1 526 0 discriminator 2
 200 0026 019B     		ldr	r3, [sp, #4]
 201 0028 B3F5005F 		cmp	r3, #8192
 202 002c 01D0     		beq	.L13
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 50


 526:../stdperiph/source/stm32f37x_rtc.c ****     
 203              		.loc 1 526 0 is_stmt 0 discriminator 1
 204 002e 002A     		cmp	r2, #0
 205 0030 F2D0     		beq	.L14
 206              	.L13:
 528:../stdperiph/source/stm32f37x_rtc.c ****     {
 207              		.loc 1 528 0 is_stmt 1
 208 0032 064B     		ldr	r3, .L18
 209 0034 DB68     		ldr	r3, [r3, #12]
 210 0036 13F0400F 		tst	r3, #64
 211 003a 03D0     		beq	.L16
 530:../stdperiph/source/stm32f37x_rtc.c ****     }
 212              		.loc 1 530 0
 213 003c 0120     		movs	r0, #1
 214 003e 02E0     		b	.L12
 215              	.LVL16:
 216              	.L15:
 539:../stdperiph/source/stm32f37x_rtc.c ****   } 
 217              		.loc 1 539 0
 218 0040 0120     		movs	r0, #1
 219 0042 00E0     		b	.L12
 220              	.LVL17:
 221              	.L16:
 534:../stdperiph/source/stm32f37x_rtc.c ****     }        
 222              		.loc 1 534 0
 223 0044 0020     		movs	r0, #0
 224              	.LVL18:
 225              	.L12:
 543:../stdperiph/source/stm32f37x_rtc.c **** 
 226              		.loc 1 543 0
 227 0046 02B0     		add	sp, sp, #8
 228              	.LCFI1:
 229              		.cfi_def_cfa_offset 0
 230              		@ sp needed
 231 0048 7047     		bx	lr
 232              	.L19:
 233 004a 00BF     		.align	2
 234              	.L18:
 235 004c 00280040 		.word	1073752064
 236              		.cfi_endproc
 237              	.LFE115:
 239              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 240              		.align	2
 241              		.global	RTC_ExitInitMode
 242              		.thumb
 243              		.thumb_func
 245              	RTC_ExitInitMode:
 246              	.LFB116:
 555:../stdperiph/source/stm32f37x_rtc.c ****   /* Exit Initialization mode */
 247              		.loc 1 555 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 557:../stdperiph/source/stm32f37x_rtc.c **** }
 252              		.loc 1 557 0
 253 0000 024A     		ldr	r2, .L21
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 51


 254 0002 D368     		ldr	r3, [r2, #12]
 255 0004 23F08003 		bic	r3, r3, #128
 256 0008 D360     		str	r3, [r2, #12]
 257 000a 7047     		bx	lr
 258              	.L22:
 259              		.align	2
 260              	.L21:
 261 000c 00280040 		.word	1073752064
 262              		.cfi_endproc
 263              	.LFE116:
 265              		.section	.text.RTC_Init,"ax",%progbits
 266              		.align	2
 267              		.global	RTC_Init
 268              		.thumb
 269              		.thumb_func
 271              	RTC_Init:
 272              	.LFB112:
 415:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 273              		.loc 1 415 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              	.LVL19:
 278 0000 10B5     		push	{r4, lr}
 279              	.LCFI2:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 4, -8
 282              		.cfi_offset 14, -4
 283 0002 0446     		mov	r4, r0
 284              	.LVL20:
 424:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 285              		.loc 1 424 0
 286 0004 104B     		ldr	r3, .L27
 287 0006 CA22     		movs	r2, #202
 288 0008 5A62     		str	r2, [r3, #36]
 425:../stdperiph/source/stm32f37x_rtc.c **** 
 289              		.loc 1 425 0
 290 000a 5322     		movs	r2, #83
 291 000c 5A62     		str	r2, [r3, #36]
 428:../stdperiph/source/stm32f37x_rtc.c ****   {
 292              		.loc 1 428 0
 293 000e FFF7FEFF 		bl	RTC_EnterInitMode
 294              	.LVL21:
 295 0012 98B1     		cbz	r0, .L25
 435:../stdperiph/source/stm32f37x_rtc.c ****     /* Set RTC_CR register */
 296              		.loc 1 435 0
 297 0014 0C4B     		ldr	r3, .L27
 298 0016 9A68     		ldr	r2, [r3, #8]
 299 0018 22F04002 		bic	r2, r2, #64
 300 001c 9A60     		str	r2, [r3, #8]
 437:../stdperiph/source/stm32f37x_rtc.c ****   
 301              		.loc 1 437 0
 302 001e 9968     		ldr	r1, [r3, #8]
 303 0020 2268     		ldr	r2, [r4]
 304 0022 0A43     		orrs	r2, r2, r1
 305 0024 9A60     		str	r2, [r3, #8]
 440:../stdperiph/source/stm32f37x_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 52


 306              		.loc 1 440 0
 307 0026 A268     		ldr	r2, [r4, #8]
 308 0028 1A61     		str	r2, [r3, #16]
 441:../stdperiph/source/stm32f37x_rtc.c **** 
 309              		.loc 1 441 0
 310 002a 1A69     		ldr	r2, [r3, #16]
 311 002c 6168     		ldr	r1, [r4, #4]
 312 002e 42EA0142 		orr	r2, r2, r1, lsl #16
 313 0032 1A61     		str	r2, [r3, #16]
 444:../stdperiph/source/stm32f37x_rtc.c **** 
 314              		.loc 1 444 0
 315 0034 FFF7FEFF 		bl	RTC_ExitInitMode
 316              	.LVL22:
 446:../stdperiph/source/stm32f37x_rtc.c ****   }
 317              		.loc 1 446 0
 318 0038 0120     		movs	r0, #1
 319 003a 00E0     		b	.L24
 320              	.LVL23:
 321              	.L25:
 430:../stdperiph/source/stm32f37x_rtc.c ****   } 
 322              		.loc 1 430 0
 323 003c 0020     		movs	r0, #0
 324              	.LVL24:
 325              	.L24:
 449:../stdperiph/source/stm32f37x_rtc.c ****   
 326              		.loc 1 449 0
 327 003e FF22     		movs	r2, #255
 328 0040 014B     		ldr	r3, .L27
 329 0042 5A62     		str	r2, [r3, #36]
 452:../stdperiph/source/stm32f37x_rtc.c **** 
 330              		.loc 1 452 0
 331 0044 10BD     		pop	{r4, pc}
 332              	.LVL25:
 333              	.L28:
 334 0046 00BF     		.align	2
 335              	.L27:
 336 0048 00280040 		.word	1073752064
 337              		.cfi_endproc
 338              	.LFE112:
 340              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 341              		.align	2
 342              		.global	RTC_WaitForSynchro
 343              		.thumb
 344              		.thumb_func
 346              	RTC_WaitForSynchro:
 347              	.LFB117:
 577:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t synchrocounter = 0;
 348              		.loc 1 577 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 82B0     		sub	sp, sp, #8
 354              	.LCFI3:
 355              		.cfi_def_cfa_offset 8
 578:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 356              		.loc 1 578 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 53


 357 0002 0023     		movs	r3, #0
 358 0004 0193     		str	r3, [sp, #4]
 359              	.LVL26:
 583:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 360              		.loc 1 583 0
 361 0006 114B     		ldr	r3, .L35
 362 0008 CA22     		movs	r2, #202
 363 000a 5A62     		str	r2, [r3, #36]
 584:../stdperiph/source/stm32f37x_rtc.c ****     
 364              		.loc 1 584 0
 365 000c 5322     		movs	r2, #83
 366 000e 5A62     		str	r2, [r3, #36]
 587:../stdperiph/source/stm32f37x_rtc.c ****     
 367              		.loc 1 587 0
 368 0010 DA68     		ldr	r2, [r3, #12]
 369 0012 22F0A002 		bic	r2, r2, #160
 370 0016 DA60     		str	r2, [r3, #12]
 371              	.LVL27:
 372              	.L31:
 592:../stdperiph/source/stm32f37x_rtc.c ****     synchrocounter++;  
 373              		.loc 1 592 0 discriminator 2
 374 0018 0C4B     		ldr	r3, .L35
 375 001a DB68     		ldr	r3, [r3, #12]
 376 001c 03F02002 		and	r2, r3, #32
 377              	.LVL28:
 593:../stdperiph/source/stm32f37x_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 378              		.loc 1 593 0 discriminator 2
 379 0020 019B     		ldr	r3, [sp, #4]
 380 0022 0133     		adds	r3, r3, #1
 381 0024 0193     		str	r3, [sp, #4]
 594:../stdperiph/source/stm32f37x_rtc.c ****     
 382              		.loc 1 594 0 discriminator 2
 383 0026 019B     		ldr	r3, [sp, #4]
 384 0028 B3F5804F 		cmp	r3, #16384
 385 002c 01D0     		beq	.L30
 594:../stdperiph/source/stm32f37x_rtc.c ****     
 386              		.loc 1 594 0 is_stmt 0 discriminator 1
 387 002e 002A     		cmp	r2, #0
 388 0030 F2D0     		beq	.L31
 389              	.L30:
 596:../stdperiph/source/stm32f37x_rtc.c ****   {
 390              		.loc 1 596 0 is_stmt 1
 391 0032 064B     		ldr	r3, .L35
 392 0034 DB68     		ldr	r3, [r3, #12]
 393 0036 13F0200F 		tst	r3, #32
 394 003a 01D0     		beq	.L33
 598:../stdperiph/source/stm32f37x_rtc.c ****   }
 395              		.loc 1 598 0
 396 003c 0120     		movs	r0, #1
 397 003e 00E0     		b	.L32
 398              	.L33:
 602:../stdperiph/source/stm32f37x_rtc.c ****   }
 399              		.loc 1 602 0
 400 0040 0020     		movs	r0, #0
 401              	.L32:
 402              	.LVL29:
 606:../stdperiph/source/stm32f37x_rtc.c ****     
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 54


 403              		.loc 1 606 0
 404 0042 FF22     		movs	r2, #255
 405              	.LVL30:
 406 0044 014B     		ldr	r3, .L35
 407 0046 5A62     		str	r2, [r3, #36]
 609:../stdperiph/source/stm32f37x_rtc.c **** 
 408              		.loc 1 609 0
 409 0048 02B0     		add	sp, sp, #8
 410              	.LCFI4:
 411              		.cfi_def_cfa_offset 0
 412              		@ sp needed
 413 004a 7047     		bx	lr
 414              	.L36:
 415              		.align	2
 416              	.L35:
 417 004c 00280040 		.word	1073752064
 418              		.cfi_endproc
 419              	.LFE117:
 421              		.section	.text.RTC_DeInit,"ax",%progbits
 422              		.align	2
 423              		.global	RTC_DeInit
 424              		.thumb
 425              		.thumb_func
 427              	RTC_DeInit:
 428              	.LFB111:
 332:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 429              		.loc 1 332 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 8
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433 0000 00B5     		push	{lr}
 434              	.LCFI5:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 14, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              	.LCFI6:
 439              		.cfi_def_cfa_offset 16
 333:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t wutwfstatus = 0x00;
 440              		.loc 1 333 0
 441 0004 0023     		movs	r3, #0
 442 0006 0193     		str	r3, [sp, #4]
 443              	.LVL31:
 338:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 444              		.loc 1 338 0
 445 0008 224B     		ldr	r3, .L45
 446 000a CA22     		movs	r2, #202
 447 000c 5A62     		str	r2, [r3, #36]
 339:../stdperiph/source/stm32f37x_rtc.c **** 
 448              		.loc 1 339 0
 449 000e 5322     		movs	r2, #83
 450 0010 5A62     		str	r2, [r3, #36]
 342:../stdperiph/source/stm32f37x_rtc.c ****   {
 451              		.loc 1 342 0
 452 0012 FFF7FEFF 		bl	RTC_EnterInitMode
 453              	.LVL32:
 454 0016 0028     		cmp	r0, #0
 455 0018 30D0     		beq	.L41
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 55


 349:../stdperiph/source/stm32f37x_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 456              		.loc 1 349 0
 457 001a 1E4B     		ldr	r3, .L45
 458 001c 0022     		movs	r2, #0
 459 001e 1A60     		str	r2, [r3]
 350:../stdperiph/source/stm32f37x_rtc.c ****     
 460              		.loc 1 350 0
 461 0020 42F20112 		movw	r2, #8449
 462 0024 5A60     		str	r2, [r3, #4]
 353:../stdperiph/source/stm32f37x_rtc.c ****   
 463              		.loc 1 353 0
 464 0026 9A68     		ldr	r2, [r3, #8]
 465 0028 02F00702 		and	r2, r2, #7
 466 002c 9A60     		str	r2, [r3, #8]
 467              	.LVL33:
 468              	.L40:
 358:../stdperiph/source/stm32f37x_rtc.c ****       wutcounter++;  
 469              		.loc 1 358 0 discriminator 2
 470 002e 194B     		ldr	r3, .L45
 471 0030 DB68     		ldr	r3, [r3, #12]
 472 0032 03F00402 		and	r2, r3, #4
 473              	.LVL34:
 359:../stdperiph/source/stm32f37x_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 474              		.loc 1 359 0 discriminator 2
 475 0036 019B     		ldr	r3, [sp, #4]
 476 0038 0133     		adds	r3, r3, #1
 477 003a 0193     		str	r3, [sp, #4]
 360:../stdperiph/source/stm32f37x_rtc.c ****     
 478              		.loc 1 360 0 discriminator 2
 479 003c 019B     		ldr	r3, [sp, #4]
 480 003e B3F5005F 		cmp	r3, #8192
 481 0042 01D0     		beq	.L39
 360:../stdperiph/source/stm32f37x_rtc.c ****     
 482              		.loc 1 360 0 is_stmt 0 discriminator 1
 483 0044 002A     		cmp	r2, #0
 484 0046 F2D0     		beq	.L40
 485              	.L39:
 362:../stdperiph/source/stm32f37x_rtc.c ****     {
 486              		.loc 1 362 0 is_stmt 1
 487 0048 124B     		ldr	r3, .L45
 488 004a DB68     		ldr	r3, [r3, #12]
 489 004c 13F0040F 		tst	r3, #4
 490 0050 16D0     		beq	.L42
 369:../stdperiph/source/stm32f37x_rtc.c ****       RTC->WUTR      = (uint32_t)0x0000FFFF;
 491              		.loc 1 369 0
 492 0052 104B     		ldr	r3, .L45
 493 0054 9A68     		ldr	r2, [r3, #8]
 494              	.LVL35:
 495 0056 0022     		movs	r2, #0
 496 0058 9A60     		str	r2, [r3, #8]
 370:../stdperiph/source/stm32f37x_rtc.c ****       RTC->PRER      = (uint32_t)0x007F00FF;
 497              		.loc 1 370 0
 498 005a 4FF6FF71 		movw	r1, #65535
 499 005e 5961     		str	r1, [r3, #20]
 371:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMAR    = (uint32_t)0x00000000;
 500              		.loc 1 371 0
 501 0060 0D49     		ldr	r1, .L45+4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 56


 502 0062 1961     		str	r1, [r3, #16]
 372:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMBR    = (uint32_t)0x00000000;
 503              		.loc 1 372 0
 504 0064 DA61     		str	r2, [r3, #28]
 373:../stdperiph/source/stm32f37x_rtc.c ****       RTC->SHIFTR    = (uint32_t)0x00000000;
 505              		.loc 1 373 0
 506 0066 1A62     		str	r2, [r3, #32]
 374:../stdperiph/source/stm32f37x_rtc.c ****       RTC->CALR       = (uint32_t)0x00000000;
 507              		.loc 1 374 0
 508 0068 DA62     		str	r2, [r3, #44]
 375:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMASSR  = (uint32_t)0x00000000;
 509              		.loc 1 375 0
 510 006a DA63     		str	r2, [r3, #60]
 376:../stdperiph/source/stm32f37x_rtc.c ****       RTC->ALRMBSSR  = (uint32_t)0x00000000;
 511              		.loc 1 376 0
 512 006c 5A64     		str	r2, [r3, #68]
 377:../stdperiph/source/stm32f37x_rtc.c **** 
 513              		.loc 1 377 0
 514 006e 9A64     		str	r2, [r3, #72]
 380:../stdperiph/source/stm32f37x_rtc.c ****       
 515              		.loc 1 380 0
 516 0070 DA60     		str	r2, [r3, #12]
 383:../stdperiph/source/stm32f37x_rtc.c ****       
 517              		.loc 1 383 0
 518 0072 1A64     		str	r2, [r3, #64]
 386:../stdperiph/source/stm32f37x_rtc.c ****       {
 519              		.loc 1 386 0
 520 0074 FFF7FEFF 		bl	RTC_WaitForSynchro
 521              	.LVL36:
 522 0078 20B9     		cbnz	r0, .L43
 523 007a 04E0     		b	.L38
 524              	.LVL37:
 525              	.L41:
 344:../stdperiph/source/stm32f37x_rtc.c ****   }  
 526              		.loc 1 344 0
 527 007c 0020     		movs	r0, #0
 528 007e 02E0     		b	.L38
 529              	.LVL38:
 530              	.L42:
 364:../stdperiph/source/stm32f37x_rtc.c ****     }
 531              		.loc 1 364 0
 532 0080 0020     		movs	r0, #0
 533 0082 00E0     		b	.L38
 534              	.LVL39:
 535              	.L43:
 392:../stdperiph/source/stm32f37x_rtc.c ****       }
 536              		.loc 1 392 0
 537 0084 0120     		movs	r0, #1
 538              	.L38:
 539              	.LVL40:
 398:../stdperiph/source/stm32f37x_rtc.c ****   
 540              		.loc 1 398 0
 541 0086 FF22     		movs	r2, #255
 542 0088 024B     		ldr	r3, .L45
 543 008a 5A62     		str	r2, [r3, #36]
 401:../stdperiph/source/stm32f37x_rtc.c **** 
 544              		.loc 1 401 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 57


 545 008c 03B0     		add	sp, sp, #12
 546              	.LCFI7:
 547              		.cfi_def_cfa_offset 4
 548              		@ sp needed
 549 008e 5DF804FB 		ldr	pc, [sp], #4
 550              	.L46:
 551 0092 00BF     		.align	2
 552              	.L45:
 553 0094 00280040 		.word	1073752064
 554 0098 FF007F00 		.word	8323327
 555              		.cfi_endproc
 556              	.LFE111:
 558              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 559              		.align	2
 560              		.global	RTC_RefClockCmd
 561              		.thumb
 562              		.thumb_func
 564              	RTC_RefClockCmd:
 565              	.LFB118:
 620:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 566              		.loc 1 620 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              	.LVL41:
 571 0000 10B5     		push	{r4, lr}
 572              	.LCFI8:
 573              		.cfi_def_cfa_offset 8
 574              		.cfi_offset 4, -8
 575              		.cfi_offset 14, -4
 576 0002 0446     		mov	r4, r0
 577              	.LVL42:
 627:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 578              		.loc 1 627 0
 579 0004 0E4B     		ldr	r3, .L53
 580 0006 CA22     		movs	r2, #202
 581 0008 5A62     		str	r2, [r3, #36]
 628:../stdperiph/source/stm32f37x_rtc.c **** 
 582              		.loc 1 628 0
 583 000a 5322     		movs	r2, #83
 584 000c 5A62     		str	r2, [r3, #36]
 631:../stdperiph/source/stm32f37x_rtc.c ****   {
 585              		.loc 1 631 0
 586 000e FFF7FEFF 		bl	RTC_EnterInitMode
 587              	.LVL43:
 588 0012 78B1     		cbz	r0, .L51
 637:../stdperiph/source/stm32f37x_rtc.c ****     {
 589              		.loc 1 637 0
 590 0014 2CB1     		cbz	r4, .L49
 640:../stdperiph/source/stm32f37x_rtc.c ****     }
 591              		.loc 1 640 0
 592 0016 0A4A     		ldr	r2, .L53
 593 0018 9368     		ldr	r3, [r2, #8]
 594 001a 43F01003 		orr	r3, r3, #16
 595 001e 9360     		str	r3, [r2, #8]
 596 0020 04E0     		b	.L50
 597              	.L49:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 58


 645:../stdperiph/source/stm32f37x_rtc.c ****     }
 598              		.loc 1 645 0
 599 0022 074A     		ldr	r2, .L53
 600 0024 9368     		ldr	r3, [r2, #8]
 601 0026 23F01003 		bic	r3, r3, #16
 602 002a 9360     		str	r3, [r2, #8]
 603              	.L50:
 648:../stdperiph/source/stm32f37x_rtc.c **** 
 604              		.loc 1 648 0
 605 002c FFF7FEFF 		bl	RTC_ExitInitMode
 606              	.LVL44:
 650:../stdperiph/source/stm32f37x_rtc.c ****   }
 607              		.loc 1 650 0
 608 0030 0120     		movs	r0, #1
 609 0032 00E0     		b	.L48
 610              	.LVL45:
 611              	.L51:
 633:../stdperiph/source/stm32f37x_rtc.c ****   }
 612              		.loc 1 633 0
 613 0034 0020     		movs	r0, #0
 614              	.LVL46:
 615              	.L48:
 654:../stdperiph/source/stm32f37x_rtc.c **** 
 616              		.loc 1 654 0
 617 0036 FF22     		movs	r2, #255
 618 0038 014B     		ldr	r3, .L53
 619 003a 5A62     		str	r2, [r3, #36]
 657:../stdperiph/source/stm32f37x_rtc.c **** 
 620              		.loc 1 657 0
 621 003c 10BD     		pop	{r4, pc}
 622              	.L54:
 623 003e 00BF     		.align	2
 624              	.L53:
 625 0040 00280040 		.word	1073752064
 626              		.cfi_endproc
 627              	.LFE118:
 629              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 630              		.align	2
 631              		.global	RTC_BypassShadowCmd
 632              		.thumb
 633              		.thumb_func
 635              	RTC_BypassShadowCmd:
 636              	.LFB119:
 668:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 637              		.loc 1 668 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL47:
 673:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 643              		.loc 1 673 0
 644 0000 0A4B     		ldr	r3, .L58
 645 0002 CA22     		movs	r2, #202
 646 0004 5A62     		str	r2, [r3, #36]
 674:../stdperiph/source/stm32f37x_rtc.c ****   
 647              		.loc 1 674 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 59


 648 0006 5322     		movs	r2, #83
 649 0008 5A62     		str	r2, [r3, #36]
 676:../stdperiph/source/stm32f37x_rtc.c ****   {
 650              		.loc 1 676 0
 651 000a 28B1     		cbz	r0, .L56
 679:../stdperiph/source/stm32f37x_rtc.c ****   }
 652              		.loc 1 679 0
 653 000c 1A46     		mov	r2, r3
 654 000e 9B68     		ldr	r3, [r3, #8]
 655 0010 43F02003 		orr	r3, r3, #32
 656 0014 9360     		str	r3, [r2, #8]
 657 0016 04E0     		b	.L57
 658              	.L56:
 684:../stdperiph/source/stm32f37x_rtc.c ****   }
 659              		.loc 1 684 0
 660 0018 044A     		ldr	r2, .L58
 661 001a 9368     		ldr	r3, [r2, #8]
 662 001c 03F0DF03 		and	r3, r3, #223
 663 0020 9360     		str	r3, [r2, #8]
 664              	.L57:
 688:../stdperiph/source/stm32f37x_rtc.c **** }
 665              		.loc 1 688 0
 666 0022 FF22     		movs	r2, #255
 667 0024 014B     		ldr	r3, .L58
 668 0026 5A62     		str	r2, [r3, #36]
 669 0028 7047     		bx	lr
 670              	.L59:
 671 002a 00BF     		.align	2
 672              	.L58:
 673 002c 00280040 		.word	1073752064
 674              		.cfi_endproc
 675              	.LFE119:
 677              		.section	.text.RTC_SetTime,"ax",%progbits
 678              		.align	2
 679              		.global	RTC_SetTime
 680              		.thumb
 681              		.thumb_func
 683              	RTC_SetTime:
 684              	.LFB120:
 722:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 685              		.loc 1 722 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              	.LVL48:
 690 0000 38B5     		push	{r3, r4, r5, lr}
 691              	.LCFI9:
 692              		.cfi_def_cfa_offset 16
 693              		.cfi_offset 3, -16
 694              		.cfi_offset 4, -12
 695              		.cfi_offset 5, -8
 696              		.cfi_offset 14, -4
 697 0002 0D46     		mov	r5, r1
 698              	.LVL49:
 729:../stdperiph/source/stm32f37x_rtc.c ****   {
 699              		.loc 1 729 0
 700 0004 0346     		mov	r3, r0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 60


 701 0006 38B9     		cbnz	r0, .L61
 731:../stdperiph/source/stm32f37x_rtc.c ****     {
 702              		.loc 1 731 0
 703 0008 254A     		ldr	r2, .L70
 704 000a 9268     		ldr	r2, [r2, #8]
 705 000c 12F0400F 		tst	r2, #64
 706 0010 09D1     		bne	.L62
 738:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 707              		.loc 1 738 0
 708 0012 0022     		movs	r2, #0
 709 0014 CA70     		strb	r2, [r1, #3]
 710 0016 06E0     		b	.L62
 711              	.L61:
 746:../stdperiph/source/stm32f37x_rtc.c ****     {
 712              		.loc 1 746 0
 713 0018 214A     		ldr	r2, .L70
 714 001a 9268     		ldr	r2, [r2, #8]
 715 001c 12F0400F 		tst	r2, #64
 716 0020 01D1     		bne	.L62
 754:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 717              		.loc 1 754 0
 718 0022 0022     		movs	r2, #0
 719 0024 CA70     		strb	r2, [r1, #3]
 720              	.L62:
 762:../stdperiph/source/stm32f37x_rtc.c ****   {
 721              		.loc 1 762 0
 722 0026 53B1     		cbz	r3, .L63
 764:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 723              		.loc 1 764 0
 724 0028 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 765:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 725              		.loc 1 765 0
 726 002a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 727 002c 1B02     		lsls	r3, r3, #8
 764:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 728              		.loc 1 764 0
 729 002e 43EA0444 		orr	r4, r3, r4, lsl #16
 766:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 730              		.loc 1 766 0
 731 0032 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 765:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 732              		.loc 1 765 0
 733 0034 2343     		orrs	r3, r3, r4
 767:../stdperiph/source/stm32f37x_rtc.c ****   }  
 734              		.loc 1 767 0
 735 0036 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 736              	.LVL50:
 764:../stdperiph/source/stm32f37x_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 737              		.loc 1 764 0
 738 0038 43EA0044 		orr	r4, r3, r0, lsl #16
 739              	.LVL51:
 740 003c 0FE0     		b	.L64
 741              	.LVL52:
 742              	.L63:
 771:../stdperiph/source/stm32f37x_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 743              		.loc 1 771 0
 744 003e 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 61


 745              	.LVL53:
 746 0040 FFF7FEFF 		bl	RTC_ByteToBcd2
 747              	.LVL54:
 748 0044 0404     		lsls	r4, r0, #16
 772:../stdperiph/source/stm32f37x_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 749              		.loc 1 772 0
 750 0046 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 751 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 752              	.LVL55:
 771:../stdperiph/source/stm32f37x_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 753              		.loc 1 771 0
 754 004c 44EA0024 		orr	r4, r4, r0, lsl #8
 773:../stdperiph/source/stm32f37x_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 755              		.loc 1 773 0
 756 0050 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 757 0052 FFF7FEFF 		bl	RTC_ByteToBcd2
 758              	.LVL56:
 772:../stdperiph/source/stm32f37x_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 759              		.loc 1 772 0
 760 0056 2043     		orrs	r0, r0, r4
 774:../stdperiph/source/stm32f37x_rtc.c ****   }  
 761              		.loc 1 774 0
 762 0058 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 771:../stdperiph/source/stm32f37x_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 763              		.loc 1 771 0
 764 005a 40EA0444 		orr	r4, r0, r4, lsl #16
 765              	.LVL57:
 766              	.L64:
 778:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 767              		.loc 1 778 0
 768 005e 104B     		ldr	r3, .L70
 769 0060 CA22     		movs	r2, #202
 770 0062 5A62     		str	r2, [r3, #36]
 779:../stdperiph/source/stm32f37x_rtc.c **** 
 771              		.loc 1 779 0
 772 0064 5322     		movs	r2, #83
 773 0066 5A62     		str	r2, [r3, #36]
 782:../stdperiph/source/stm32f37x_rtc.c ****   {
 774              		.loc 1 782 0
 775 0068 FFF7FEFF 		bl	RTC_EnterInitMode
 776              	.LVL58:
 777 006c 78B1     		cbz	r0, .L66
 789:../stdperiph/source/stm32f37x_rtc.c **** 
 778              		.loc 1 789 0
 779 006e 04F07F30 		and	r0, r4, #2139062143
 780 0072 20F0FE40 		bic	r0, r0, #2130706432
 781 0076 0A4C     		ldr	r4, .L70
 782              	.LVL59:
 783 0078 2060     		str	r0, [r4]
 792:../stdperiph/source/stm32f37x_rtc.c **** 
 784              		.loc 1 792 0
 785 007a FFF7FEFF 		bl	RTC_ExitInitMode
 786              	.LVL60:
 795:../stdperiph/source/stm32f37x_rtc.c ****     {
 787              		.loc 1 795 0
 788 007e A368     		ldr	r3, [r4, #8]
 789 0080 13F0200F 		tst	r3, #32
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 62


 790 0084 05D1     		bne	.L67
 797:../stdperiph/source/stm32f37x_rtc.c ****       {
 791              		.loc 1 797 0
 792 0086 FFF7FEFF 		bl	RTC_WaitForSynchro
 793              	.LVL61:
 794 008a 20B9     		cbnz	r0, .L68
 795 008c 04E0     		b	.L65
 796              	.LVL62:
 797              	.L66:
 784:../stdperiph/source/stm32f37x_rtc.c ****   } 
 798              		.loc 1 784 0
 799 008e 0020     		movs	r0, #0
 800 0090 02E0     		b	.L65
 801              	.LVL63:
 802              	.L67:
 808:../stdperiph/source/stm32f37x_rtc.c ****     }
 803              		.loc 1 808 0
 804 0092 0120     		movs	r0, #1
 805 0094 00E0     		b	.L65
 806              	.L68:
 803:../stdperiph/source/stm32f37x_rtc.c ****       }
 807              		.loc 1 803 0
 808 0096 0120     		movs	r0, #1
 809              	.L65:
 810              	.LVL64:
 813:../stdperiph/source/stm32f37x_rtc.c ****     
 811              		.loc 1 813 0
 812 0098 FF22     		movs	r2, #255
 813 009a 014B     		ldr	r3, .L70
 814 009c 5A62     		str	r2, [r3, #36]
 816:../stdperiph/source/stm32f37x_rtc.c **** 
 815              		.loc 1 816 0
 816 009e 38BD     		pop	{r3, r4, r5, pc}
 817              	.LVL65:
 818              	.L71:
 819              		.align	2
 820              	.L70:
 821 00a0 00280040 		.word	1073752064
 822              		.cfi_endproc
 823              	.LFE120:
 825              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 826              		.align	2
 827              		.global	RTC_TimeStructInit
 828              		.thumb
 829              		.thumb_func
 831              	RTC_TimeStructInit:
 832              	.LFB121:
 826:../stdperiph/source/stm32f37x_rtc.c ****   /* Time = 00h:00min:00sec */
 833              		.loc 1 826 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 838              	.LVL66:
 828:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 839              		.loc 1 828 0
 840 0000 0023     		movs	r3, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 63


 841 0002 C370     		strb	r3, [r0, #3]
 829:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 842              		.loc 1 829 0
 843 0004 0370     		strb	r3, [r0]
 830:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 844              		.loc 1 830 0
 845 0006 4370     		strb	r3, [r0, #1]
 831:../stdperiph/source/stm32f37x_rtc.c **** }
 846              		.loc 1 831 0
 847 0008 8370     		strb	r3, [r0, #2]
 848 000a 7047     		bx	lr
 849              		.cfi_endproc
 850              	.LFE121:
 852              		.section	.text.RTC_GetTime,"ax",%progbits
 853              		.align	2
 854              		.global	RTC_GetTime
 855              		.thumb
 856              		.thumb_func
 858              	RTC_GetTime:
 859              	.LFB122:
 845:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 860              		.loc 1 845 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 0
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              	.LVL67:
 865 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 866              	.LCFI10:
 867              		.cfi_def_cfa_offset 24
 868              		.cfi_offset 3, -24
 869              		.cfi_offset 4, -20
 870              		.cfi_offset 5, -16
 871              		.cfi_offset 6, -12
 872              		.cfi_offset 7, -8
 873              		.cfi_offset 14, -4
 874              	.LVL68:
 852:../stdperiph/source/stm32f37x_rtc.c ****   
 875              		.loc 1 852 0
 876 0002 114B     		ldr	r3, .L76
 877 0004 1B68     		ldr	r3, [r3]
 878 0006 03F07F33 		and	r3, r3, #2139062143
 879 000a 23F0FE43 		bic	r3, r3, #2130706432
 880              	.LVL69:
 855:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 881              		.loc 1 855 0
 882 000e 1A0C     		lsrs	r2, r3, #16
 883 0010 02F03F07 		and	r7, r2, #63
 884 0014 0F70     		strb	r7, [r1]
 856:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 885              		.loc 1 856 0
 886 0016 C3F30626 		ubfx	r6, r3, #8, #7
 887 001a 4E70     		strb	r6, [r1, #1]
 857:../stdperiph/source/stm32f37x_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 888              		.loc 1 857 0
 889 001c 03F07F04 		and	r4, r3, #127
 890 0020 8C70     		strb	r4, [r1, #2]
 858:../stdperiph/source/stm32f37x_rtc.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 64


 891              		.loc 1 858 0
 892 0022 02F04002 		and	r2, r2, #64
 893 0026 CA70     		strb	r2, [r1, #3]
 861:../stdperiph/source/stm32f37x_rtc.c ****   {
 894              		.loc 1 861 0
 895 0028 60B9     		cbnz	r0, .L73
 896 002a 0D46     		mov	r5, r1
 864:../stdperiph/source/stm32f37x_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 897              		.loc 1 864 0
 898 002c 3846     		mov	r0, r7
 899              	.LVL70:
 900 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 901              	.LVL71:
 902 0032 2870     		strb	r0, [r5]
 865:../stdperiph/source/stm32f37x_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 903              		.loc 1 865 0
 904 0034 3046     		mov	r0, r6
 905 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 906              	.LVL72:
 907 003a 6870     		strb	r0, [r5, #1]
 866:../stdperiph/source/stm32f37x_rtc.c ****   }
 908              		.loc 1 866 0
 909 003c 2046     		mov	r0, r4
 910 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 911              	.LVL73:
 912 0042 A870     		strb	r0, [r5, #2]
 913              	.LVL74:
 914              	.L73:
 915 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 916              	.L77:
 917 0046 00BF     		.align	2
 918              	.L76:
 919 0048 00280040 		.word	1073752064
 920              		.cfi_endproc
 921              	.LFE122:
 923              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 924              		.align	2
 925              		.global	RTC_GetSubSecond
 926              		.thumb
 927              		.thumb_func
 929              	RTC_GetSubSecond:
 930              	.LFB123:
 878:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 931              		.loc 1 878 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935              		@ link register save eliminated.
 936              	.LVL75:
 882:../stdperiph/source/stm32f37x_rtc.c ****   
 937              		.loc 1 882 0
 938 0000 014B     		ldr	r3, .L79
 939 0002 986A     		ldr	r0, [r3, #40]
 940              	.LVL76:
 885:../stdperiph/source/stm32f37x_rtc.c ****   
 941              		.loc 1 885 0
 942 0004 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 65


 888:../stdperiph/source/stm32f37x_rtc.c **** 
 943              		.loc 1 888 0
 944 0006 7047     		bx	lr
 945              	.L80:
 946              		.align	2
 947              	.L79:
 948 0008 00280040 		.word	1073752064
 949              		.cfi_endproc
 950              	.LFE123:
 952              		.section	.text.RTC_SetDate,"ax",%progbits
 953              		.align	2
 954              		.global	RTC_SetDate
 955              		.thumb
 956              		.thumb_func
 958              	RTC_SetDate:
 959              	.LFB124:
 903:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 960              		.loc 1 903 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              	.LVL77:
 965 0000 38B5     		push	{r3, r4, r5, lr}
 966              	.LCFI11:
 967              		.cfi_def_cfa_offset 16
 968              		.cfi_offset 3, -16
 969              		.cfi_offset 4, -12
 970              		.cfi_offset 5, -8
 971              		.cfi_offset 14, -4
 972 0002 0D46     		mov	r5, r1
 973              	.LVL78:
 910:../stdperiph/source/stm32f37x_rtc.c ****   {
 974              		.loc 1 910 0
 975 0004 0246     		mov	r2, r0
 976 0006 38B9     		cbnz	r0, .L82
 910:../stdperiph/source/stm32f37x_rtc.c ****   {
 977              		.loc 1 910 0 is_stmt 0 discriminator 1
 978 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 979 000a 13F0100F 		tst	r3, #16
 980 000e 03D0     		beq	.L82
 912:../stdperiph/source/stm32f37x_rtc.c ****   }  
 981              		.loc 1 912 0 is_stmt 1
 982 0010 23F01003 		bic	r3, r3, #16
 983 0014 0A33     		adds	r3, r3, #10
 984 0016 4B70     		strb	r3, [r1, #1]
 985              	.L82:
 931:../stdperiph/source/stm32f37x_rtc.c ****   {
 986              		.loc 1 931 0
 987 0018 52B1     		cbz	r2, .L83
 933:../stdperiph/source/stm32f37x_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 988              		.loc 1 933 0
 989 001a EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 934:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 990              		.loc 1 934 0
 991 001c 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 992 001e 1B02     		lsls	r3, r3, #8
 933:../stdperiph/source/stm32f37x_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 66


 993              		.loc 1 933 0
 994 0020 43EA0444 		orr	r4, r3, r4, lsl #16
 935:../stdperiph/source/stm32f37x_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 995              		.loc 1 935 0
 996 0024 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 934:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 997              		.loc 1 934 0
 998 0026 2343     		orrs	r3, r3, r4
 936:../stdperiph/source/stm32f37x_rtc.c ****   }  
 999              		.loc 1 936 0
 1000 0028 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1001              	.LVL79:
 933:../stdperiph/source/stm32f37x_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1002              		.loc 1 933 0
 1003 002a 43EA4034 		orr	r4, r3, r0, lsl #13
 1004              	.LVL80:
 1005 002e 0FE0     		b	.L84
 1006              	.LVL81:
 1007              	.L83:
 940:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1008              		.loc 1 940 0
 1009 0030 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1010              	.LVL82:
 1011 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1012              	.LVL83:
 1013 0036 0404     		lsls	r4, r0, #16
 941:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1014              		.loc 1 941 0
 1015 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1016 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1017              	.LVL84:
 940:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1018              		.loc 1 940 0
 1019 003e 44EA0024 		orr	r4, r4, r0, lsl #8
 942:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1020              		.loc 1 942 0
 1021 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1022 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1023              	.LVL85:
 941:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1024              		.loc 1 941 0
 1025 0048 2043     		orrs	r0, r0, r4
 943:../stdperiph/source/stm32f37x_rtc.c ****   }
 1026              		.loc 1 943 0
 1027 004a 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 940:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1028              		.loc 1 940 0
 1029 004c 40EA4434 		orr	r4, r0, r4, lsl #13
 1030              	.LVL86:
 1031              	.L84:
 947:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1032              		.loc 1 947 0
 1033 0050 104B     		ldr	r3, .L90
 1034 0052 CA22     		movs	r2, #202
 1035 0054 5A62     		str	r2, [r3, #36]
 948:../stdperiph/source/stm32f37x_rtc.c **** 
 1036              		.loc 1 948 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 67


 1037 0056 5322     		movs	r2, #83
 1038 0058 5A62     		str	r2, [r3, #36]
 951:../stdperiph/source/stm32f37x_rtc.c ****   {
 1039              		.loc 1 951 0
 1040 005a FFF7FEFF 		bl	RTC_EnterInitMode
 1041              	.LVL87:
 1042 005e 78B1     		cbz	r0, .L86
 958:../stdperiph/source/stm32f37x_rtc.c **** 
 1043              		.loc 1 958 0
 1044 0060 24F07F40 		bic	r0, r4, #-16777216
 1045 0064 20F0C000 		bic	r0, r0, #192
 1046 0068 0A4C     		ldr	r4, .L90
 1047              	.LVL88:
 1048 006a 6060     		str	r0, [r4, #4]
 961:../stdperiph/source/stm32f37x_rtc.c **** 
 1049              		.loc 1 961 0
 1050 006c FFF7FEFF 		bl	RTC_ExitInitMode
 1051              	.LVL89:
 964:../stdperiph/source/stm32f37x_rtc.c ****     {
 1052              		.loc 1 964 0
 1053 0070 A368     		ldr	r3, [r4, #8]
 1054 0072 13F0200F 		tst	r3, #32
 1055 0076 05D1     		bne	.L87
 966:../stdperiph/source/stm32f37x_rtc.c ****       {
 1056              		.loc 1 966 0
 1057 0078 FFF7FEFF 		bl	RTC_WaitForSynchro
 1058              	.LVL90:
 1059 007c 20B9     		cbnz	r0, .L88
 1060 007e 04E0     		b	.L85
 1061              	.LVL91:
 1062              	.L86:
 953:../stdperiph/source/stm32f37x_rtc.c ****   } 
 1063              		.loc 1 953 0
 1064 0080 0020     		movs	r0, #0
 1065 0082 02E0     		b	.L85
 1066              	.LVL92:
 1067              	.L87:
 977:../stdperiph/source/stm32f37x_rtc.c ****     }
 1068              		.loc 1 977 0
 1069 0084 0120     		movs	r0, #1
 1070 0086 00E0     		b	.L85
 1071              	.L88:
 972:../stdperiph/source/stm32f37x_rtc.c ****       }
 1072              		.loc 1 972 0
 1073 0088 0120     		movs	r0, #1
 1074              	.L85:
 1075              	.LVL93:
 981:../stdperiph/source/stm32f37x_rtc.c ****   
 1076              		.loc 1 981 0
 1077 008a FF22     		movs	r2, #255
 1078 008c 014B     		ldr	r3, .L90
 1079 008e 5A62     		str	r2, [r3, #36]
 984:../stdperiph/source/stm32f37x_rtc.c **** 
 1080              		.loc 1 984 0
 1081 0090 38BD     		pop	{r3, r4, r5, pc}
 1082              	.LVL94:
 1083              	.L91:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 68


 1084 0092 00BF     		.align	2
 1085              	.L90:
 1086 0094 00280040 		.word	1073752064
 1087              		.cfi_endproc
 1088              	.LFE124:
 1090              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1091              		.align	2
 1092              		.global	RTC_DateStructInit
 1093              		.thumb
 1094              		.thumb_func
 1096              	RTC_DateStructInit:
 1097              	.LFB125:
 994:../stdperiph/source/stm32f37x_rtc.c ****   /* Monday, January 01 xx00 */
 1098              		.loc 1 994 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              		@ link register save eliminated.
 1103              	.LVL95:
 996:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1104              		.loc 1 996 0
 1105 0000 0123     		movs	r3, #1
 1106 0002 0370     		strb	r3, [r0]
 997:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1107              		.loc 1 997 0
 1108 0004 8370     		strb	r3, [r0, #2]
 998:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1109              		.loc 1 998 0
 1110 0006 4370     		strb	r3, [r0, #1]
 999:../stdperiph/source/stm32f37x_rtc.c **** }
 1111              		.loc 1 999 0
 1112 0008 0023     		movs	r3, #0
 1113 000a C370     		strb	r3, [r0, #3]
 1114 000c 7047     		bx	lr
 1115              		.cfi_endproc
 1116              	.LFE125:
 1118 000e 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1119              		.align	2
 1120              		.global	RTC_GetDate
 1121              		.thumb
 1122              		.thumb_func
 1124              	RTC_GetDate:
 1125              	.LFB126:
1013:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 1126              		.loc 1 1013 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              	.LVL96:
 1131 0000 70B5     		push	{r4, r5, r6, lr}
 1132              	.LCFI12:
 1133              		.cfi_def_cfa_offset 16
 1134              		.cfi_offset 4, -16
 1135              		.cfi_offset 5, -12
 1136              		.cfi_offset 6, -8
 1137              		.cfi_offset 14, -4
 1138              	.LVL97:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 69


1020:../stdperiph/source/stm32f37x_rtc.c **** 
 1139              		.loc 1 1020 0
 1140 0002 104B     		ldr	r3, .L96
 1141 0004 5B68     		ldr	r3, [r3, #4]
 1142 0006 23F07F43 		bic	r3, r3, #-16777216
 1143 000a 23F0C003 		bic	r3, r3, #192
 1144              	.LVL98:
1023:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1145              		.loc 1 1023 0
 1146 000e 1A0C     		lsrs	r2, r3, #16
 1147 0010 CA70     		strb	r2, [r1, #3]
1024:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1148              		.loc 1 1024 0
 1149 0012 C3F30426 		ubfx	r6, r3, #8, #5
 1150 0016 4E70     		strb	r6, [r1, #1]
1025:../stdperiph/source/stm32f37x_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1151              		.loc 1 1025 0
 1152 0018 03F03F05 		and	r5, r3, #63
 1153 001c 8D70     		strb	r5, [r1, #2]
1026:../stdperiph/source/stm32f37x_rtc.c **** 
 1154              		.loc 1 1026 0
 1155 001e C3F34233 		ubfx	r3, r3, #13, #3
 1156              	.LVL99:
 1157 0022 0B70     		strb	r3, [r1]
1029:../stdperiph/source/stm32f37x_rtc.c ****   {
 1158              		.loc 1 1029 0
 1159 0024 60B9     		cbnz	r0, .L93
 1160 0026 0C46     		mov	r4, r1
1032:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1161              		.loc 1 1032 0
 1162 0028 1046     		mov	r0, r2
 1163              	.LVL100:
 1164 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1165              	.LVL101:
 1166 002e E070     		strb	r0, [r4, #3]
1033:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1167              		.loc 1 1033 0
 1168 0030 3046     		mov	r0, r6
 1169 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1170              	.LVL102:
 1171 0036 6070     		strb	r0, [r4, #1]
1034:../stdperiph/source/stm32f37x_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1172              		.loc 1 1034 0
 1173 0038 2846     		mov	r0, r5
 1174 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1175              	.LVL103:
 1176 003e A070     		strb	r0, [r4, #2]
 1177              	.LVL104:
 1178              	.L93:
 1179 0040 70BD     		pop	{r4, r5, r6, pc}
 1180              	.L97:
 1181 0042 00BF     		.align	2
 1182              	.L96:
 1183 0044 00280040 		.word	1073752064
 1184              		.cfi_endproc
 1185              	.LFE126:
 1187              		.section	.text.RTC_SetAlarm,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 70


 1188              		.align	2
 1189              		.global	RTC_SetAlarm
 1190              		.thumb
 1191              		.thumb_func
 1193              	RTC_SetAlarm:
 1194              	.LFB127:
1074:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 1195              		.loc 1 1074 0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 0
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              	.LVL105:
 1200 0000 70B5     		push	{r4, r5, r6, lr}
 1201              	.LCFI13:
 1202              		.cfi_def_cfa_offset 16
 1203              		.cfi_offset 4, -16
 1204              		.cfi_offset 5, -12
 1205              		.cfi_offset 6, -8
 1206              		.cfi_offset 14, -4
 1207 0002 0E46     		mov	r6, r1
 1208 0004 1446     		mov	r4, r2
 1209              	.LVL106:
1083:../stdperiph/source/stm32f37x_rtc.c ****   {
 1210              		.loc 1 1083 0
 1211 0006 0346     		mov	r3, r0
 1212 0008 38B9     		cbnz	r0, .L99
1085:../stdperiph/source/stm32f37x_rtc.c ****     {
 1213              		.loc 1 1085 0
 1214 000a 254A     		ldr	r2, .L108
 1215              	.LVL107:
 1216 000c 9268     		ldr	r2, [r2, #8]
 1217 000e 12F0400F 		tst	r2, #64
 1218 0012 09D1     		bne	.L101
1092:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1219              		.loc 1 1092 0
 1220 0014 0022     		movs	r2, #0
 1221 0016 E270     		strb	r2, [r4, #3]
 1222 0018 06E0     		b	.L101
 1223              	.LVL108:
 1224              	.L99:
1109:../stdperiph/source/stm32f37x_rtc.c ****     {
 1225              		.loc 1 1109 0
 1226 001a 214A     		ldr	r2, .L108
 1227              	.LVL109:
 1228 001c 9268     		ldr	r2, [r2, #8]
 1229 001e 12F0400F 		tst	r2, #64
 1230 0022 01D1     		bne	.L101
1117:../stdperiph/source/stm32f37x_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1231              		.loc 1 1117 0
 1232 0024 0022     		movs	r2, #0
 1233 0026 E270     		strb	r2, [r4, #3]
 1234              	.L101:
1137:../stdperiph/source/stm32f37x_rtc.c ****   {
 1235              		.loc 1 1137 0
 1236 0028 8BB1     		cbz	r3, .L103
1139:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1237              		.loc 1 1139 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 71


 1238 002a 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
1140:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1239              		.loc 1 1140 0
 1240 002c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1241 002e 1B02     		lsls	r3, r3, #8
1139:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1242              		.loc 1 1139 0
 1243 0030 43EA0243 		orr	r3, r3, r2, lsl #16
1141:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1244              		.loc 1 1141 0
 1245 0034 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
1140:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1246              		.loc 1 1140 0
 1247 0036 1343     		orrs	r3, r3, r2
1142:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1248              		.loc 1 1142 0
 1249 0038 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
1141:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1250              		.loc 1 1141 0
 1251 003a 43EA0243 		orr	r3, r3, r2, lsl #16
1143:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1252              		.loc 1 1143 0
 1253 003e 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1254              	.LVL110:
1142:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1255              		.loc 1 1142 0
 1256 0040 43EA0063 		orr	r3, r3, r0, lsl #24
1144:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1257              		.loc 1 1144 0
 1258 0044 A068     		ldr	r0, [r4, #8]
1143:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1259              		.loc 1 1143 0
 1260 0046 1843     		orrs	r0, r0, r3
1145:../stdperiph/source/stm32f37x_rtc.c ****   }  
 1261              		.loc 1 1145 0
 1262 0048 6268     		ldr	r2, [r4, #4]
1139:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1263              		.loc 1 1139 0
 1264 004a 1043     		orrs	r0, r0, r2
 1265              	.LVL111:
 1266 004c 18E0     		b	.L104
 1267              	.LVL112:
 1268              	.L103:
1149:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1269              		.loc 1 1149 0
 1270 004e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1271              	.LVL113:
 1272 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1273              	.LVL114:
 1274 0054 0504     		lsls	r5, r0, #16
1150:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1275              		.loc 1 1150 0
 1276 0056 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1277 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1278              	.LVL115:
1149:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1279              		.loc 1 1149 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 72


 1280 005c 45EA0025 		orr	r5, r5, r0, lsl #8
1151:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1281              		.loc 1 1151 0
 1282 0060 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 1283 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1284              	.LVL116:
1150:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1285              		.loc 1 1150 0
 1286 0066 0543     		orrs	r5, r5, r0
1152:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1287              		.loc 1 1152 0
 1288 0068 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
1151:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1289              		.loc 1 1151 0
 1290 006a 45EA0045 		orr	r5, r5, r0, lsl #16
1153:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1291              		.loc 1 1153 0
 1292 006e 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1293 0070 FFF7FEFF 		bl	RTC_ByteToBcd2
 1294              	.LVL117:
1152:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1295              		.loc 1 1152 0
 1296 0074 45EA0060 		orr	r0, r5, r0, lsl #24
1154:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1297              		.loc 1 1154 0
 1298 0078 A568     		ldr	r5, [r4, #8]
1153:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1299              		.loc 1 1153 0
 1300 007a 2843     		orrs	r0, r0, r5
1155:../stdperiph/source/stm32f37x_rtc.c ****   } 
 1301              		.loc 1 1155 0
 1302 007c 6368     		ldr	r3, [r4, #4]
1149:../stdperiph/source/stm32f37x_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1303              		.loc 1 1149 0
 1304 007e 1843     		orrs	r0, r0, r3
 1305              	.LVL118:
 1306              	.L104:
1159:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1307              		.loc 1 1159 0
 1308 0080 074B     		ldr	r3, .L108
 1309 0082 CA22     		movs	r2, #202
 1310 0084 5A62     		str	r2, [r3, #36]
1160:../stdperiph/source/stm32f37x_rtc.c **** 
 1311              		.loc 1 1160 0
 1312 0086 5322     		movs	r2, #83
 1313 0088 5A62     		str	r2, [r3, #36]
1163:../stdperiph/source/stm32f37x_rtc.c ****   {
 1314              		.loc 1 1163 0
 1315 008a B6F5807F 		cmp	r6, #256
 1316 008e 01D1     		bne	.L105
1165:../stdperiph/source/stm32f37x_rtc.c ****   }
 1317              		.loc 1 1165 0
 1318 0090 D861     		str	r0, [r3, #28]
 1319 0092 01E0     		b	.L106
 1320              	.L105:
1169:../stdperiph/source/stm32f37x_rtc.c ****   }
 1321              		.loc 1 1169 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 73


 1322 0094 024B     		ldr	r3, .L108
 1323 0096 1862     		str	r0, [r3, #32]
 1324              	.L106:
1173:../stdperiph/source/stm32f37x_rtc.c **** }
 1325              		.loc 1 1173 0
 1326 0098 FF22     		movs	r2, #255
 1327 009a 014B     		ldr	r3, .L108
 1328 009c 5A62     		str	r2, [r3, #36]
 1329 009e 70BD     		pop	{r4, r5, r6, pc}
 1330              	.LVL119:
 1331              	.L109:
 1332              		.align	2
 1333              	.L108:
 1334 00a0 00280040 		.word	1073752064
 1335              		.cfi_endproc
 1336              	.LFE127:
 1338              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1339              		.align	2
 1340              		.global	RTC_AlarmStructInit
 1341              		.thumb
 1342              		.thumb_func
 1344              	RTC_AlarmStructInit:
 1345              	.LFB128:
1185:../stdperiph/source/stm32f37x_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1346              		.loc 1 1185 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351              	.LVL120:
1187:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1352              		.loc 1 1187 0
 1353 0000 0023     		movs	r3, #0
 1354 0002 C370     		strb	r3, [r0, #3]
1188:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1355              		.loc 1 1188 0
 1356 0004 0370     		strb	r3, [r0]
1189:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1357              		.loc 1 1189 0
 1358 0006 4370     		strb	r3, [r0, #1]
1190:../stdperiph/source/stm32f37x_rtc.c **** 
 1359              		.loc 1 1190 0
 1360 0008 8370     		strb	r3, [r0, #2]
1193:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1361              		.loc 1 1193 0
 1362 000a 8360     		str	r3, [r0, #8]
1194:../stdperiph/source/stm32f37x_rtc.c **** 
 1363              		.loc 1 1194 0
 1364 000c 0122     		movs	r2, #1
 1365 000e 0273     		strb	r2, [r0, #12]
1197:../stdperiph/source/stm32f37x_rtc.c **** }
 1366              		.loc 1 1197 0
 1367 0010 4360     		str	r3, [r0, #4]
 1368 0012 7047     		bx	lr
 1369              		.cfi_endproc
 1370              	.LFE128:
 1372              		.section	.text.RTC_GetAlarm,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 74


 1373              		.align	2
 1374              		.global	RTC_GetAlarm
 1375              		.thumb
 1376              		.thumb_func
 1378              	RTC_GetAlarm:
 1379              	.LFB129:
1215:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 1380              		.loc 1 1215 0
 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 0
 1383              		@ frame_needed = 0, uses_anonymous_args = 0
 1384              	.LVL121:
 1385 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1386              	.LCFI14:
 1387              		.cfi_def_cfa_offset 24
 1388              		.cfi_offset 3, -24
 1389              		.cfi_offset 4, -20
 1390              		.cfi_offset 5, -16
 1391              		.cfi_offset 6, -12
 1392              		.cfi_offset 7, -8
 1393              		.cfi_offset 14, -4
 1394              	.LVL122:
1223:../stdperiph/source/stm32f37x_rtc.c ****   {
 1395              		.loc 1 1223 0
 1396 0002 B1F5807F 		cmp	r1, #256
 1397 0006 02D1     		bne	.L112
1225:../stdperiph/source/stm32f37x_rtc.c ****   }
 1398              		.loc 1 1225 0
 1399 0008 174B     		ldr	r3, .L116
 1400 000a DB69     		ldr	r3, [r3, #28]
 1401              	.LVL123:
 1402 000c 01E0     		b	.L113
 1403              	.LVL124:
 1404              	.L112:
1229:../stdperiph/source/stm32f37x_rtc.c ****   }
 1405              		.loc 1 1229 0
 1406 000e 164B     		ldr	r3, .L116
 1407 0010 1B6A     		ldr	r3, [r3, #32]
 1408              	.LVL125:
 1409              	.L113:
1233:../stdperiph/source/stm32f37x_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1410              		.loc 1 1233 0
 1411 0012 C3F30741 		ubfx	r1, r3, #16, #8
 1412              	.LVL126:
 1413 0016 01F03F0E 		and	lr, r1, #63
 1414 001a 82F800E0 		strb	lr, [r2]
1235:../stdperiph/source/stm32f37x_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1415              		.loc 1 1235 0
 1416 001e C3F30626 		ubfx	r6, r3, #8, #7
 1417 0022 5670     		strb	r6, [r2, #1]
1237:../stdperiph/source/stm32f37x_rtc.c ****                                                      RTC_ALRMAR_SU));
 1418              		.loc 1 1237 0
 1419 0024 03F07F05 		and	r5, r3, #127
 1420 0028 9570     		strb	r5, [r2, #2]
1239:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1421              		.loc 1 1239 0
 1422 002a 01F04001 		and	r1, r1, #64
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 75


 1423 002e D170     		strb	r1, [r2, #3]
1240:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1424              		.loc 1 1240 0
 1425 0030 C3F30567 		ubfx	r7, r3, #24, #6
 1426 0034 1773     		strb	r7, [r2, #12]
1241:../stdperiph/source/stm32f37x_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1427              		.loc 1 1241 0
 1428 0036 03F08041 		and	r1, r3, #1073741824
 1429 003a 9160     		str	r1, [r2, #8]
1242:../stdperiph/source/stm32f37x_rtc.c **** 
 1430              		.loc 1 1242 0
 1431 003c 03F08033 		and	r3, r3, #-2139062144
 1432              	.LVL127:
 1433 0040 5360     		str	r3, [r2, #4]
1244:../stdperiph/source/stm32f37x_rtc.c ****   {
 1434              		.loc 1 1244 0
 1435 0042 80B9     		cbnz	r0, .L111
 1436 0044 1446     		mov	r4, r2
1246:../stdperiph/source/stm32f37x_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1437              		.loc 1 1246 0
 1438 0046 7046     		mov	r0, lr
 1439              	.LVL128:
 1440 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1441              	.LVL129:
 1442 004c 2070     		strb	r0, [r4]
1248:../stdperiph/source/stm32f37x_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1443              		.loc 1 1248 0
 1444 004e 3046     		mov	r0, r6
 1445 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1446              	.LVL130:
 1447 0054 6070     		strb	r0, [r4, #1]
1250:../stdperiph/source/stm32f37x_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1448              		.loc 1 1250 0
 1449 0056 2846     		mov	r0, r5
 1450 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1451              	.LVL131:
 1452 005c A070     		strb	r0, [r4, #2]
1252:../stdperiph/source/stm32f37x_rtc.c ****   }  
 1453              		.loc 1 1252 0
 1454 005e 3846     		mov	r0, r7
 1455 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1456              	.LVL132:
 1457 0064 2073     		strb	r0, [r4, #12]
 1458              	.LVL133:
 1459              	.L111:
 1460 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1461              	.L117:
 1462              		.align	2
 1463              	.L116:
 1464 0068 00280040 		.word	1073752064
 1465              		.cfi_endproc
 1466              	.LFE129:
 1468              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1469              		.align	2
 1470              		.global	RTC_AlarmCmd
 1471              		.thumb
 1472              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 76


 1474              	RTC_AlarmCmd:
 1475              	.LFB130:
1269:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1476              		.loc 1 1269 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 8
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
 1480              		@ link register save eliminated.
 1481              	.LVL134:
 1482 0000 82B0     		sub	sp, sp, #8
 1483              	.LCFI15:
 1484              		.cfi_def_cfa_offset 8
1270:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t alarmstatus = 0x00;
 1485              		.loc 1 1270 0
 1486 0002 0023     		movs	r3, #0
 1487 0004 0193     		str	r3, [sp, #4]
 1488              	.LVL135:
1279:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1489              		.loc 1 1279 0
 1490 0006 154B     		ldr	r3, .L125
 1491 0008 CA22     		movs	r2, #202
 1492 000a 5A62     		str	r2, [r3, #36]
1280:../stdperiph/source/stm32f37x_rtc.c **** 
 1493              		.loc 1 1280 0
 1494 000c 5322     		movs	r2, #83
 1495 000e 5A62     		str	r2, [r3, #36]
1283:../stdperiph/source/stm32f37x_rtc.c ****   {
 1496              		.loc 1 1283 0
 1497 0010 29B1     		cbz	r1, .L119
1285:../stdperiph/source/stm32f37x_rtc.c **** 
 1498              		.loc 1 1285 0
 1499 0012 1A46     		mov	r2, r3
 1500 0014 9B68     		ldr	r3, [r3, #8]
 1501 0016 1843     		orrs	r0, r0, r3
 1502              	.LVL136:
 1503 0018 9060     		str	r0, [r2, #8]
 1504              	.LVL137:
1287:../stdperiph/source/stm32f37x_rtc.c ****   }
 1505              		.loc 1 1287 0
 1506 001a 0120     		movs	r0, #1
 1507 001c 19E0     		b	.L120
 1508              	.LVL138:
 1509              	.L119:
1292:../stdperiph/source/stm32f37x_rtc.c ****    
 1510              		.loc 1 1292 0
 1511 001e 0F4A     		ldr	r2, .L125
 1512 0020 9368     		ldr	r3, [r2, #8]
 1513 0022 23EA0003 		bic	r3, r3, r0
 1514 0026 9360     		str	r3, [r2, #8]
 1515              	.LVL139:
 1516              	.L122:
1297:../stdperiph/source/stm32f37x_rtc.c ****       alarmcounter++;  
 1517              		.loc 1 1297 0 discriminator 2
 1518 0028 0C4B     		ldr	r3, .L125
 1519 002a DB68     		ldr	r3, [r3, #12]
 1520 002c 010A     		lsrs	r1, r0, #8
 1521 002e 03EA0102 		and	r2, r3, r1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 77


 1522              	.LVL140:
1298:../stdperiph/source/stm32f37x_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1523              		.loc 1 1298 0 discriminator 2
 1524 0032 019B     		ldr	r3, [sp, #4]
 1525 0034 0133     		adds	r3, r3, #1
 1526 0036 0193     		str	r3, [sp, #4]
1299:../stdperiph/source/stm32f37x_rtc.c ****     
 1527              		.loc 1 1299 0 discriminator 2
 1528 0038 019B     		ldr	r3, [sp, #4]
 1529 003a B3F5005F 		cmp	r3, #8192
 1530 003e 01D0     		beq	.L121
1299:../stdperiph/source/stm32f37x_rtc.c ****     
 1531              		.loc 1 1299 0 is_stmt 0 discriminator 1
 1532 0040 002A     		cmp	r2, #0
 1533 0042 F1D0     		beq	.L122
 1534              	.L121:
1301:../stdperiph/source/stm32f37x_rtc.c ****     {
 1535              		.loc 1 1301 0 is_stmt 1
 1536 0044 054B     		ldr	r3, .L125
 1537 0046 DB68     		ldr	r3, [r3, #12]
 1538 0048 1942     		tst	r1, r3
 1539 004a 01D1     		bne	.L123
1303:../stdperiph/source/stm32f37x_rtc.c ****     } 
 1540              		.loc 1 1303 0
 1541 004c 0020     		movs	r0, #0
 1542              	.LVL141:
 1543 004e 00E0     		b	.L120
 1544              	.LVL142:
 1545              	.L123:
1307:../stdperiph/source/stm32f37x_rtc.c ****     }        
 1546              		.loc 1 1307 0
 1547 0050 0120     		movs	r0, #1
 1548              	.LVL143:
 1549              	.L120:
1312:../stdperiph/source/stm32f37x_rtc.c ****   
 1550              		.loc 1 1312 0
 1551 0052 FF22     		movs	r2, #255
 1552 0054 014B     		ldr	r3, .L125
 1553 0056 5A62     		str	r2, [r3, #36]
1315:../stdperiph/source/stm32f37x_rtc.c **** 
 1554              		.loc 1 1315 0
 1555 0058 02B0     		add	sp, sp, #8
 1556              	.LCFI16:
 1557              		.cfi_def_cfa_offset 0
 1558              		@ sp needed
 1559 005a 7047     		bx	lr
 1560              	.L126:
 1561              		.align	2
 1562              	.L125:
 1563 005c 00280040 		.word	1073752064
 1564              		.cfi_endproc
 1565              	.LFE130:
 1567              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1568              		.align	2
 1569              		.global	RTC_AlarmSubSecondConfig
 1570              		.thumb
 1571              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 78


 1573              	RTC_AlarmSubSecondConfig:
 1574              	.LFB131:
1362:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 1575              		.loc 1 1362 0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 0
 1578              		@ frame_needed = 0, uses_anonymous_args = 0
 1579              		@ link register save eliminated.
 1580              	.LVL144:
 1581 0000 10B4     		push	{r4}
 1582              	.LCFI17:
 1583              		.cfi_def_cfa_offset 4
 1584              		.cfi_offset 4, -4
 1585              	.LVL145:
1371:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1586              		.loc 1 1371 0
 1587 0002 094B     		ldr	r3, .L131
 1588 0004 CA24     		movs	r4, #202
 1589 0006 5C62     		str	r4, [r3, #36]
1372:../stdperiph/source/stm32f37x_rtc.c ****   
 1590              		.loc 1 1372 0
 1591 0008 5324     		movs	r4, #83
 1592 000a 5C62     		str	r4, [r3, #36]
1375:../stdperiph/source/stm32f37x_rtc.c ****   
 1593              		.loc 1 1375 0
 1594 000c 0A43     		orrs	r2, r2, r1
 1595              	.LVL146:
1377:../stdperiph/source/stm32f37x_rtc.c ****   {
 1596              		.loc 1 1377 0
 1597 000e B0F5807F 		cmp	r0, #256
 1598 0012 01D1     		bne	.L128
1380:../stdperiph/source/stm32f37x_rtc.c ****   }
 1599              		.loc 1 1380 0
 1600 0014 5A64     		str	r2, [r3, #68]
 1601 0016 01E0     		b	.L129
 1602              	.L128:
1385:../stdperiph/source/stm32f37x_rtc.c ****   }
 1603              		.loc 1 1385 0
 1604 0018 034B     		ldr	r3, .L131
 1605 001a 9A64     		str	r2, [r3, #72]
 1606              	.L129:
1389:../stdperiph/source/stm32f37x_rtc.c **** 
 1607              		.loc 1 1389 0
 1608 001c FF22     		movs	r2, #255
 1609              	.LVL147:
 1610 001e 024B     		ldr	r3, .L131
 1611 0020 5A62     		str	r2, [r3, #36]
1391:../stdperiph/source/stm32f37x_rtc.c **** 
 1612              		.loc 1 1391 0
 1613 0022 5DF8044B 		ldr	r4, [sp], #4
 1614              	.LCFI18:
 1615              		.cfi_restore 4
 1616              		.cfi_def_cfa_offset 0
 1617 0026 7047     		bx	lr
 1618              	.L132:
 1619              		.align	2
 1620              	.L131:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 79


 1621 0028 00280040 		.word	1073752064
 1622              		.cfi_endproc
 1623              	.LFE131:
 1625              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1626              		.align	2
 1627              		.global	RTC_GetAlarmSubSecond
 1628              		.thumb
 1629              		.thumb_func
 1631              	RTC_GetAlarmSubSecond:
 1632              	.LFB132:
1403:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 1633              		.loc 1 1403 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 0
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              		@ link register save eliminated.
 1638              	.LVL148:
1407:../stdperiph/source/stm32f37x_rtc.c ****   {
 1639              		.loc 1 1407 0
 1640 0000 B0F5807F 		cmp	r0, #256
 1641 0004 04D1     		bne	.L134
1409:../stdperiph/source/stm32f37x_rtc.c ****   }
 1642              		.loc 1 1409 0
 1643 0006 054B     		ldr	r3, .L136
 1644 0008 586C     		ldr	r0, [r3, #68]
 1645              	.LVL149:
 1646 000a C0F30E00 		ubfx	r0, r0, #0, #15
 1647              	.LVL150:
 1648 000e 7047     		bx	lr
 1649              	.LVL151:
 1650              	.L134:
1413:../stdperiph/source/stm32f37x_rtc.c ****   } 
 1651              		.loc 1 1413 0
 1652 0010 024B     		ldr	r3, .L136
 1653 0012 986C     		ldr	r0, [r3, #72]
 1654              	.LVL152:
 1655 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 1656              	.LVL153:
1417:../stdperiph/source/stm32f37x_rtc.c **** 
 1657              		.loc 1 1417 0
 1658 0018 7047     		bx	lr
 1659              	.L137:
 1660 001a 00BF     		.align	2
 1661              	.L136:
 1662 001c 00280040 		.word	1073752064
 1663              		.cfi_endproc
 1664              	.LFE132:
 1666              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1667              		.align	2
 1668              		.global	RTC_WakeUpClockConfig
 1669              		.thumb
 1670              		.thumb_func
 1672              	RTC_WakeUpClockConfig:
 1673              	.LFB133:
1452:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 1674              		.loc 1 1452 0
 1675              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 80


 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
 1679              	.LVL154:
1457:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1680              		.loc 1 1457 0
 1681 0000 074B     		ldr	r3, .L139
 1682 0002 CA22     		movs	r2, #202
 1683 0004 5A62     		str	r2, [r3, #36]
1458:../stdperiph/source/stm32f37x_rtc.c **** 
 1684              		.loc 1 1458 0
 1685 0006 5322     		movs	r2, #83
 1686 0008 5A62     		str	r2, [r3, #36]
1461:../stdperiph/source/stm32f37x_rtc.c **** 
 1687              		.loc 1 1461 0
 1688 000a 9A68     		ldr	r2, [r3, #8]
 1689 000c 22F00702 		bic	r2, r2, #7
 1690 0010 9A60     		str	r2, [r3, #8]
1464:../stdperiph/source/stm32f37x_rtc.c ****   
 1691              		.loc 1 1464 0
 1692 0012 9A68     		ldr	r2, [r3, #8]
 1693 0014 1043     		orrs	r0, r0, r2
 1694              	.LVL155:
 1695 0016 9860     		str	r0, [r3, #8]
1467:../stdperiph/source/stm32f37x_rtc.c **** }
 1696              		.loc 1 1467 0
 1697 0018 FF22     		movs	r2, #255
 1698 001a 5A62     		str	r2, [r3, #36]
 1699 001c 7047     		bx	lr
 1700              	.L140:
 1701 001e 00BF     		.align	2
 1702              	.L139:
 1703 0020 00280040 		.word	1073752064
 1704              		.cfi_endproc
 1705              	.LFE133:
 1707              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1708              		.align	2
 1709              		.global	RTC_SetWakeUpCounter
 1710              		.thumb
 1711              		.thumb_func
 1713              	RTC_SetWakeUpCounter:
 1714              	.LFB134:
1479:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 1715              		.loc 1 1479 0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 0
 1718              		@ frame_needed = 0, uses_anonymous_args = 0
 1719              		@ link register save eliminated.
 1720              	.LVL156:
1484:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1721              		.loc 1 1484 0
 1722 0000 044B     		ldr	r3, .L142
 1723 0002 CA22     		movs	r2, #202
 1724 0004 5A62     		str	r2, [r3, #36]
1485:../stdperiph/source/stm32f37x_rtc.c ****   
 1725              		.loc 1 1485 0
 1726 0006 5322     		movs	r2, #83
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 81


 1727 0008 5A62     		str	r2, [r3, #36]
1488:../stdperiph/source/stm32f37x_rtc.c ****   
 1728              		.loc 1 1488 0
 1729 000a 5861     		str	r0, [r3, #20]
1491:../stdperiph/source/stm32f37x_rtc.c **** }
 1730              		.loc 1 1491 0
 1731 000c FF22     		movs	r2, #255
 1732 000e 5A62     		str	r2, [r3, #36]
 1733 0010 7047     		bx	lr
 1734              	.L143:
 1735 0012 00BF     		.align	2
 1736              	.L142:
 1737 0014 00280040 		.word	1073752064
 1738              		.cfi_endproc
 1739              	.LFE134:
 1741              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1742              		.align	2
 1743              		.global	RTC_GetWakeUpCounter
 1744              		.thumb
 1745              		.thumb_func
 1747              	RTC_GetWakeUpCounter:
 1748              	.LFB135:
1500:../stdperiph/source/stm32f37x_rtc.c ****   /* Get the counter value */
 1749              		.loc 1 1500 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
1502:../stdperiph/source/stm32f37x_rtc.c **** }
 1754              		.loc 1 1502 0
 1755 0000 014B     		ldr	r3, .L145
 1756 0002 5869     		ldr	r0, [r3, #20]
1503:../stdperiph/source/stm32f37x_rtc.c **** 
 1757              		.loc 1 1503 0
 1758 0004 80B2     		uxth	r0, r0
 1759 0006 7047     		bx	lr
 1760              	.L146:
 1761              		.align	2
 1762              	.L145:
 1763 0008 00280040 		.word	1073752064
 1764              		.cfi_endproc
 1765              	.LFE135:
 1767              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1768              		.align	2
 1769              		.global	RTC_WakeUpCmd
 1770              		.thumb
 1771              		.thumb_func
 1773              	RTC_WakeUpCmd:
 1774              	.LFB136:
1512:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1775              		.loc 1 1512 0
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 8
 1778              		@ frame_needed = 0, uses_anonymous_args = 0
 1779              		@ link register save eliminated.
 1780              	.LVL157:
 1781 0000 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 82


 1782              	.LCFI19:
 1783              		.cfi_def_cfa_offset 8
1513:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t wutwfstatus = 0x00;
 1784              		.loc 1 1513 0
 1785 0002 0023     		movs	r3, #0
 1786 0004 0193     		str	r3, [sp, #4]
 1787              	.LVL158:
1521:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1788              		.loc 1 1521 0
 1789 0006 164B     		ldr	r3, .L154
 1790 0008 CA22     		movs	r2, #202
 1791 000a 5A62     		str	r2, [r3, #36]
1522:../stdperiph/source/stm32f37x_rtc.c **** 
 1792              		.loc 1 1522 0
 1793 000c 5322     		movs	r2, #83
 1794 000e 5A62     		str	r2, [r3, #36]
1524:../stdperiph/source/stm32f37x_rtc.c ****   {
 1795              		.loc 1 1524 0
 1796 0010 30B1     		cbz	r0, .L148
1527:../stdperiph/source/stm32f37x_rtc.c ****     status = SUCCESS;    
 1797              		.loc 1 1527 0
 1798 0012 1A46     		mov	r2, r3
 1799 0014 9B68     		ldr	r3, [r3, #8]
 1800 0016 43F48063 		orr	r3, r3, #1024
 1801 001a 9360     		str	r3, [r2, #8]
 1802              	.LVL159:
1528:../stdperiph/source/stm32f37x_rtc.c ****   }
 1803              		.loc 1 1528 0
 1804 001c 0120     		movs	r0, #1
 1805              	.LVL160:
 1806 001e 19E0     		b	.L149
 1807              	.LVL161:
 1808              	.L148:
1533:../stdperiph/source/stm32f37x_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 1809              		.loc 1 1533 0
 1810 0020 0F4A     		ldr	r2, .L154
 1811 0022 9368     		ldr	r3, [r2, #8]
 1812 0024 23F48063 		bic	r3, r3, #1024
 1813 0028 9360     		str	r3, [r2, #8]
 1814              	.LVL162:
 1815              	.L151:
1537:../stdperiph/source/stm32f37x_rtc.c ****       wutcounter++;  
 1816              		.loc 1 1537 0 discriminator 2
 1817 002a 0D4B     		ldr	r3, .L154
 1818 002c DB68     		ldr	r3, [r3, #12]
 1819 002e 03F00402 		and	r2, r3, #4
 1820              	.LVL163:
1538:../stdperiph/source/stm32f37x_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1821              		.loc 1 1538 0 discriminator 2
 1822 0032 019B     		ldr	r3, [sp, #4]
 1823 0034 0133     		adds	r3, r3, #1
 1824 0036 0193     		str	r3, [sp, #4]
1539:../stdperiph/source/stm32f37x_rtc.c ****     
 1825              		.loc 1 1539 0 discriminator 2
 1826 0038 019B     		ldr	r3, [sp, #4]
 1827 003a B3F5005F 		cmp	r3, #8192
 1828 003e 01D0     		beq	.L150
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 83


1539:../stdperiph/source/stm32f37x_rtc.c ****     
 1829              		.loc 1 1539 0 is_stmt 0 discriminator 1
 1830 0040 002A     		cmp	r2, #0
 1831 0042 F2D0     		beq	.L151
 1832              	.L150:
1541:../stdperiph/source/stm32f37x_rtc.c ****     {
 1833              		.loc 1 1541 0 is_stmt 1
 1834 0044 064B     		ldr	r3, .L154
 1835 0046 DB68     		ldr	r3, [r3, #12]
 1836 0048 13F0040F 		tst	r3, #4
 1837 004c 01D1     		bne	.L152
1543:../stdperiph/source/stm32f37x_rtc.c ****     }
 1838              		.loc 1 1543 0
 1839 004e 0020     		movs	r0, #0
 1840              	.LVL164:
 1841 0050 00E0     		b	.L149
 1842              	.LVL165:
 1843              	.L152:
1547:../stdperiph/source/stm32f37x_rtc.c ****     }    
 1844              		.loc 1 1547 0
 1845 0052 0120     		movs	r0, #1
 1846              	.LVL166:
 1847              	.L149:
1552:../stdperiph/source/stm32f37x_rtc.c ****   
 1848              		.loc 1 1552 0
 1849 0054 FF22     		movs	r2, #255
 1850 0056 024B     		ldr	r3, .L154
 1851 0058 5A62     		str	r2, [r3, #36]
1555:../stdperiph/source/stm32f37x_rtc.c **** 
 1852              		.loc 1 1555 0
 1853 005a 02B0     		add	sp, sp, #8
 1854              	.LCFI20:
 1855              		.cfi_def_cfa_offset 0
 1856              		@ sp needed
 1857 005c 7047     		bx	lr
 1858              	.L155:
 1859 005e 00BF     		.align	2
 1860              	.L154:
 1861 0060 00280040 		.word	1073752064
 1862              		.cfi_endproc
 1863              	.LFE136:
 1865              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1866              		.align	2
 1867              		.global	RTC_DayLightSavingConfig
 1868              		.thumb
 1869              		.thumb_func
 1871              	RTC_DayLightSavingConfig:
 1872              	.LFB137:
1588:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 1873              		.loc 1 1588 0
 1874              		.cfi_startproc
 1875              		@ args = 0, pretend = 0, frame = 0
 1876              		@ frame_needed = 0, uses_anonymous_args = 0
 1877              		@ link register save eliminated.
 1878              	.LVL167:
1594:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1879              		.loc 1 1594 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 84


 1880 0000 074B     		ldr	r3, .L157
 1881 0002 CA22     		movs	r2, #202
 1882 0004 5A62     		str	r2, [r3, #36]
1595:../stdperiph/source/stm32f37x_rtc.c **** 
 1883              		.loc 1 1595 0
 1884 0006 5322     		movs	r2, #83
 1885 0008 5A62     		str	r2, [r3, #36]
1598:../stdperiph/source/stm32f37x_rtc.c **** 
 1886              		.loc 1 1598 0
 1887 000a 9A68     		ldr	r2, [r3, #8]
 1888 000c 22F48022 		bic	r2, r2, #262144
 1889 0010 9A60     		str	r2, [r3, #8]
1601:../stdperiph/source/stm32f37x_rtc.c **** 
 1890              		.loc 1 1601 0
 1891 0012 9A68     		ldr	r2, [r3, #8]
 1892 0014 0143     		orrs	r1, r1, r0
 1893              	.LVL168:
 1894 0016 1143     		orrs	r1, r1, r2
 1895 0018 9960     		str	r1, [r3, #8]
1604:../stdperiph/source/stm32f37x_rtc.c **** }
 1896              		.loc 1 1604 0
 1897 001a FF22     		movs	r2, #255
 1898 001c 5A62     		str	r2, [r3, #36]
 1899 001e 7047     		bx	lr
 1900              	.L158:
 1901              		.align	2
 1902              	.L157:
 1903 0020 00280040 		.word	1073752064
 1904              		.cfi_endproc
 1905              	.LFE137:
 1907              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1908              		.align	2
 1909              		.global	RTC_GetStoreOperation
 1910              		.thumb
 1911              		.thumb_func
 1913              	RTC_GetStoreOperation:
 1914              	.LFB138:
1615:../stdperiph/source/stm32f37x_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1915              		.loc 1 1615 0
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 0
 1918              		@ frame_needed = 0, uses_anonymous_args = 0
 1919              		@ link register save eliminated.
1616:../stdperiph/source/stm32f37x_rtc.c **** }
 1920              		.loc 1 1616 0
 1921 0000 024B     		ldr	r3, .L160
 1922 0002 9868     		ldr	r0, [r3, #8]
1617:../stdperiph/source/stm32f37x_rtc.c **** 
 1923              		.loc 1 1617 0
 1924 0004 00F48020 		and	r0, r0, #262144
 1925 0008 7047     		bx	lr
 1926              	.L161:
 1927 000a 00BF     		.align	2
 1928              	.L160:
 1929 000c 00280040 		.word	1073752064
 1930              		.cfi_endproc
 1931              	.LFE138:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 85


 1933              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1934              		.align	2
 1935              		.global	RTC_OutputConfig
 1936              		.thumb
 1937              		.thumb_func
 1939              	RTC_OutputConfig:
 1940              	.LFB139:
1653:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 1941              		.loc 1 1653 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 0
 1944              		@ frame_needed = 0, uses_anonymous_args = 0
 1945              		@ link register save eliminated.
 1946              	.LVL169:
1659:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1947              		.loc 1 1659 0
 1948 0000 074B     		ldr	r3, .L163
 1949 0002 CA22     		movs	r2, #202
 1950 0004 5A62     		str	r2, [r3, #36]
1660:../stdperiph/source/stm32f37x_rtc.c **** 
 1951              		.loc 1 1660 0
 1952 0006 5322     		movs	r2, #83
 1953 0008 5A62     		str	r2, [r3, #36]
1663:../stdperiph/source/stm32f37x_rtc.c **** 
 1954              		.loc 1 1663 0
 1955 000a 9A68     		ldr	r2, [r3, #8]
 1956 000c 22F4E002 		bic	r2, r2, #7340032
 1957 0010 9A60     		str	r2, [r3, #8]
1666:../stdperiph/source/stm32f37x_rtc.c **** 
 1958              		.loc 1 1666 0
 1959 0012 9A68     		ldr	r2, [r3, #8]
 1960 0014 0143     		orrs	r1, r1, r0
 1961              	.LVL170:
 1962 0016 1143     		orrs	r1, r1, r2
 1963 0018 9960     		str	r1, [r3, #8]
1669:../stdperiph/source/stm32f37x_rtc.c **** }
 1964              		.loc 1 1669 0
 1965 001a FF22     		movs	r2, #255
 1966 001c 5A62     		str	r2, [r3, #36]
 1967 001e 7047     		bx	lr
 1968              	.L164:
 1969              		.align	2
 1970              	.L163:
 1971 0020 00280040 		.word	1073752064
 1972              		.cfi_endproc
 1973              	.LFE139:
 1975              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 1976              		.align	2
 1977              		.global	RTC_CalibOutputCmd
 1978              		.thumb
 1979              		.thumb_func
 1981              	RTC_CalibOutputCmd:
 1982              	.LFB140:
1695:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 1983              		.loc 1 1695 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 86


 1986              		@ frame_needed = 0, uses_anonymous_args = 0
 1987              		@ link register save eliminated.
 1988              	.LVL171:
1700:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 1989              		.loc 1 1700 0
 1990 0000 0A4B     		ldr	r3, .L168
 1991 0002 CA22     		movs	r2, #202
 1992 0004 5A62     		str	r2, [r3, #36]
1701:../stdperiph/source/stm32f37x_rtc.c ****   
 1993              		.loc 1 1701 0
 1994 0006 5322     		movs	r2, #83
 1995 0008 5A62     		str	r2, [r3, #36]
1703:../stdperiph/source/stm32f37x_rtc.c ****   {
 1996              		.loc 1 1703 0
 1997 000a 28B1     		cbz	r0, .L166
1706:../stdperiph/source/stm32f37x_rtc.c ****   }
 1998              		.loc 1 1706 0
 1999 000c 1A46     		mov	r2, r3
 2000 000e 9B68     		ldr	r3, [r3, #8]
 2001 0010 43F40003 		orr	r3, r3, #8388608
 2002 0014 9360     		str	r3, [r2, #8]
 2003 0016 04E0     		b	.L167
 2004              	.L166:
1711:../stdperiph/source/stm32f37x_rtc.c ****   }
 2005              		.loc 1 1711 0
 2006 0018 044A     		ldr	r2, .L168
 2007 001a 9368     		ldr	r3, [r2, #8]
 2008 001c 23F40003 		bic	r3, r3, #8388608
 2009 0020 9360     		str	r3, [r2, #8]
 2010              	.L167:
1715:../stdperiph/source/stm32f37x_rtc.c **** }
 2011              		.loc 1 1715 0
 2012 0022 FF22     		movs	r2, #255
 2013 0024 014B     		ldr	r3, .L168
 2014 0026 5A62     		str	r2, [r3, #36]
 2015 0028 7047     		bx	lr
 2016              	.L169:
 2017 002a 00BF     		.align	2
 2018              	.L168:
 2019 002c 00280040 		.word	1073752064
 2020              		.cfi_endproc
 2021              	.LFE140:
 2023              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2024              		.align	2
 2025              		.global	RTC_CalibOutputConfig
 2026              		.thumb
 2027              		.thumb_func
 2029              	RTC_CalibOutputConfig:
 2030              	.LFB141:
1727:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2031              		.loc 1 1727 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 0
 2034              		@ frame_needed = 0, uses_anonymous_args = 0
 2035              		@ link register save eliminated.
 2036              	.LVL172:
1732:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 87


 2037              		.loc 1 1732 0
 2038 0000 074B     		ldr	r3, .L171
 2039 0002 CA22     		movs	r2, #202
 2040 0004 5A62     		str	r2, [r3, #36]
1733:../stdperiph/source/stm32f37x_rtc.c ****   
 2041              		.loc 1 1733 0
 2042 0006 5322     		movs	r2, #83
 2043 0008 5A62     		str	r2, [r3, #36]
1736:../stdperiph/source/stm32f37x_rtc.c **** 
 2044              		.loc 1 1736 0
 2045 000a 9A68     		ldr	r2, [r3, #8]
 2046 000c 22F40022 		bic	r2, r2, #524288
 2047 0010 9A60     		str	r2, [r3, #8]
1739:../stdperiph/source/stm32f37x_rtc.c **** 
 2048              		.loc 1 1739 0
 2049 0012 9A68     		ldr	r2, [r3, #8]
 2050 0014 1043     		orrs	r0, r0, r2
 2051              	.LVL173:
 2052 0016 9860     		str	r0, [r3, #8]
1742:../stdperiph/source/stm32f37x_rtc.c **** }
 2053              		.loc 1 1742 0
 2054 0018 FF22     		movs	r2, #255
 2055 001a 5A62     		str	r2, [r3, #36]
 2056 001c 7047     		bx	lr
 2057              	.L172:
 2058 001e 00BF     		.align	2
 2059              	.L171:
 2060 0020 00280040 		.word	1073752064
 2061              		.cfi_endproc
 2062              	.LFE141:
 2064              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2065              		.align	2
 2066              		.global	RTC_SmoothCalibConfig
 2067              		.thumb
 2068              		.thumb_func
 2070              	RTC_SmoothCalibConfig:
 2071              	.LFB142:
1765:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 2072              		.loc 1 1765 0
 2073              		.cfi_startproc
 2074              		@ args = 0, pretend = 0, frame = 0
 2075              		@ frame_needed = 0, uses_anonymous_args = 0
 2076              		@ link register save eliminated.
 2077              	.LVL174:
 2078 0000 10B4     		push	{r4}
 2079              	.LCFI21:
 2080              		.cfi_def_cfa_offset 4
 2081              		.cfi_offset 4, -4
 2082              	.LVL175:
1775:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 2083              		.loc 1 1775 0
 2084 0002 134B     		ldr	r3, .L181
 2085 0004 CA24     		movs	r4, #202
 2086 0006 5C62     		str	r4, [r3, #36]
1776:../stdperiph/source/stm32f37x_rtc.c ****   
 2087              		.loc 1 1776 0
 2088 0008 5324     		movs	r4, #83
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 88


 2089 000a 5C62     		str	r4, [r3, #36]
1779:../stdperiph/source/stm32f37x_rtc.c ****   {
 2090              		.loc 1 1779 0
 2091 000c DB68     		ldr	r3, [r3, #12]
 2092 000e 13F4803F 		tst	r3, #65536
 2093 0012 02D1     		bne	.L178
 2094 0014 0AE0     		b	.L175
 2095              	.LVL176:
 2096              	.L176:
1784:../stdperiph/source/stm32f37x_rtc.c ****     }
 2097              		.loc 1 1784 0
 2098 0016 0133     		adds	r3, r3, #1
 2099              	.LVL177:
 2100 0018 00E0     		b	.L174
 2101              	.LVL178:
 2102              	.L178:
 2103 001a 0023     		movs	r3, #0
 2104              	.LVL179:
 2105              	.L174:
1782:../stdperiph/source/stm32f37x_rtc.c ****     {
 2106              		.loc 1 1782 0
 2107 001c 0C4C     		ldr	r4, .L181
 2108 001e E468     		ldr	r4, [r4, #12]
 2109 0020 14F4803F 		tst	r4, #65536
 2110 0024 02D0     		beq	.L175
1782:../stdperiph/source/stm32f37x_rtc.c ****     {
 2111              		.loc 1 1782 0 is_stmt 0 discriminator 1
 2112 0026 B3F5805F 		cmp	r3, #4096
 2113 002a F4D1     		bne	.L176
 2114              	.LVL180:
 2115              	.L175:
1789:../stdperiph/source/stm32f37x_rtc.c ****   {
 2116              		.loc 1 1789 0 is_stmt 1
 2117 002c 084B     		ldr	r3, .L181
 2118 002e DB68     		ldr	r3, [r3, #12]
 2119 0030 13F4803F 		tst	r3, #65536
 2120 0034 05D1     		bne	.L179
1792:../stdperiph/source/stm32f37x_rtc.c **** 
 2121              		.loc 1 1792 0
 2122 0036 0143     		orrs	r1, r1, r0
 2123              	.LVL181:
 2124 0038 0A43     		orrs	r2, r2, r1
 2125              	.LVL182:
 2126 003a 054B     		ldr	r3, .L181
 2127 003c DA63     		str	r2, [r3, #60]
 2128              	.LVL183:
1794:../stdperiph/source/stm32f37x_rtc.c ****   }
 2129              		.loc 1 1794 0
 2130 003e 0120     		movs	r0, #1
 2131              	.LVL184:
 2132 0040 00E0     		b	.L177
 2133              	.LVL185:
 2134              	.L179:
1798:../stdperiph/source/stm32f37x_rtc.c ****   }
 2135              		.loc 1 1798 0
 2136 0042 0020     		movs	r0, #0
 2137              	.LVL186:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 89


 2138              	.L177:
1802:../stdperiph/source/stm32f37x_rtc.c ****   
 2139              		.loc 1 1802 0
 2140 0044 FF22     		movs	r2, #255
 2141 0046 024B     		ldr	r3, .L181
 2142 0048 5A62     		str	r2, [r3, #36]
1805:../stdperiph/source/stm32f37x_rtc.c **** 
 2143              		.loc 1 1805 0
 2144 004a 5DF8044B 		ldr	r4, [sp], #4
 2145              	.LCFI22:
 2146              		.cfi_restore 4
 2147              		.cfi_def_cfa_offset 0
 2148 004e 7047     		bx	lr
 2149              	.L182:
 2150              		.align	2
 2151              	.L181:
 2152 0050 00280040 		.word	1073752064
 2153              		.cfi_endproc
 2154              	.LFE142:
 2156              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2157              		.align	2
 2158              		.global	RTC_TimeStampCmd
 2159              		.thumb
 2160              		.thumb_func
 2162              	RTC_TimeStampCmd:
 2163              	.LFB143:
1839:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 2164              		.loc 1 1839 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 2168              		@ link register save eliminated.
 2169              	.LVL187:
1847:../stdperiph/source/stm32f37x_rtc.c **** 
 2170              		.loc 1 1847 0
 2171 0000 0A4B     		ldr	r3, .L186
 2172 0002 9B68     		ldr	r3, [r3, #8]
 2173 0004 23F40063 		bic	r3, r3, #2048
 2174 0008 23F00803 		bic	r3, r3, #8
 2175              	.LVL188:
1850:../stdperiph/source/stm32f37x_rtc.c ****   {
 2176              		.loc 1 1850 0
 2177 000c 19B1     		cbz	r1, .L184
1852:../stdperiph/source/stm32f37x_rtc.c ****   }
 2178              		.loc 1 1852 0
 2179 000e 0343     		orrs	r3, r3, r0
 2180              	.LVL189:
 2181 0010 43F40063 		orr	r3, r3, #2048
 2182              	.LVL190:
 2183 0014 00E0     		b	.L185
 2184              	.L184:
1856:../stdperiph/source/stm32f37x_rtc.c ****   }
 2185              		.loc 1 1856 0
 2186 0016 0343     		orrs	r3, r3, r0
 2187              	.LVL191:
 2188              	.L185:
1860:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 90


 2189              		.loc 1 1860 0
 2190 0018 044A     		ldr	r2, .L186
 2191 001a CA21     		movs	r1, #202
 2192              	.LVL192:
 2193 001c 5162     		str	r1, [r2, #36]
1861:../stdperiph/source/stm32f37x_rtc.c **** 
 2194              		.loc 1 1861 0
 2195 001e 5321     		movs	r1, #83
 2196 0020 5162     		str	r1, [r2, #36]
1864:../stdperiph/source/stm32f37x_rtc.c **** 
 2197              		.loc 1 1864 0
 2198 0022 9360     		str	r3, [r2, #8]
1867:../stdperiph/source/stm32f37x_rtc.c **** }
 2199              		.loc 1 1867 0
 2200 0024 FF23     		movs	r3, #255
 2201              	.LVL193:
 2202 0026 5362     		str	r3, [r2, #36]
 2203              	.LVL194:
 2204 0028 7047     		bx	lr
 2205              	.L187:
 2206 002a 00BF     		.align	2
 2207              	.L186:
 2208 002c 00280040 		.word	1073752064
 2209              		.cfi_endproc
 2210              	.LFE143:
 2212              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2213              		.align	2
 2214              		.global	RTC_GetTimeStamp
 2215              		.thumb
 2216              		.thumb_func
 2218              	RTC_GetTimeStamp:
 2219              	.LFB144:
1884:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2220              		.loc 1 1884 0
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 0
 2223              		@ frame_needed = 0, uses_anonymous_args = 0
 2224              	.LVL195:
 2225 0000 70B5     		push	{r4, r5, r6, lr}
 2226              	.LCFI23:
 2227              		.cfi_def_cfa_offset 16
 2228              		.cfi_offset 4, -16
 2229              		.cfi_offset 5, -12
 2230              		.cfi_offset 6, -8
 2231              		.cfi_offset 14, -4
 2232              	.LVL196:
1891:../stdperiph/source/stm32f37x_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2233              		.loc 1 1891 0
 2234 0002 1D4B     		ldr	r3, .L191
 2235 0004 1C6B     		ldr	r4, [r3, #48]
 2236 0006 04F07F34 		and	r4, r4, #2139062143
 2237 000a 24F0FE44 		bic	r4, r4, #2130706432
 2238              	.LVL197:
1892:../stdperiph/source/stm32f37x_rtc.c **** 
 2239              		.loc 1 1892 0
 2240 000e 5B6B     		ldr	r3, [r3, #52]
 2241 0010 23F07F43 		bic	r3, r3, #-16777216
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 91


 2242 0014 23F0C003 		bic	r3, r3, #192
 2243              	.LVL198:
1895:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2244              		.loc 1 1895 0
 2245 0018 250C     		lsrs	r5, r4, #16
 2246 001a 05F03F06 		and	r6, r5, #63
 2247 001e 0E70     		strb	r6, [r1]
1896:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2248              		.loc 1 1896 0
 2249 0020 C4F30626 		ubfx	r6, r4, #8, #7
 2250 0024 4E70     		strb	r6, [r1, #1]
1897:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2251              		.loc 1 1897 0
 2252 0026 8C70     		strb	r4, [r1, #2]
1898:../stdperiph/source/stm32f37x_rtc.c **** 
 2253              		.loc 1 1898 0
 2254 0028 05F04005 		and	r5, r5, #64
 2255 002c CD70     		strb	r5, [r1, #3]
1901:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2256              		.loc 1 1901 0
 2257 002e 0024     		movs	r4, #0
 2258              	.LVL199:
 2259 0030 D470     		strb	r4, [r2, #3]
1902:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2260              		.loc 1 1902 0
 2261 0032 C3F30424 		ubfx	r4, r3, #8, #5
 2262 0036 5470     		strb	r4, [r2, #1]
1903:../stdperiph/source/stm32f37x_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2263              		.loc 1 1903 0
 2264 0038 9370     		strb	r3, [r2, #2]
1904:../stdperiph/source/stm32f37x_rtc.c **** 
 2265              		.loc 1 1904 0
 2266 003a C3F34233 		ubfx	r3, r3, #13, #3
 2267              	.LVL200:
 2268 003e 1370     		strb	r3, [r2]
1907:../stdperiph/source/stm32f37x_rtc.c ****   {
 2269              		.loc 1 1907 0
 2270 0040 C8B9     		cbnz	r0, .L188
 2271 0042 1446     		mov	r4, r2
 2272 0044 0D46     		mov	r5, r1
1910:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2273              		.loc 1 1910 0
 2274 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2275              	.LVL201:
 2276 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2277              	.LVL202:
 2278 004c 2870     		strb	r0, [r5]
1911:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2279              		.loc 1 1911 0
 2280 004e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2281 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2282              	.LVL203:
 2283 0054 6870     		strb	r0, [r5, #1]
1912:../stdperiph/source/stm32f37x_rtc.c **** 
 2284              		.loc 1 1912 0
 2285 0056 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2286 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 92


 2287              	.LVL204:
 2288 005c A870     		strb	r0, [r5, #2]
1915:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2289              		.loc 1 1915 0
 2290 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2291 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2292              	.LVL205:
 2293 0064 6070     		strb	r0, [r4, #1]
1916:../stdperiph/source/stm32f37x_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2294              		.loc 1 1916 0
 2295 0066 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2296 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2297              	.LVL206:
 2298 006c A070     		strb	r0, [r4, #2]
1917:../stdperiph/source/stm32f37x_rtc.c ****   }
 2299              		.loc 1 1917 0
 2300 006e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 2301 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2302              	.LVL207:
 2303 0074 2070     		strb	r0, [r4]
 2304              	.LVL208:
 2305              	.L188:
 2306 0076 70BD     		pop	{r4, r5, r6, pc}
 2307              	.L192:
 2308              		.align	2
 2309              	.L191:
 2310 0078 00280040 		.word	1073752064
 2311              		.cfi_endproc
 2312              	.LFE144:
 2314              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2315              		.align	2
 2316              		.global	RTC_GetTimeStampSubSecond
 2317              		.thumb
 2318              		.thumb_func
 2320              	RTC_GetTimeStampSubSecond:
 2321              	.LFB145:
1927:../stdperiph/source/stm32f37x_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
 2322              		.loc 1 1927 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 2326              		@ link register save eliminated.
1929:../stdperiph/source/stm32f37x_rtc.c **** }
 2327              		.loc 1 1929 0
 2328 0000 014B     		ldr	r3, .L194
 2329 0002 986B     		ldr	r0, [r3, #56]
1930:../stdperiph/source/stm32f37x_rtc.c **** 
 2330              		.loc 1 1930 0
 2331 0004 7047     		bx	lr
 2332              	.L195:
 2333 0006 00BF     		.align	2
 2334              	.L194:
 2335 0008 00280040 		.word	1073752064
 2336              		.cfi_endproc
 2337              	.LFE145:
 2339              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2340              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 93


 2341              		.global	RTC_TamperTriggerConfig
 2342              		.thumb
 2343              		.thumb_func
 2345              	RTC_TamperTriggerConfig:
 2346              	.LFB146:
1965:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2347              		.loc 1 1965 0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351              		@ link register save eliminated.
 2352              	.LVL209:
1971:../stdperiph/source/stm32f37x_rtc.c ****   {  
 2353              		.loc 1 1971 0
 2354 0000 29B9     		cbnz	r1, .L197
1974:../stdperiph/source/stm32f37x_rtc.c ****   }
 2355              		.loc 1 1974 0
 2356 0002 064A     		ldr	r2, .L199
 2357 0004 136C     		ldr	r3, [r2, #64]
 2358 0006 23EA4000 		bic	r0, r3, r0, lsl #1
 2359              	.LVL210:
 2360 000a 1064     		str	r0, [r2, #64]
 2361 000c 7047     		bx	lr
 2362              	.LVL211:
 2363              	.L197:
1979:../stdperiph/source/stm32f37x_rtc.c ****   }  
 2364              		.loc 1 1979 0
 2365 000e 034A     		ldr	r2, .L199
 2366 0010 136C     		ldr	r3, [r2, #64]
 2367 0012 43EA4000 		orr	r0, r3, r0, lsl #1
 2368              	.LVL212:
 2369 0016 1064     		str	r0, [r2, #64]
 2370 0018 7047     		bx	lr
 2371              	.L200:
 2372 001a 00BF     		.align	2
 2373              	.L199:
 2374 001c 00280040 		.word	1073752064
 2375              		.cfi_endproc
 2376              	.LFE146:
 2378              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2379              		.align	2
 2380              		.global	RTC_TamperCmd
 2381              		.thumb
 2382              		.thumb_func
 2384              	RTC_TamperCmd:
 2385              	.LFB147:
1995:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2386              		.loc 1 1995 0
 2387              		.cfi_startproc
 2388              		@ args = 0, pretend = 0, frame = 0
 2389              		@ frame_needed = 0, uses_anonymous_args = 0
 2390              		@ link register save eliminated.
 2391              	.LVL213:
2000:../stdperiph/source/stm32f37x_rtc.c ****   {
 2392              		.loc 1 2000 0
 2393 0000 21B1     		cbz	r1, .L202
2003:../stdperiph/source/stm32f37x_rtc.c ****   }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 94


 2394              		.loc 1 2003 0
 2395 0002 054B     		ldr	r3, .L204
 2396 0004 1A6C     		ldr	r2, [r3, #64]
 2397 0006 1043     		orrs	r0, r0, r2
 2398              	.LVL214:
 2399 0008 1864     		str	r0, [r3, #64]
 2400 000a 7047     		bx	lr
 2401              	.LVL215:
 2402              	.L202:
2008:../stdperiph/source/stm32f37x_rtc.c ****   }  
 2403              		.loc 1 2008 0
 2404 000c 024A     		ldr	r2, .L204
 2405 000e 136C     		ldr	r3, [r2, #64]
 2406 0010 23EA0000 		bic	r0, r3, r0
 2407              	.LVL216:
 2408 0014 1064     		str	r0, [r2, #64]
 2409 0016 7047     		bx	lr
 2410              	.L205:
 2411              		.align	2
 2412              	.L204:
 2413 0018 00280040 		.word	1073752064
 2414              		.cfi_endproc
 2415              	.LFE147:
 2417              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2418              		.align	2
 2419              		.global	RTC_TamperFilterConfig
 2420              		.thumb
 2421              		.thumb_func
 2423              	RTC_TamperFilterConfig:
 2424              	.LFB148:
2026:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2425              		.loc 1 2026 0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 0
 2428              		@ frame_needed = 0, uses_anonymous_args = 0
 2429              		@ link register save eliminated.
 2430              	.LVL217:
2031:../stdperiph/source/stm32f37x_rtc.c **** 
 2431              		.loc 1 2031 0
 2432 0000 044B     		ldr	r3, .L207
 2433 0002 1A6C     		ldr	r2, [r3, #64]
 2434 0004 22F4C052 		bic	r2, r2, #6144
 2435 0008 1A64     		str	r2, [r3, #64]
2034:../stdperiph/source/stm32f37x_rtc.c **** }
 2436              		.loc 1 2034 0
 2437 000a 1A6C     		ldr	r2, [r3, #64]
 2438 000c 1043     		orrs	r0, r0, r2
 2439              	.LVL218:
 2440 000e 1864     		str	r0, [r3, #64]
 2441 0010 7047     		bx	lr
 2442              	.L208:
 2443 0012 00BF     		.align	2
 2444              	.L207:
 2445 0014 00280040 		.word	1073752064
 2446              		.cfi_endproc
 2447              	.LFE148:
 2449              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 95


 2450              		.align	2
 2451              		.global	RTC_TamperSamplingFreqConfig
 2452              		.thumb
 2453              		.thumb_func
 2455              	RTC_TamperSamplingFreqConfig:
 2456              	.LFB149:
2060:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2457              		.loc 1 2060 0
 2458              		.cfi_startproc
 2459              		@ args = 0, pretend = 0, frame = 0
 2460              		@ frame_needed = 0, uses_anonymous_args = 0
 2461              		@ link register save eliminated.
 2462              	.LVL219:
2065:../stdperiph/source/stm32f37x_rtc.c **** 
 2463              		.loc 1 2065 0
 2464 0000 044B     		ldr	r3, .L210
 2465 0002 1A6C     		ldr	r2, [r3, #64]
 2466 0004 22F4E062 		bic	r2, r2, #1792
 2467 0008 1A64     		str	r2, [r3, #64]
2068:../stdperiph/source/stm32f37x_rtc.c **** }
 2468              		.loc 1 2068 0
 2469 000a 1A6C     		ldr	r2, [r3, #64]
 2470 000c 1043     		orrs	r0, r0, r2
 2471              	.LVL220:
 2472 000e 1864     		str	r0, [r3, #64]
 2473 0010 7047     		bx	lr
 2474              	.L211:
 2475 0012 00BF     		.align	2
 2476              	.L210:
 2477 0014 00280040 		.word	1073752064
 2478              		.cfi_endproc
 2479              	.LFE149:
 2481              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2482              		.align	2
 2483              		.global	RTC_TamperPinsPrechargeDuration
 2484              		.thumb
 2485              		.thumb_func
 2487              	RTC_TamperPinsPrechargeDuration:
 2488              	.LFB150:
2083:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2489              		.loc 1 2083 0
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 0
 2492              		@ frame_needed = 0, uses_anonymous_args = 0
 2493              		@ link register save eliminated.
 2494              	.LVL221:
2088:../stdperiph/source/stm32f37x_rtc.c **** 
 2495              		.loc 1 2088 0
 2496 0000 044B     		ldr	r3, .L213
 2497 0002 1A6C     		ldr	r2, [r3, #64]
 2498 0004 22F4C042 		bic	r2, r2, #24576
 2499 0008 1A64     		str	r2, [r3, #64]
2091:../stdperiph/source/stm32f37x_rtc.c **** }
 2500              		.loc 1 2091 0
 2501 000a 1A6C     		ldr	r2, [r3, #64]
 2502 000c 1043     		orrs	r0, r0, r2
 2503              	.LVL222:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 96


 2504 000e 1864     		str	r0, [r3, #64]
 2505 0010 7047     		bx	lr
 2506              	.L214:
 2507 0012 00BF     		.align	2
 2508              	.L213:
 2509 0014 00280040 		.word	1073752064
 2510              		.cfi_endproc
 2511              	.LFE150:
 2513              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2514              		.align	2
 2515              		.global	RTC_TimeStampOnTamperDetectionCmd
 2516              		.thumb
 2517              		.thumb_func
 2519              	RTC_TimeStampOnTamperDetectionCmd:
 2520              	.LFB151:
2103:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2521              		.loc 1 2103 0
 2522              		.cfi_startproc
 2523              		@ args = 0, pretend = 0, frame = 0
 2524              		@ frame_needed = 0, uses_anonymous_args = 0
 2525              		@ link register save eliminated.
 2526              	.LVL223:
2107:../stdperiph/source/stm32f37x_rtc.c ****   {
 2527              		.loc 1 2107 0
 2528 0000 28B1     		cbz	r0, .L216
2110:../stdperiph/source/stm32f37x_rtc.c ****   }
 2529              		.loc 1 2110 0
 2530 0002 064A     		ldr	r2, .L218
 2531 0004 136C     		ldr	r3, [r2, #64]
 2532 0006 43F08003 		orr	r3, r3, #128
 2533 000a 1364     		str	r3, [r2, #64]
 2534 000c 7047     		bx	lr
 2535              	.L216:
2115:../stdperiph/source/stm32f37x_rtc.c ****   }
 2536              		.loc 1 2115 0
 2537 000e 034A     		ldr	r2, .L218
 2538 0010 136C     		ldr	r3, [r2, #64]
 2539 0012 23F08003 		bic	r3, r3, #128
 2540 0016 1364     		str	r3, [r2, #64]
 2541 0018 7047     		bx	lr
 2542              	.L219:
 2543 001a 00BF     		.align	2
 2544              	.L218:
 2545 001c 00280040 		.word	1073752064
 2546              		.cfi_endproc
 2547              	.LFE151:
 2549              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2550              		.align	2
 2551              		.global	RTC_TamperPullUpCmd
 2552              		.thumb
 2553              		.thumb_func
 2555              	RTC_TamperPullUpCmd:
 2556              	.LFB152:
2126:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2557              		.loc 1 2126 0
 2558              		.cfi_startproc
 2559              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 97


 2560              		@ frame_needed = 0, uses_anonymous_args = 0
 2561              		@ link register save eliminated.
 2562              	.LVL224:
2130:../stdperiph/source/stm32f37x_rtc.c ****   {
 2563              		.loc 1 2130 0
 2564 0000 28B1     		cbz	r0, .L221
2133:../stdperiph/source/stm32f37x_rtc.c ****   }
 2565              		.loc 1 2133 0
 2566 0002 064A     		ldr	r2, .L223
 2567 0004 136C     		ldr	r3, [r2, #64]
 2568 0006 23F40043 		bic	r3, r3, #32768
 2569 000a 1364     		str	r3, [r2, #64]
 2570 000c 7047     		bx	lr
 2571              	.L221:
2138:../stdperiph/source/stm32f37x_rtc.c ****   } 
 2572              		.loc 1 2138 0
 2573 000e 034A     		ldr	r2, .L223
 2574 0010 136C     		ldr	r3, [r2, #64]
 2575 0012 43F40043 		orr	r3, r3, #32768
 2576 0016 1364     		str	r3, [r2, #64]
 2577 0018 7047     		bx	lr
 2578              	.L224:
 2579 001a 00BF     		.align	2
 2580              	.L223:
 2581 001c 00280040 		.word	1073752064
 2582              		.cfi_endproc
 2583              	.LFE152:
 2585              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2586              		.align	2
 2587              		.global	RTC_WriteBackupRegister
 2588              		.thumb
 2589              		.thumb_func
 2591              	RTC_WriteBackupRegister:
 2592              	.LFB153:
2167:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t tmp = 0;
 2593              		.loc 1 2167 0
 2594              		.cfi_startproc
 2595              		@ args = 0, pretend = 0, frame = 8
 2596              		@ frame_needed = 0, uses_anonymous_args = 0
 2597              		@ link register save eliminated.
 2598              	.LVL225:
 2599 0000 82B0     		sub	sp, sp, #8
 2600              	.LCFI24:
 2601              		.cfi_def_cfa_offset 8
2168:../stdperiph/source/stm32f37x_rtc.c ****   
 2602              		.loc 1 2168 0
 2603 0002 0023     		movs	r3, #0
 2604 0004 0193     		str	r3, [sp, #4]
2173:../stdperiph/source/stm32f37x_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2605              		.loc 1 2173 0
 2606 0006 054B     		ldr	r3, .L227
 2607 0008 0193     		str	r3, [sp, #4]
2174:../stdperiph/source/stm32f37x_rtc.c **** 
 2608              		.loc 1 2174 0
 2609 000a 019B     		ldr	r3, [sp, #4]
 2610 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2611              	.LVL226:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 98


 2612 0010 0190     		str	r0, [sp, #4]
2177:../stdperiph/source/stm32f37x_rtc.c **** }
 2613              		.loc 1 2177 0
 2614 0012 019B     		ldr	r3, [sp, #4]
 2615 0014 1960     		str	r1, [r3]
2178:../stdperiph/source/stm32f37x_rtc.c **** 
 2616              		.loc 1 2178 0
 2617 0016 02B0     		add	sp, sp, #8
 2618              	.LCFI25:
 2619              		.cfi_def_cfa_offset 0
 2620              		@ sp needed
 2621 0018 7047     		bx	lr
 2622              	.L228:
 2623 001a 00BF     		.align	2
 2624              	.L227:
 2625 001c 50280040 		.word	1073752144
 2626              		.cfi_endproc
 2627              	.LFE153:
 2629              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2630              		.align	2
 2631              		.global	RTC_ReadBackupRegister
 2632              		.thumb
 2633              		.thumb_func
 2635              	RTC_ReadBackupRegister:
 2636              	.LFB154:
2188:../stdperiph/source/stm32f37x_rtc.c ****   __IO uint32_t tmp = 0;
 2637              		.loc 1 2188 0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 8
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 2641              		@ link register save eliminated.
 2642              	.LVL227:
 2643 0000 82B0     		sub	sp, sp, #8
 2644              	.LCFI26:
 2645              		.cfi_def_cfa_offset 8
2189:../stdperiph/source/stm32f37x_rtc.c ****   
 2646              		.loc 1 2189 0
 2647 0002 0023     		movs	r3, #0
 2648 0004 0193     		str	r3, [sp, #4]
2194:../stdperiph/source/stm32f37x_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2649              		.loc 1 2194 0
 2650 0006 054B     		ldr	r3, .L231
 2651 0008 0193     		str	r3, [sp, #4]
2195:../stdperiph/source/stm32f37x_rtc.c ****   
 2652              		.loc 1 2195 0
 2653 000a 019B     		ldr	r3, [sp, #4]
 2654 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2655              	.LVL228:
 2656 0010 0190     		str	r0, [sp, #4]
2198:../stdperiph/source/stm32f37x_rtc.c **** }
 2657              		.loc 1 2198 0
 2658 0012 019B     		ldr	r3, [sp, #4]
 2659 0014 1868     		ldr	r0, [r3]
2199:../stdperiph/source/stm32f37x_rtc.c **** 
 2660              		.loc 1 2199 0
 2661 0016 02B0     		add	sp, sp, #8
 2662              	.LCFI27:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 99


 2663              		.cfi_def_cfa_offset 0
 2664              		@ sp needed
 2665 0018 7047     		bx	lr
 2666              	.L232:
 2667 001a 00BF     		.align	2
 2668              	.L231:
 2669 001c 50280040 		.word	1073752144
 2670              		.cfi_endproc
 2671              	.LFE154:
 2673              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2674              		.align	2
 2675              		.global	RTC_OutputTypeConfig
 2676              		.thumb
 2677              		.thumb_func
 2679              	RTC_OutputTypeConfig:
 2680              	.LFB155:
2228:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2681              		.loc 1 2228 0
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 0
 2684              		@ frame_needed = 0, uses_anonymous_args = 0
 2685              		@ link register save eliminated.
 2686              	.LVL229:
2232:../stdperiph/source/stm32f37x_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2687              		.loc 1 2232 0
 2688 0000 044B     		ldr	r3, .L234
 2689 0002 1A6C     		ldr	r2, [r3, #64]
 2690 0004 22F48022 		bic	r2, r2, #262144
 2691 0008 1A64     		str	r2, [r3, #64]
2233:../stdperiph/source/stm32f37x_rtc.c **** }
 2692              		.loc 1 2233 0
 2693 000a 1A6C     		ldr	r2, [r3, #64]
 2694 000c 1043     		orrs	r0, r0, r2
 2695              	.LVL230:
 2696 000e 1864     		str	r0, [r3, #64]
 2697 0010 7047     		bx	lr
 2698              	.L235:
 2699 0012 00BF     		.align	2
 2700              	.L234:
 2701 0014 00280040 		.word	1073752064
 2702              		.cfi_endproc
 2703              	.LFE155:
 2705              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 2706              		.align	2
 2707              		.global	RTC_SynchroShiftConfig
 2708              		.thumb
 2709              		.thumb_func
 2711              	RTC_SynchroShiftConfig:
 2712              	.LFB156:
2266:../stdperiph/source/stm32f37x_rtc.c ****   ErrorStatus status = ERROR;
 2713              		.loc 1 2266 0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              	.LVL231:
 2718 0000 08B5     		push	{r3, lr}
 2719              	.LCFI28:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 100


 2720              		.cfi_def_cfa_offset 8
 2721              		.cfi_offset 3, -8
 2722              		.cfi_offset 14, -4
 2723              	.LVL232:
2275:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 2724              		.loc 1 2275 0
 2725 0002 174B     		ldr	r3, .L246
 2726 0004 CA22     		movs	r2, #202
 2727 0006 5A62     		str	r2, [r3, #36]
2276:../stdperiph/source/stm32f37x_rtc.c ****   
 2728              		.loc 1 2276 0
 2729 0008 5322     		movs	r2, #83
 2730 000a 5A62     		str	r2, [r3, #36]
2279:../stdperiph/source/stm32f37x_rtc.c ****   {
 2731              		.loc 1 2279 0
 2732 000c DB68     		ldr	r3, [r3, #12]
 2733 000e 13F0080F 		tst	r3, #8
 2734 0012 02D1     		bne	.L241
 2735 0014 0AE0     		b	.L238
 2736              	.LVL233:
 2737              	.L239:
2284:../stdperiph/source/stm32f37x_rtc.c ****     }
 2738              		.loc 1 2284 0
 2739 0016 0133     		adds	r3, r3, #1
 2740              	.LVL234:
 2741 0018 00E0     		b	.L237
 2742              	.LVL235:
 2743              	.L241:
 2744 001a 0023     		movs	r3, #0
 2745              	.LVL236:
 2746              	.L237:
2282:../stdperiph/source/stm32f37x_rtc.c ****     {
 2747              		.loc 1 2282 0
 2748 001c 104A     		ldr	r2, .L246
 2749 001e D268     		ldr	r2, [r2, #12]
 2750 0020 12F0080F 		tst	r2, #8
 2751 0024 02D0     		beq	.L238
2282:../stdperiph/source/stm32f37x_rtc.c ****     {
 2752              		.loc 1 2282 0 is_stmt 0 discriminator 1
 2753 0026 B3F5805F 		cmp	r3, #4096
 2754 002a F4D1     		bne	.L239
 2755              	.LVL237:
 2756              	.L238:
2289:../stdperiph/source/stm32f37x_rtc.c ****   {
 2757              		.loc 1 2289 0 is_stmt 1
 2758 002c 0C4B     		ldr	r3, .L246
 2759 002e DB68     		ldr	r3, [r3, #12]
 2760 0030 13F0080F 		tst	r3, #8
 2761 0034 0BD1     		bne	.L242
2292:../stdperiph/source/stm32f37x_rtc.c ****     {
 2762              		.loc 1 2292 0
 2763 0036 0A4B     		ldr	r3, .L246
 2764 0038 9B68     		ldr	r3, [r3, #8]
 2765 003a 13F0100F 		tst	r3, #16
 2766 003e 08D1     		bne	.L243
2295:../stdperiph/source/stm32f37x_rtc.c ****     
 2767              		.loc 1 2295 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 101


 2768 0040 0843     		orrs	r0, r0, r1
 2769              	.LVL238:
 2770 0042 074B     		ldr	r3, .L246
 2771 0044 D862     		str	r0, [r3, #44]
2297:../stdperiph/source/stm32f37x_rtc.c ****       {
 2772              		.loc 1 2297 0
 2773 0046 FFF7FEFF 		bl	RTC_WaitForSynchro
 2774              	.LVL239:
 2775 004a 20B9     		cbnz	r0, .L244
 2776 004c 04E0     		b	.L240
 2777              	.LVL240:
 2778              	.L242:
2313:../stdperiph/source/stm32f37x_rtc.c ****   }
 2779              		.loc 1 2313 0
 2780 004e 0020     		movs	r0, #0
 2781              	.LVL241:
 2782 0050 02E0     		b	.L240
 2783              	.LVL242:
 2784              	.L243:
2308:../stdperiph/source/stm32f37x_rtc.c ****     }
 2785              		.loc 1 2308 0
 2786 0052 0020     		movs	r0, #0
 2787              	.LVL243:
 2788 0054 00E0     		b	.L240
 2789              	.LVL244:
 2790              	.L244:
2303:../stdperiph/source/stm32f37x_rtc.c ****       }
 2791              		.loc 1 2303 0
 2792 0056 0120     		movs	r0, #1
 2793              	.L240:
 2794              	.LVL245:
2317:../stdperiph/source/stm32f37x_rtc.c ****   
 2795              		.loc 1 2317 0
 2796 0058 FF22     		movs	r2, #255
 2797 005a 014B     		ldr	r3, .L246
 2798 005c 5A62     		str	r2, [r3, #36]
2320:../stdperiph/source/stm32f37x_rtc.c **** 
 2799              		.loc 1 2320 0
 2800 005e 08BD     		pop	{r3, pc}
 2801              	.L247:
 2802              		.align	2
 2803              	.L246:
 2804 0060 00280040 		.word	1073752064
 2805              		.cfi_endproc
 2806              	.LFE156:
 2808              		.section	.text.RTC_ITConfig,"ax",%progbits
 2809              		.align	2
 2810              		.global	RTC_ITConfig
 2811              		.thumb
 2812              		.thumb_func
 2814              	RTC_ITConfig:
 2815              	.LFB157:
2386:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2816              		.loc 1 2386 0
 2817              		.cfi_startproc
 2818              		@ args = 0, pretend = 0, frame = 0
 2819              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 102


 2820              		@ link register save eliminated.
 2821              	.LVL246:
2392:../stdperiph/source/stm32f37x_rtc.c ****   RTC->WPR = 0x53;
 2822              		.loc 1 2392 0
 2823 0000 104B     		ldr	r3, .L251
 2824 0002 CA22     		movs	r2, #202
 2825 0004 5A62     		str	r2, [r3, #36]
2393:../stdperiph/source/stm32f37x_rtc.c **** 
 2826              		.loc 1 2393 0
 2827 0006 5322     		movs	r2, #83
 2828 0008 5A62     		str	r2, [r3, #36]
2395:../stdperiph/source/stm32f37x_rtc.c ****   {
 2829              		.loc 1 2395 0
 2830 000a 51B1     		cbz	r1, .L249
2398:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 2831              		.loc 1 2398 0
 2832 000c 9968     		ldr	r1, [r3, #8]
 2833              	.LVL247:
 2834 000e 20F00402 		bic	r2, r0, #4
 2835 0012 0A43     		orrs	r2, r2, r1
 2836 0014 9A60     		str	r2, [r3, #8]
2400:../stdperiph/source/stm32f37x_rtc.c ****   }
 2837              		.loc 1 2400 0
 2838 0016 1A6C     		ldr	r2, [r3, #64]
 2839 0018 00F00400 		and	r0, r0, #4
 2840              	.LVL248:
 2841 001c 1043     		orrs	r0, r0, r2
 2842 001e 1864     		str	r0, [r3, #64]
 2843 0020 0CE0     		b	.L250
 2844              	.LVL249:
 2845              	.L249:
2405:../stdperiph/source/stm32f37x_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 2846              		.loc 1 2405 0
 2847 0022 084B     		ldr	r3, .L251
 2848 0024 9A68     		ldr	r2, [r3, #8]
 2849 0026 20F00401 		bic	r1, r0, #4
 2850              	.LVL250:
 2851 002a 22EA0102 		bic	r2, r2, r1
 2852 002e 9A60     		str	r2, [r3, #8]
2407:../stdperiph/source/stm32f37x_rtc.c ****   }
 2853              		.loc 1 2407 0
 2854 0030 1A6C     		ldr	r2, [r3, #64]
 2855 0032 00F00400 		and	r0, r0, #4
 2856              	.LVL251:
 2857 0036 22EA0000 		bic	r0, r2, r0
 2858 003a 1864     		str	r0, [r3, #64]
 2859              	.L250:
2410:../stdperiph/source/stm32f37x_rtc.c **** }
 2860              		.loc 1 2410 0
 2861 003c FF22     		movs	r2, #255
 2862 003e 014B     		ldr	r3, .L251
 2863 0040 5A62     		str	r2, [r3, #36]
 2864 0042 7047     		bx	lr
 2865              	.L252:
 2866              		.align	2
 2867              	.L251:
 2868 0044 00280040 		.word	1073752064
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 103


 2869              		.cfi_endproc
 2870              	.LFE157:
 2872              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 2873              		.align	2
 2874              		.global	RTC_GetFlagStatus
 2875              		.thumb
 2876              		.thumb_func
 2878              	RTC_GetFlagStatus:
 2879              	.LFB158:
2436:../stdperiph/source/stm32f37x_rtc.c ****   FlagStatus bitstatus = RESET;
 2880              		.loc 1 2436 0
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 0
 2883              		@ frame_needed = 0, uses_anonymous_args = 0
 2884              		@ link register save eliminated.
 2885              	.LVL252:
2444:../stdperiph/source/stm32f37x_rtc.c ****   
 2886              		.loc 1 2444 0
 2887 0000 044B     		ldr	r3, .L256
 2888 0002 DA68     		ldr	r2, [r3, #12]
 2889 0004 044B     		ldr	r3, .L256+4
 2890 0006 1340     		ands	r3, r3, r2
 2891              	.LVL253:
2447:../stdperiph/source/stm32f37x_rtc.c ****   {
 2892              		.loc 1 2447 0
 2893 0008 0342     		tst	r3, r0
 2894 000a 01D0     		beq	.L255
2449:../stdperiph/source/stm32f37x_rtc.c ****   }
 2895              		.loc 1 2449 0
 2896 000c 0120     		movs	r0, #1
 2897              	.LVL254:
 2898 000e 7047     		bx	lr
 2899              	.LVL255:
 2900              	.L255:
2453:../stdperiph/source/stm32f37x_rtc.c ****   }
 2901              		.loc 1 2453 0
 2902 0010 0020     		movs	r0, #0
 2903              	.LVL256:
2456:../stdperiph/source/stm32f37x_rtc.c **** 
 2904              		.loc 1 2456 0
 2905 0012 7047     		bx	lr
 2906              	.L257:
 2907              		.align	2
 2908              	.L256:
 2909 0014 00280040 		.word	1073752064
 2910 0018 7FFF0100 		.word	130943
 2911              		.cfi_endproc
 2912              	.LFE158:
 2914              		.section	.text.RTC_ClearFlag,"ax",%progbits
 2915              		.align	2
 2916              		.global	RTC_ClearFlag
 2917              		.thumb
 2918              		.thumb_func
 2920              	RTC_ClearFlag:
 2921              	.LFB159:
2474:../stdperiph/source/stm32f37x_rtc.c ****   /* Check the parameters */
 2922              		.loc 1 2474 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 104


 2923              		.cfi_startproc
 2924              		@ args = 0, pretend = 0, frame = 0
 2925              		@ frame_needed = 0, uses_anonymous_args = 0
 2926              		@ link register save eliminated.
 2927              	.LVL257:
2479:../stdperiph/source/stm32f37x_rtc.c **** }
 2928              		.loc 1 2479 0
 2929 0000 054B     		ldr	r3, .L259
 2930 0002 0340     		ands	r3, r3, r0
 2931 0004 43F08002 		orr	r2, r3, #128
 2932 0008 0449     		ldr	r1, .L259+4
 2933 000a CB68     		ldr	r3, [r1, #12]
 2934 000c 03F08003 		and	r3, r3, #128
 2935 0010 63EA0203 		orn	r3, r3, r2
 2936 0014 CB60     		str	r3, [r1, #12]
 2937 0016 7047     		bx	lr
 2938              	.L260:
 2939              		.align	2
 2940              	.L259:
 2941 0018 7FFF0100 		.word	130943
 2942 001c 00280040 		.word	1073752064
 2943              		.cfi_endproc
 2944              	.LFE159:
 2946              		.section	.text.RTC_GetITStatus,"ax",%progbits
 2947              		.align	2
 2948              		.global	RTC_GetITStatus
 2949              		.thumb
 2950              		.thumb_func
 2952              	RTC_GetITStatus:
 2953              	.LFB160:
2496:../stdperiph/source/stm32f37x_rtc.c ****   ITStatus bitstatus = RESET;
 2954              		.loc 1 2496 0
 2955              		.cfi_startproc
 2956              		@ args = 0, pretend = 0, frame = 0
 2957              		@ frame_needed = 0, uses_anonymous_args = 0
 2958              		@ link register save eliminated.
 2959              	.LVL258:
 2960 0000 10B4     		push	{r4}
 2961              	.LCFI29:
 2962              		.cfi_def_cfa_offset 4
 2963              		.cfi_offset 4, -4
 2964              	.LVL259:
2504:../stdperiph/source/stm32f37x_rtc.c ****  
 2965              		.loc 1 2504 0
 2966 0002 0C4C     		ldr	r4, .L266
 2967 0004 236C     		ldr	r3, [r4, #64]
 2968 0006 03F00402 		and	r2, r3, #4
 2969              	.LVL260:
2507:../stdperiph/source/stm32f37x_rtc.c ****   
 2970              		.loc 1 2507 0
 2971 000a A168     		ldr	r1, [r4, #8]
 2972 000c 0140     		ands	r1, r1, r0
 2973 000e 830C     		lsrs	r3, r0, #18
 2974 0010 20FA03F3 		lsr	r3, r0, r3
 2975 0014 02EAD333 		and	r3, r2, r3, lsr #15
 2976              	.LVL261:
2510:../stdperiph/source/stm32f37x_rtc.c ****   
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 105


 2977              		.loc 1 2510 0
 2978 0018 E268     		ldr	r2, [r4, #12]
 2979              	.LVL262:
 2980 001a 02EA1010 		and	r0, r2, r0, lsr #4
 2981              	.LVL263:
2513:../stdperiph/source/stm32f37x_rtc.c ****   {
 2982              		.loc 1 2513 0
 2983 001e 0B43     		orrs	r3, r1, r3
 2984              	.LVL264:
 2985 0020 02D0     		beq	.L263
2513:../stdperiph/source/stm32f37x_rtc.c ****   {
 2986              		.loc 1 2513 0 is_stmt 0 discriminator 1
 2987 0022 80B2     		uxth	r0, r0
 2988              	.LVL265:
 2989 0024 10B9     		cbnz	r0, .L264
 2990 0026 02E0     		b	.L262
 2991              	.LVL266:
 2992              	.L263:
2519:../stdperiph/source/stm32f37x_rtc.c ****   }
 2993              		.loc 1 2519 0 is_stmt 1
 2994 0028 0020     		movs	r0, #0
 2995              	.LVL267:
 2996 002a 00E0     		b	.L262
 2997              	.L264:
2515:../stdperiph/source/stm32f37x_rtc.c ****   }
 2998              		.loc 1 2515 0
 2999 002c 0120     		movs	r0, #1
 3000              	.L262:
 3001              	.LVL268:
2522:../stdperiph/source/stm32f37x_rtc.c **** 
 3002              		.loc 1 2522 0
 3003 002e 5DF8044B 		ldr	r4, [sp], #4
 3004              	.LCFI30:
 3005              		.cfi_restore 4
 3006              		.cfi_def_cfa_offset 0
 3007 0032 7047     		bx	lr
 3008              	.L267:
 3009              		.align	2
 3010              	.L266:
 3011 0034 00280040 		.word	1073752064
 3012              		.cfi_endproc
 3013              	.LFE160:
 3015              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3016              		.align	2
 3017              		.global	RTC_ClearITPendingBit
 3018              		.thumb
 3019              		.thumb_func
 3021              	RTC_ClearITPendingBit:
 3022              	.LFB161:
2538:../stdperiph/source/stm32f37x_rtc.c ****   uint32_t tmpreg = 0;
 3023              		.loc 1 2538 0
 3024              		.cfi_startproc
 3025              		@ args = 0, pretend = 0, frame = 0
 3026              		@ frame_needed = 0, uses_anonymous_args = 0
 3027              		@ link register save eliminated.
 3028              	.LVL269:
2548:../stdperiph/source/stm32f37x_rtc.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 106


 3029              		.loc 1 2548 0
 3030 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 3031              	.LVL270:
 3032 0004 40F08000 		orr	r0, r0, #128
 3033 0008 034A     		ldr	r2, .L269
 3034 000a D368     		ldr	r3, [r2, #12]
 3035 000c 03F08003 		and	r3, r3, #128
 3036 0010 63EA0000 		orn	r0, r3, r0
 3037 0014 D060     		str	r0, [r2, #12]
 3038 0016 7047     		bx	lr
 3039              	.L270:
 3040              		.align	2
 3041              	.L269:
 3042 0018 00280040 		.word	1073752064
 3043              		.cfi_endproc
 3044              	.LFE161:
 3046              		.text
 3047              	.Letext0:
 3048              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 3049              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 3050              		.file 4 "../cmsis/include/stm32f37x.h"
 3051              		.file 5 "../stdperiph/include/stm32f37x_rtc.h"
 3052              		.file 6 "../cmsis/include/core_cm4.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 107


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f37x_rtc.c
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:22     .text.RTC_ByteToBcd2:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:26     .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:67     .text.RTC_Bcd2ToByte:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:71     .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:96     .text.RTC_StructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:101    .text.RTC_StructInit:00000000 RTC_StructInit
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:123    .text.RTC_WriteProtectionCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:128    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:155    .text.RTC_WriteProtectionCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:160    .text.RTC_EnterInitMode:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:165    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:235    .text.RTC_EnterInitMode:0000004c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:240    .text.RTC_ExitInitMode:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:245    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:261    .text.RTC_ExitInitMode:0000000c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:266    .text.RTC_Init:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:271    .text.RTC_Init:00000000 RTC_Init
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:336    .text.RTC_Init:00000048 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:341    .text.RTC_WaitForSynchro:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:346    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:417    .text.RTC_WaitForSynchro:0000004c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:422    .text.RTC_DeInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:427    .text.RTC_DeInit:00000000 RTC_DeInit
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:553    .text.RTC_DeInit:00000094 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:559    .text.RTC_RefClockCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:564    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:625    .text.RTC_RefClockCmd:00000040 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:630    .text.RTC_BypassShadowCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:635    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:673    .text.RTC_BypassShadowCmd:0000002c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:678    .text.RTC_SetTime:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:683    .text.RTC_SetTime:00000000 RTC_SetTime
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:821    .text.RTC_SetTime:000000a0 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:826    .text.RTC_TimeStructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:831    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:853    .text.RTC_GetTime:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:858    .text.RTC_GetTime:00000000 RTC_GetTime
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:919    .text.RTC_GetTime:00000048 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:924    .text.RTC_GetSubSecond:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:929    .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:948    .text.RTC_GetSubSecond:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:953    .text.RTC_SetDate:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:958    .text.RTC_SetDate:00000000 RTC_SetDate
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1086   .text.RTC_SetDate:00000094 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1091   .text.RTC_DateStructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1096   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1119   .text.RTC_GetDate:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1124   .text.RTC_GetDate:00000000 RTC_GetDate
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1183   .text.RTC_GetDate:00000044 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1188   .text.RTC_SetAlarm:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1193   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1334   .text.RTC_SetAlarm:000000a0 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1339   .text.RTC_AlarmStructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1344   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1373   .text.RTC_GetAlarm:00000000 $t
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 108


C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1378   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1464   .text.RTC_GetAlarm:00000068 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1469   .text.RTC_AlarmCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1474   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1563   .text.RTC_AlarmCmd:0000005c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1568   .text.RTC_AlarmSubSecondConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1573   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1621   .text.RTC_AlarmSubSecondConfig:00000028 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1626   .text.RTC_GetAlarmSubSecond:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1631   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1662   .text.RTC_GetAlarmSubSecond:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1667   .text.RTC_WakeUpClockConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1672   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1703   .text.RTC_WakeUpClockConfig:00000020 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1708   .text.RTC_SetWakeUpCounter:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1713   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1737   .text.RTC_SetWakeUpCounter:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1742   .text.RTC_GetWakeUpCounter:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1747   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1763   .text.RTC_GetWakeUpCounter:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1768   .text.RTC_WakeUpCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1773   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1861   .text.RTC_WakeUpCmd:00000060 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1866   .text.RTC_DayLightSavingConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1871   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1903   .text.RTC_DayLightSavingConfig:00000020 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1908   .text.RTC_GetStoreOperation:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1913   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1929   .text.RTC_GetStoreOperation:0000000c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1934   .text.RTC_OutputConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1939   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1971   .text.RTC_OutputConfig:00000020 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1976   .text.RTC_CalibOutputCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:1981   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2019   .text.RTC_CalibOutputCmd:0000002c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2024   .text.RTC_CalibOutputConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2029   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2060   .text.RTC_CalibOutputConfig:00000020 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2065   .text.RTC_SmoothCalibConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2070   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2152   .text.RTC_SmoothCalibConfig:00000050 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2157   .text.RTC_TimeStampCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2162   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2208   .text.RTC_TimeStampCmd:0000002c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2213   .text.RTC_GetTimeStamp:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2218   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2310   .text.RTC_GetTimeStamp:00000078 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2315   .text.RTC_GetTimeStampSubSecond:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2320   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2335   .text.RTC_GetTimeStampSubSecond:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2340   .text.RTC_TamperTriggerConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2345   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2374   .text.RTC_TamperTriggerConfig:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2379   .text.RTC_TamperCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2384   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2413   .text.RTC_TamperCmd:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2418   .text.RTC_TamperFilterConfig:00000000 $t
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccObxLfN.s 			page 109


C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2423   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2445   .text.RTC_TamperFilterConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2450   .text.RTC_TamperSamplingFreqConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2455   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2477   .text.RTC_TamperSamplingFreqConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2482   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2487   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2509   .text.RTC_TamperPinsPrechargeDuration:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2514   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2519   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2545   .text.RTC_TimeStampOnTamperDetectionCmd:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2550   .text.RTC_TamperPullUpCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2555   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2581   .text.RTC_TamperPullUpCmd:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2586   .text.RTC_WriteBackupRegister:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2591   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2625   .text.RTC_WriteBackupRegister:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2630   .text.RTC_ReadBackupRegister:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2635   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2669   .text.RTC_ReadBackupRegister:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2674   .text.RTC_OutputTypeConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2679   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2701   .text.RTC_OutputTypeConfig:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2706   .text.RTC_SynchroShiftConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2711   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2804   .text.RTC_SynchroShiftConfig:00000060 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2809   .text.RTC_ITConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2814   .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2868   .text.RTC_ITConfig:00000044 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2873   .text.RTC_GetFlagStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2878   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2909   .text.RTC_GetFlagStatus:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2915   .text.RTC_ClearFlag:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2920   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2941   .text.RTC_ClearFlag:00000018 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2947   .text.RTC_GetITStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:2952   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:3011   .text.RTC_GetITStatus:00000034 $d
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:3016   .text.RTC_ClearITPendingBit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:3021   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\Users\strag\AppData\Local\Temp\ccObxLfN.s:3042   .text.RTC_ClearITPendingBit:00000018 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
