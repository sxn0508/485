ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f37x_usart.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.USART_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	USART_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	USART_DeInit:
  28              	.LFB111:
  29              		.file 1 "../stdperiph/source/stm32f37x_usart.c"
   1:../stdperiph/source/stm32f37x_usart.c **** /**
   2:../stdperiph/source/stm32f37x_usart.c ****   ******************************************************************************
   3:../stdperiph/source/stm32f37x_usart.c ****   * @file    stm32f37x_usart.c
   4:../stdperiph/source/stm32f37x_usart.c ****   * @author  MCD Application Team
   5:../stdperiph/source/stm32f37x_usart.c ****   * @version V1.0.0
   6:../stdperiph/source/stm32f37x_usart.c ****   * @date    20-September-2012
   7:../stdperiph/source/stm32f37x_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../stdperiph/source/stm32f37x_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../stdperiph/source/stm32f37x_usart.c ****   *          transmitter (USART):
  10:../stdperiph/source/stm32f37x_usart.c ****   *           + Initialization and Configuration
  11:../stdperiph/source/stm32f37x_usart.c ****   *           + STOP Mode
  12:../stdperiph/source/stm32f37x_usart.c ****   *           + AutoBaudRate
  13:../stdperiph/source/stm32f37x_usart.c ****   *           + Data transfers
  14:../stdperiph/source/stm32f37x_usart.c ****   *           + Multi-Processor Communication
  15:../stdperiph/source/stm32f37x_usart.c ****   *           + LIN mode
  16:../stdperiph/source/stm32f37x_usart.c ****   *           + Half-duplex mode
  17:../stdperiph/source/stm32f37x_usart.c ****   *           + Smartcard mode
  18:../stdperiph/source/stm32f37x_usart.c ****   *           + IrDA mode
  19:../stdperiph/source/stm32f37x_usart.c ****   *           + RS485 mode  
  20:../stdperiph/source/stm32f37x_usart.c ****   *           + DMA transfers management
  21:../stdperiph/source/stm32f37x_usart.c ****   *           + Interrupts and flags management
  22:../stdperiph/source/stm32f37x_usart.c ****   *           
  23:../stdperiph/source/stm32f37x_usart.c ****   *  @verbatim
  24:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
  25:../stdperiph/source/stm32f37x_usart.c ****                        ##### How to use this driver #####
  26:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
  27:../stdperiph/source/stm32f37x_usart.c ****     [..]
  28:../stdperiph/source/stm32f37x_usart.c ****         (#) Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE)
  29:../stdperiph/source/stm32f37x_usart.c ****             function for USART1 or using RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 2


  30:../stdperiph/source/stm32f37x_usart.c ****             function for USART2 and USART3.
  31:../stdperiph/source/stm32f37x_usart.c ****         (#) According to the USART mode, enable the GPIO clocks using 
  32:../stdperiph/source/stm32f37x_usart.c ****             RCC_AHBPeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  33:../stdperiph/source/stm32f37x_usart.c ****             or and SCLK). 
  34:../stdperiph/source/stm32f37x_usart.c ****         (#) Peripheral's alternate function: 
  35:../stdperiph/source/stm32f37x_usart.c ****            (++) Connect the pin to the desired peripherals' Alternate 
  36:../stdperiph/source/stm32f37x_usart.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  37:../stdperiph/source/stm32f37x_usart.c ****            (++) Configure the desired pin in alternate function by:
  38:../stdperiph/source/stm32f37x_usart.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  39:../stdperiph/source/stm32f37x_usart.c ****            (++) Select the type, pull-up/pull-down and output speed via 
  40:../stdperiph/source/stm32f37x_usart.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  41:../stdperiph/source/stm32f37x_usart.c ****            (++) Call GPIO_Init() function.        
  42:../stdperiph/source/stm32f37x_usart.c ****         (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../stdperiph/source/stm32f37x_usart.c ****             flow control and Mode(Receiver/Transmitter) using the SPI_Init()
  44:../stdperiph/source/stm32f37x_usart.c ****             function.  
  45:../stdperiph/source/stm32f37x_usart.c ****         (#) For synchronous mode, enable the clock and program the polarity,
  46:../stdperiph/source/stm32f37x_usart.c ****             phase and last bit using the USART_ClockInit() function.  
  47:../stdperiph/source/stm32f37x_usart.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  48:../stdperiph/source/stm32f37x_usart.c ****             USART_ITConfig() if you need to use interrupt mode.   
  49:../stdperiph/source/stm32f37x_usart.c ****         (#) When using the DMA mode: 
  50:../stdperiph/source/stm32f37x_usart.c ****            (++) Configure the DMA using DMA_Init() function.
  51:../stdperiph/source/stm32f37x_usart.c ****            (++) Active the needed channel Request using USART_DMACmd() function.   
  52:../stdperiph/source/stm32f37x_usart.c ****         (#) Enable the USART using the USART_Cmd() function.   
  53:../stdperiph/source/stm32f37x_usart.c ****         (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode.   
  54:../stdperiph/source/stm32f37x_usart.c ****     [..]
  55:../stdperiph/source/stm32f37x_usart.c ****             Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  56:../stdperiph/source/stm32f37x_usart.c ****             for more details.
  57:../stdperiph/source/stm32f37x_usart.c ****             
  58:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
  59:../stdperiph/source/stm32f37x_usart.c ****        
  60:../stdperiph/source/stm32f37x_usart.c ****   ******************************************************************************
  61:../stdperiph/source/stm32f37x_usart.c ****   * @attention
  62:../stdperiph/source/stm32f37x_usart.c ****   *
  63:../stdperiph/source/stm32f37x_usart.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  64:../stdperiph/source/stm32f37x_usart.c ****   *
  65:../stdperiph/source/stm32f37x_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  66:../stdperiph/source/stm32f37x_usart.c ****   * You may not use this file except in compliance with the License.
  67:../stdperiph/source/stm32f37x_usart.c ****   * You may obtain a copy of the License at:
  68:../stdperiph/source/stm32f37x_usart.c ****   *
  69:../stdperiph/source/stm32f37x_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  70:../stdperiph/source/stm32f37x_usart.c ****   *
  71:../stdperiph/source/stm32f37x_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  72:../stdperiph/source/stm32f37x_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  73:../stdperiph/source/stm32f37x_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  74:../stdperiph/source/stm32f37x_usart.c ****   * See the License for the specific language governing permissions and
  75:../stdperiph/source/stm32f37x_usart.c ****   * limitations under the License.
  76:../stdperiph/source/stm32f37x_usart.c ****   *
  77:../stdperiph/source/stm32f37x_usart.c ****   ******************************************************************************
  78:../stdperiph/source/stm32f37x_usart.c ****   */
  79:../stdperiph/source/stm32f37x_usart.c **** 
  80:../stdperiph/source/stm32f37x_usart.c **** /* Includes ------------------------------------------------------------------*/
  81:../stdperiph/source/stm32f37x_usart.c **** #include "stm32f37x_usart.h"
  82:../stdperiph/source/stm32f37x_usart.c **** #include "stm32f37x_rcc.h"
  83:../stdperiph/source/stm32f37x_usart.c **** 
  84:../stdperiph/source/stm32f37x_usart.c **** /** @addtogroup STM32F37x_StdPeriph_Driver
  85:../stdperiph/source/stm32f37x_usart.c ****   * @{
  86:../stdperiph/source/stm32f37x_usart.c ****   */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 3


  87:../stdperiph/source/stm32f37x_usart.c **** 
  88:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART 
  89:../stdperiph/source/stm32f37x_usart.c ****   * @brief USART driver modules
  90:../stdperiph/source/stm32f37x_usart.c ****   * @{
  91:../stdperiph/source/stm32f37x_usart.c ****   */
  92:../stdperiph/source/stm32f37x_usart.c **** 
  93:../stdperiph/source/stm32f37x_usart.c **** /* Private typedef -----------------------------------------------------------*/
  94:../stdperiph/source/stm32f37x_usart.c **** /* Private define ------------------------------------------------------------*/
  95:../stdperiph/source/stm32f37x_usart.c **** 
  96:../stdperiph/source/stm32f37x_usart.c **** /*!< USART CR1 register clear Mask ((~(uint32_t)0xFFFFE6F3)) */
  97:../stdperiph/source/stm32f37x_usart.c **** #define CR1_CLEAR_MASK            ((uint32_t)(USART_CR1_M | USART_CR1_PCE | \
  98:../stdperiph/source/stm32f37x_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
  99:../stdperiph/source/stm32f37x_usart.c ****                                               USART_CR1_RE))
 100:../stdperiph/source/stm32f37x_usart.c **** 
 101:../stdperiph/source/stm32f37x_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint32_t)0xFFFFF0FF)) */
 102:../stdperiph/source/stm32f37x_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint32_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 103:../stdperiph/source/stm32f37x_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 104:../stdperiph/source/stm32f37x_usart.c **** 
 105:../stdperiph/source/stm32f37x_usart.c **** /*!< USART CR3 register clear Mask ((~(uint32_t)0xFFFFFCFF)) */
 106:../stdperiph/source/stm32f37x_usart.c **** #define CR3_CLEAR_MASK            ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 107:../stdperiph/source/stm32f37x_usart.c **** 
 108:../stdperiph/source/stm32f37x_usart.c **** /*!< USART Interrupts mask */
 109:../stdperiph/source/stm32f37x_usart.c **** #define IT_MASK                   ((uint32_t)0x000000FF)
 110:../stdperiph/source/stm32f37x_usart.c **** 
 111:../stdperiph/source/stm32f37x_usart.c **** /* Private macro -------------------------------------------------------------*/
 112:../stdperiph/source/stm32f37x_usart.c **** /* Private variables ---------------------------------------------------------*/
 113:../stdperiph/source/stm32f37x_usart.c **** /* Private function prototypes -----------------------------------------------*/
 114:../stdperiph/source/stm32f37x_usart.c **** /* Private functions ---------------------------------------------------------*/
 115:../stdperiph/source/stm32f37x_usart.c **** 
 116:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Private_Functions
 117:../stdperiph/source/stm32f37x_usart.c ****   * @{
 118:../stdperiph/source/stm32f37x_usart.c ****   */
 119:../stdperiph/source/stm32f37x_usart.c **** 
 120:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 121:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   Initialization and Configuration functions 
 122:../stdperiph/source/stm32f37x_usart.c ****  *
 123:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
 124:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 125:../stdperiph/source/stm32f37x_usart.c ****           ##### Initialization and Configuration functions #####
 126:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 127:../stdperiph/source/stm32f37x_usart.c ****     [..]
 128:../stdperiph/source/stm32f37x_usart.c ****         This subsection provides a set of functions allowing to initialize the USART 
 129:../stdperiph/source/stm32f37x_usart.c ****         in asynchronous and in synchronous modes.
 130:../stdperiph/source/stm32f37x_usart.c ****         (+) For the asynchronous mode only these parameters can be configured: 
 131:../stdperiph/source/stm32f37x_usart.c ****           (++) Baud Rate.
 132:../stdperiph/source/stm32f37x_usart.c ****           (++) Word Length.
 133:../stdperiph/source/stm32f37x_usart.c ****           (++) Stop Bit.
 134:../stdperiph/source/stm32f37x_usart.c ****           (++) Parity: If the parity is enabled, then the MSB bit of the data written
 135:../stdperiph/source/stm32f37x_usart.c ****                in the data register is transmitted but is changed by the parity bit.
 136:../stdperiph/source/stm32f37x_usart.c ****                Depending on the frame length defined by the M bit (8-bits or 9-bits),
 137:../stdperiph/source/stm32f37x_usart.c ****                the possible USART frame formats are as listed in the following table:
 138:../stdperiph/source/stm32f37x_usart.c **** 
 139:../stdperiph/source/stm32f37x_usart.c ****    +-------------------------------------------------------------+     
 140:../stdperiph/source/stm32f37x_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 141:../stdperiph/source/stm32f37x_usart.c ****    |---------------------|---------------------------------------|             
 142:../stdperiph/source/stm32f37x_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 143:../stdperiph/source/stm32f37x_usart.c ****    |---------|-----------|---------------------------------------|  
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 4


 144:../stdperiph/source/stm32f37x_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 145:../stdperiph/source/stm32f37x_usart.c ****    |---------|-----------|---------------------------------------|  
 146:../stdperiph/source/stm32f37x_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 147:../stdperiph/source/stm32f37x_usart.c ****    |---------|-----------|---------------------------------------|  
 148:../stdperiph/source/stm32f37x_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 149:../stdperiph/source/stm32f37x_usart.c ****    +-------------------------------------------------------------+            
 150:../stdperiph/source/stm32f37x_usart.c **** 
 151:../stdperiph/source/stm32f37x_usart.c ****           (++) Hardware flow control.
 152:../stdperiph/source/stm32f37x_usart.c ****           (++) Receiver/transmitter modes.
 153:../stdperiph/source/stm32f37x_usart.c ****     [..] The USART_Init() function follows the USART  asynchronous configuration 
 154:../stdperiph/source/stm32f37x_usart.c ****          procedure(details for the procedure are available in reference manual.
 155:../stdperiph/source/stm32f37x_usart.c ****         (+) For the synchronous mode in addition to the asynchronous mode parameters
 156:../stdperiph/source/stm32f37x_usart.c ****             these parameters should be also configured:
 157:../stdperiph/source/stm32f37x_usart.c ****            (++) USART Clock Enabled.
 158:../stdperiph/source/stm32f37x_usart.c ****            (++) USART polarity.
 159:../stdperiph/source/stm32f37x_usart.c ****            (++) USART phase.
 160:../stdperiph/source/stm32f37x_usart.c ****            (++) USART LastBit.
 161:../stdperiph/source/stm32f37x_usart.c ****     [..] These parameters can be configured using the USART_ClockInit() function.
 162:../stdperiph/source/stm32f37x_usart.c **** 
 163:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
 164:../stdperiph/source/stm32f37x_usart.c ****   * @{
 165:../stdperiph/source/stm32f37x_usart.c ****   */
 166:../stdperiph/source/stm32f37x_usart.c ****   
 167:../stdperiph/source/stm32f37x_usart.c **** /**
 168:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 169:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 170:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 171:../stdperiph/source/stm32f37x_usart.c ****   */
 172:../stdperiph/source/stm32f37x_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 173:../stdperiph/source/stm32f37x_usart.c **** {
  30              		.loc 1 173 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
 174:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 175:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 176:../stdperiph/source/stm32f37x_usart.c ****   
 177:../stdperiph/source/stm32f37x_usart.c ****   if (USARTx == USART1)
  40              		.loc 1 177 0
  41 0002 154B     		ldr	r3, .L6
  42 0004 9842     		cmp	r0, r3
  43 0006 0AD1     		bne	.L2
 178:../stdperiph/source/stm32f37x_usart.c ****   {
 179:../stdperiph/source/stm32f37x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  44              		.loc 1 179 0
  45 0008 0121     		movs	r1, #1
  46 000a 4FF48040 		mov	r0, #16384
  47              	.LVL1:
  48 000e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  49              	.LVL2:
 180:../stdperiph/source/stm32f37x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 5


  50              		.loc 1 180 0
  51 0012 0021     		movs	r1, #0
  52 0014 4FF48040 		mov	r0, #16384
  53 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  54              	.LVL3:
  55 001c 08BD     		pop	{r3, pc}
  56              	.LVL4:
  57              	.L2:
 181:../stdperiph/source/stm32f37x_usart.c ****   }
 182:../stdperiph/source/stm32f37x_usart.c ****   else if (USARTx == USART2)
  58              		.loc 1 182 0
  59 001e 0F4B     		ldr	r3, .L6+4
  60 0020 9842     		cmp	r0, r3
  61 0022 0AD1     		bne	.L4
 183:../stdperiph/source/stm32f37x_usart.c ****   {
 184:../stdperiph/source/stm32f37x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  62              		.loc 1 184 0
  63 0024 0121     		movs	r1, #1
  64 0026 4FF40030 		mov	r0, #131072
  65              	.LVL5:
  66 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              	.LVL6:
 185:../stdperiph/source/stm32f37x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);    
  68              		.loc 1 185 0
  69 002e 0021     		movs	r1, #0
  70 0030 4FF40030 		mov	r0, #131072
  71 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72              	.LVL7:
  73 0038 08BD     		pop	{r3, pc}
  74              	.LVL8:
  75              	.L4:
 186:../stdperiph/source/stm32f37x_usart.c ****   }
 187:../stdperiph/source/stm32f37x_usart.c ****   else 
 188:../stdperiph/source/stm32f37x_usart.c ****   {
 189:../stdperiph/source/stm32f37x_usart.c ****     if  (USARTx == USART3)
  76              		.loc 1 189 0
  77 003a 094B     		ldr	r3, .L6+8
  78 003c 9842     		cmp	r0, r3
  79 003e 09D1     		bne	.L1
 190:../stdperiph/source/stm32f37x_usart.c ****     {
 191:../stdperiph/source/stm32f37x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  80              		.loc 1 191 0
  81 0040 0121     		movs	r1, #1
  82 0042 4FF48020 		mov	r0, #262144
  83              	.LVL9:
  84 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  85              	.LVL10:
 192:../stdperiph/source/stm32f37x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  86              		.loc 1 192 0
  87 004a 0021     		movs	r1, #0
  88 004c 4FF48020 		mov	r0, #262144
  89 0050 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90              	.LVL11:
  91              	.L1:
  92 0054 08BD     		pop	{r3, pc}
  93              	.L7:
  94 0056 00BF     		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 6


  95              	.L6:
  96 0058 00380140 		.word	1073821696
  97 005c 00440040 		.word	1073759232
  98 0060 00480040 		.word	1073760256
  99              		.cfi_endproc
 100              	.LFE111:
 102              		.section	.text.USART_Init,"ax",%progbits
 103              		.align	2
 104              		.global	USART_Init
 105              		.thumb
 106              		.thumb_func
 108              	USART_Init:
 109              	.LFB112:
 193:../stdperiph/source/stm32f37x_usart.c ****     }
 194:../stdperiph/source/stm32f37x_usart.c ****   }  
 195:../stdperiph/source/stm32f37x_usart.c **** }
 196:../stdperiph/source/stm32f37x_usart.c **** 
 197:../stdperiph/source/stm32f37x_usart.c **** /**
 198:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 199:../stdperiph/source/stm32f37x_usart.c ****   *         parameters in the USART_InitStruct .
 200:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 201:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 202:../stdperiph/source/stm32f37x_usart.c ****   *         that contains the configuration information for the specified USART peripheral.
 203:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 204:../stdperiph/source/stm32f37x_usart.c ****   */
 205:../stdperiph/source/stm32f37x_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 206:../stdperiph/source/stm32f37x_usart.c **** {
 110              		.loc 1 206 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 48
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              	.LVL12:
 115 0000 30B5     		push	{r4, r5, lr}
 116              	.LCFI1:
 117              		.cfi_def_cfa_offset 12
 118              		.cfi_offset 4, -12
 119              		.cfi_offset 5, -8
 120              		.cfi_offset 14, -4
 121 0002 8DB0     		sub	sp, sp, #52
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 64
 124 0004 0446     		mov	r4, r0
 125 0006 0D46     		mov	r5, r1
 126              	.LVL13:
 207:../stdperiph/source/stm32f37x_usart.c ****   uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 208:../stdperiph/source/stm32f37x_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 209:../stdperiph/source/stm32f37x_usart.c **** 
 210:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 211:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 212:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 213:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 214:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 215:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 216:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 217:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 218:../stdperiph/source/stm32f37x_usart.c ****   
 219:../stdperiph/source/stm32f37x_usart.c ****   /* Disable USART */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 7


 220:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 127              		.loc 1 220 0
 128 0008 0368     		ldr	r3, [r0]
 129 000a 23F00103 		bic	r3, r3, #1
 130 000e 0360     		str	r3, [r0]
 221:../stdperiph/source/stm32f37x_usart.c ****   
 222:../stdperiph/source/stm32f37x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 223:../stdperiph/source/stm32f37x_usart.c ****   tmpreg = USARTx->CR2;
 131              		.loc 1 223 0
 132 0010 4368     		ldr	r3, [r0, #4]
 133              	.LVL14:
 224:../stdperiph/source/stm32f37x_usart.c ****   /* Clear STOP[13:12] bits */
 225:../stdperiph/source/stm32f37x_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 134              		.loc 1 225 0
 135 0012 23F44052 		bic	r2, r3, #12288
 136              	.LVL15:
 226:../stdperiph/source/stm32f37x_usart.c **** 
 227:../stdperiph/source/stm32f37x_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 228:../stdperiph/source/stm32f37x_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 229:../stdperiph/source/stm32f37x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 137              		.loc 1 229 0
 138 0016 8B68     		ldr	r3, [r1, #8]
 139 0018 1343     		orrs	r3, r3, r2
 140              	.LVL16:
 230:../stdperiph/source/stm32f37x_usart.c ****   
 231:../stdperiph/source/stm32f37x_usart.c ****   /* Write to USART CR2 */
 232:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 = tmpreg;
 141              		.loc 1 232 0
 142 001a 4360     		str	r3, [r0, #4]
 233:../stdperiph/source/stm32f37x_usart.c **** 
 234:../stdperiph/source/stm32f37x_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 235:../stdperiph/source/stm32f37x_usart.c ****   tmpreg = USARTx->CR1;
 143              		.loc 1 235 0
 144 001c 0368     		ldr	r3, [r0]
 145              	.LVL17:
 236:../stdperiph/source/stm32f37x_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 237:../stdperiph/source/stm32f37x_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 146              		.loc 1 237 0
 147 001e 23F4B052 		bic	r2, r3, #5632
 148 0022 22F00C02 		bic	r2, r2, #12
 149              	.LVL18:
 238:../stdperiph/source/stm32f37x_usart.c **** 
 239:../stdperiph/source/stm32f37x_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 240:../stdperiph/source/stm32f37x_usart.c ****   /* Set the M bits according to USART_WordLength value */
 241:../stdperiph/source/stm32f37x_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 242:../stdperiph/source/stm32f37x_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 243:../stdperiph/source/stm32f37x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 150              		.loc 1 243 0
 151 0026 4968     		ldr	r1, [r1, #4]
 152              	.LVL19:
 153 0028 EB68     		ldr	r3, [r5, #12]
 154 002a 1943     		orrs	r1, r1, r3
 244:../stdperiph/source/stm32f37x_usart.c ****             USART_InitStruct->USART_Mode;
 155              		.loc 1 244 0
 156 002c 2B69     		ldr	r3, [r5, #16]
 243:../stdperiph/source/stm32f37x_usart.c ****             USART_InitStruct->USART_Mode;
 157              		.loc 1 243 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 8


 158 002e 0B43     		orrs	r3, r3, r1
 159 0030 1343     		orrs	r3, r3, r2
 160              	.LVL20:
 245:../stdperiph/source/stm32f37x_usart.c **** 
 246:../stdperiph/source/stm32f37x_usart.c ****   /* Write to USART CR1 */
 247:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 = tmpreg;
 161              		.loc 1 247 0
 162 0032 0360     		str	r3, [r0]
 248:../stdperiph/source/stm32f37x_usart.c **** 
 249:../stdperiph/source/stm32f37x_usart.c ****   /*---------------------------- USART CR3 Configuration -----------------------*/  
 250:../stdperiph/source/stm32f37x_usart.c ****   tmpreg = USARTx->CR3;
 163              		.loc 1 250 0
 164 0034 8368     		ldr	r3, [r0, #8]
 165              	.LVL21:
 251:../stdperiph/source/stm32f37x_usart.c ****   /* Clear CTSE and RTSE bits */
 252:../stdperiph/source/stm32f37x_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 166              		.loc 1 252 0
 167 0036 23F44072 		bic	r2, r3, #768
 168              	.LVL22:
 253:../stdperiph/source/stm32f37x_usart.c **** 
 254:../stdperiph/source/stm32f37x_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 255:../stdperiph/source/stm32f37x_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 256:../stdperiph/source/stm32f37x_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 169              		.loc 1 256 0
 170 003a 6B69     		ldr	r3, [r5, #20]
 171 003c 1343     		orrs	r3, r3, r2
 172              	.LVL23:
 257:../stdperiph/source/stm32f37x_usart.c **** 
 258:../stdperiph/source/stm32f37x_usart.c ****   /* Write to USART CR3 */
 259:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 = tmpreg;
 173              		.loc 1 259 0
 174 003e 8360     		str	r3, [r0, #8]
 260:../stdperiph/source/stm32f37x_usart.c **** 
 261:../stdperiph/source/stm32f37x_usart.c ****   /*---------------------------- USART BRR Configuration -----------------------*/
 262:../stdperiph/source/stm32f37x_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 263:../stdperiph/source/stm32f37x_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 175              		.loc 1 263 0
 176 0040 6846     		mov	r0, sp
 177              	.LVL24:
 178 0042 FFF7FEFF 		bl	RCC_GetClocksFreq
 179              	.LVL25:
 264:../stdperiph/source/stm32f37x_usart.c ****   
 265:../stdperiph/source/stm32f37x_usart.c ****   if (USARTx == USART1)
 180              		.loc 1 265 0
 181 0046 174B     		ldr	r3, .L17
 182 0048 9C42     		cmp	r4, r3
 183 004a 01D1     		bne	.L9
 266:../stdperiph/source/stm32f37x_usart.c ****   {
 267:../stdperiph/source/stm32f37x_usart.c ****     apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 184              		.loc 1 267 0
 185 004c 099A     		ldr	r2, [sp, #36]
 186              	.LVL26:
 187 004e 05E0     		b	.L10
 188              	.LVL27:
 189              	.L9:
 268:../stdperiph/source/stm32f37x_usart.c ****   }
 269:../stdperiph/source/stm32f37x_usart.c ****   else if (USARTx == USART2)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 9


 190              		.loc 1 269 0
 191 0050 154B     		ldr	r3, .L17+4
 192 0052 9C42     		cmp	r4, r3
 193 0054 01D1     		bne	.L11
 270:../stdperiph/source/stm32f37x_usart.c ****   {
 271:../stdperiph/source/stm32f37x_usart.c ****     apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 194              		.loc 1 271 0
 195 0056 0A9A     		ldr	r2, [sp, #40]
 196              	.LVL28:
 197 0058 00E0     		b	.L10
 198              	.LVL29:
 199              	.L11:
 272:../stdperiph/source/stm32f37x_usart.c ****   }
 273:../stdperiph/source/stm32f37x_usart.c ****   else 
 274:../stdperiph/source/stm32f37x_usart.c ****   {
 275:../stdperiph/source/stm32f37x_usart.c ****     apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 200              		.loc 1 275 0
 201 005a 0B9A     		ldr	r2, [sp, #44]
 202              	.LVL30:
 203              	.L10:
 276:../stdperiph/source/stm32f37x_usart.c ****   }  
 277:../stdperiph/source/stm32f37x_usart.c ****   
 278:../stdperiph/source/stm32f37x_usart.c ****   /* Determine the integer part */
 279:../stdperiph/source/stm32f37x_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 204              		.loc 1 279 0
 205 005c 2368     		ldr	r3, [r4]
 206 005e 13F4004F 		tst	r3, #32768
 207 0062 06D0     		beq	.L12
 280:../stdperiph/source/stm32f37x_usart.c ****   {
 281:../stdperiph/source/stm32f37x_usart.c ****     /* (divider * 10) computing in case Oversampling mode is 8 Samples */
 282:../stdperiph/source/stm32f37x_usart.c ****     divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 208              		.loc 1 282 0
 209 0064 5200     		lsls	r2, r2, #1
 210              	.LVL31:
 211 0066 2968     		ldr	r1, [r5]
 212 0068 B2FBF1F3 		udiv	r3, r2, r1
 213              	.LVL32:
 283:../stdperiph/source/stm32f37x_usart.c ****     tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 214              		.loc 1 283 0
 215 006c 01FB1322 		mls	r2, r1, r3, r2
 216              	.LVL33:
 217 0070 04E0     		b	.L13
 218              	.LVL34:
 219              	.L12:
 284:../stdperiph/source/stm32f37x_usart.c ****   }
 285:../stdperiph/source/stm32f37x_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 286:../stdperiph/source/stm32f37x_usart.c ****   {
 287:../stdperiph/source/stm32f37x_usart.c ****     /* (divider * 10) computing in case Oversampling mode is 16 Samples */
 288:../stdperiph/source/stm32f37x_usart.c ****     divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 220              		.loc 1 288 0
 221 0072 2968     		ldr	r1, [r5]
 222 0074 B2FBF1F3 		udiv	r3, r2, r1
 223              	.LVL35:
 289:../stdperiph/source/stm32f37x_usart.c ****     tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 224              		.loc 1 289 0
 225 0078 01FB1322 		mls	r2, r1, r3, r2
 226              	.LVL36:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 10


 227              	.L13:
 290:../stdperiph/source/stm32f37x_usart.c ****   }
 291:../stdperiph/source/stm32f37x_usart.c ****   
 292:../stdperiph/source/stm32f37x_usart.c ****   /* round the divider : if fractional part i greater than 0.5 increment divider */
 293:../stdperiph/source/stm32f37x_usart.c ****   if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 228              		.loc 1 293 0
 229 007c 2968     		ldr	r1, [r5]
 230 007e B2EB510F 		cmp	r2, r1, lsr #1
 231 0082 00D3     		bcc	.L14
 294:../stdperiph/source/stm32f37x_usart.c ****   {
 295:../stdperiph/source/stm32f37x_usart.c ****     divider++;
 232              		.loc 1 295 0
 233 0084 0133     		adds	r3, r3, #1
 234              	.LVL37:
 235              	.L14:
 296:../stdperiph/source/stm32f37x_usart.c ****   } 
 297:../stdperiph/source/stm32f37x_usart.c ****   
 298:../stdperiph/source/stm32f37x_usart.c ****   /* Implement the divider in case Oversampling mode is 8 Samples */
 299:../stdperiph/source/stm32f37x_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 236              		.loc 1 299 0
 237 0086 2268     		ldr	r2, [r4]
 238              	.LVL38:
 239 0088 12F4004F 		tst	r2, #32768
 240 008c 06D0     		beq	.L15
 300:../stdperiph/source/stm32f37x_usart.c ****   {
 301:../stdperiph/source/stm32f37x_usart.c ****     /* get the LSB of divider and shift it to the right by 1 bit */
 302:../stdperiph/source/stm32f37x_usart.c ****     tmpreg = (divider & (uint16_t)0x000F) >> 1;
 241              		.loc 1 302 0
 242 008e C3F34202 		ubfx	r2, r3, #1, #3
 243              	.LVL39:
 303:../stdperiph/source/stm32f37x_usart.c ****     
 304:../stdperiph/source/stm32f37x_usart.c ****     /* update the divider value */
 305:../stdperiph/source/stm32f37x_usart.c ****     divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 244              		.loc 1 305 0
 245 0092 23F00F03 		bic	r3, r3, #15
 246              	.LVL40:
 247 0096 1B04     		lsls	r3, r3, #16
 248 0098 1B0C     		lsrs	r3, r3, #16
 249 009a 1343     		orrs	r3, r3, r2
 250              	.LVL41:
 251              	.L15:
 306:../stdperiph/source/stm32f37x_usart.c ****   }
 307:../stdperiph/source/stm32f37x_usart.c ****   
 308:../stdperiph/source/stm32f37x_usart.c ****   /* Write to USART BRR */
 309:../stdperiph/source/stm32f37x_usart.c ****   USARTx->BRR = (uint16_t)divider;
 252              		.loc 1 309 0
 253 009c 9BB2     		uxth	r3, r3
 254              	.LVL42:
 255 009e A381     		strh	r3, [r4, #12]	@ movhi
 310:../stdperiph/source/stm32f37x_usart.c **** }
 256              		.loc 1 310 0
 257 00a0 0DB0     		add	sp, sp, #52
 258              	.LCFI3:
 259              		.cfi_def_cfa_offset 12
 260              		@ sp needed
 261 00a2 30BD     		pop	{r4, r5, pc}
 262              	.LVL43:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 11


 263              	.L18:
 264              		.align	2
 265              	.L17:
 266 00a4 00380140 		.word	1073821696
 267 00a8 00440040 		.word	1073759232
 268              		.cfi_endproc
 269              	.LFE112:
 271              		.section	.text.USART_StructInit,"ax",%progbits
 272              		.align	2
 273              		.global	USART_StructInit
 274              		.thumb
 275              		.thumb_func
 277              	USART_StructInit:
 278              	.LFB113:
 311:../stdperiph/source/stm32f37x_usart.c **** 
 312:../stdperiph/source/stm32f37x_usart.c **** /**
 313:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 314:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 315:../stdperiph/source/stm32f37x_usart.c ****   *         which will be initialized.
 316:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 317:../stdperiph/source/stm32f37x_usart.c ****   */
 318:../stdperiph/source/stm32f37x_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 319:../stdperiph/source/stm32f37x_usart.c **** {
 279              		.loc 1 319 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 284              	.LVL44:
 320:../stdperiph/source/stm32f37x_usart.c ****   /* USART_InitStruct members default value */
 321:../stdperiph/source/stm32f37x_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 285              		.loc 1 321 0
 286 0000 4FF41653 		mov	r3, #9600
 287 0004 0360     		str	r3, [r0]
 322:../stdperiph/source/stm32f37x_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 288              		.loc 1 322 0
 289 0006 0023     		movs	r3, #0
 290 0008 4360     		str	r3, [r0, #4]
 323:../stdperiph/source/stm32f37x_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 291              		.loc 1 323 0
 292 000a 8360     		str	r3, [r0, #8]
 324:../stdperiph/source/stm32f37x_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 293              		.loc 1 324 0
 294 000c C360     		str	r3, [r0, #12]
 325:../stdperiph/source/stm32f37x_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 295              		.loc 1 325 0
 296 000e 0C22     		movs	r2, #12
 297 0010 0261     		str	r2, [r0, #16]
 326:../stdperiph/source/stm32f37x_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 298              		.loc 1 326 0
 299 0012 4361     		str	r3, [r0, #20]
 300 0014 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE113:
 304 0016 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 305              		.align	2
 306              		.global	USART_ClockInit
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 12


 307              		.thumb
 308              		.thumb_func
 310              	USART_ClockInit:
 311              	.LFB114:
 327:../stdperiph/source/stm32f37x_usart.c **** }
 328:../stdperiph/source/stm32f37x_usart.c **** 
 329:../stdperiph/source/stm32f37x_usart.c **** /**
 330:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 331:../stdperiph/source/stm32f37x_usart.c ****   *         specified parameters in the USART_ClockInitStruct.
 332:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 333:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 334:../stdperiph/source/stm32f37x_usart.c ****   *         structure that contains the configuration information for the specified 
 335:../stdperiph/source/stm32f37x_usart.c ****   *         USART peripheral.  
 336:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 337:../stdperiph/source/stm32f37x_usart.c ****   */
 338:../stdperiph/source/stm32f37x_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 339:../stdperiph/source/stm32f37x_usart.c **** {
 312              		.loc 1 339 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 317              	.LVL45:
 318 0000 10B4     		push	{r4}
 319              	.LCFI4:
 320              		.cfi_def_cfa_offset 4
 321              		.cfi_offset 4, -4
 322              	.LVL46:
 340:../stdperiph/source/stm32f37x_usart.c ****   uint32_t tmpreg = 0;
 341:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 342:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 343:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 344:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 345:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 346:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 347:../stdperiph/source/stm32f37x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 348:../stdperiph/source/stm32f37x_usart.c ****   tmpreg = USARTx->CR2;
 323              		.loc 1 348 0
 324 0002 4368     		ldr	r3, [r0, #4]
 325              	.LVL47:
 349:../stdperiph/source/stm32f37x_usart.c ****   /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
 350:../stdperiph/source/stm32f37x_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 326              		.loc 1 350 0
 327 0004 23F47064 		bic	r4, r3, #3840
 328              	.LVL48:
 351:../stdperiph/source/stm32f37x_usart.c ****   /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
 352:../stdperiph/source/stm32f37x_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 353:../stdperiph/source/stm32f37x_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 354:../stdperiph/source/stm32f37x_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 355:../stdperiph/source/stm32f37x_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 356:../stdperiph/source/stm32f37x_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 329              		.loc 1 356 0
 330 0008 0A68     		ldr	r2, [r1]
 331 000a 4B68     		ldr	r3, [r1, #4]
 332 000c 1A43     		orrs	r2, r2, r3
 357:../stdperiph/source/stm32f37x_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 333              		.loc 1 357 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 13


 334 000e 8B68     		ldr	r3, [r1, #8]
 356:../stdperiph/source/stm32f37x_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 335              		.loc 1 356 0
 336 0010 1343     		orrs	r3, r3, r2
 337              		.loc 1 357 0
 338 0012 CA68     		ldr	r2, [r1, #12]
 339 0014 1343     		orrs	r3, r3, r2
 356:../stdperiph/source/stm32f37x_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 340              		.loc 1 356 0
 341 0016 2343     		orrs	r3, r3, r4
 342              	.LVL49:
 358:../stdperiph/source/stm32f37x_usart.c ****   /* Write to USART CR2 */
 359:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 = tmpreg;
 343              		.loc 1 359 0
 344 0018 4360     		str	r3, [r0, #4]
 360:../stdperiph/source/stm32f37x_usart.c **** }
 345              		.loc 1 360 0
 346 001a 5DF8044B 		ldr	r4, [sp], #4
 347              	.LCFI5:
 348              		.cfi_restore 4
 349              		.cfi_def_cfa_offset 0
 350 001e 7047     		bx	lr
 351              		.cfi_endproc
 352              	.LFE114:
 354              		.section	.text.USART_ClockStructInit,"ax",%progbits
 355              		.align	2
 356              		.global	USART_ClockStructInit
 357              		.thumb
 358              		.thumb_func
 360              	USART_ClockStructInit:
 361              	.LFB115:
 361:../stdperiph/source/stm32f37x_usart.c **** 
 362:../stdperiph/source/stm32f37x_usart.c **** /**
 363:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 364:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 365:../stdperiph/source/stm32f37x_usart.c ****   *         structure which will be initialized.
 366:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 367:../stdperiph/source/stm32f37x_usart.c ****   */
 368:../stdperiph/source/stm32f37x_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 369:../stdperiph/source/stm32f37x_usart.c **** {
 362              		.loc 1 369 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 367              	.LVL50:
 370:../stdperiph/source/stm32f37x_usart.c ****   /* USART_ClockInitStruct members default value */
 371:../stdperiph/source/stm32f37x_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 368              		.loc 1 371 0
 369 0000 0023     		movs	r3, #0
 370 0002 0360     		str	r3, [r0]
 372:../stdperiph/source/stm32f37x_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 371              		.loc 1 372 0
 372 0004 4360     		str	r3, [r0, #4]
 373:../stdperiph/source/stm32f37x_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 373              		.loc 1 373 0
 374 0006 8360     		str	r3, [r0, #8]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 14


 374:../stdperiph/source/stm32f37x_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 375              		.loc 1 374 0
 376 0008 C360     		str	r3, [r0, #12]
 377 000a 7047     		bx	lr
 378              		.cfi_endproc
 379              	.LFE115:
 381              		.section	.text.USART_Cmd,"ax",%progbits
 382              		.align	2
 383              		.global	USART_Cmd
 384              		.thumb
 385              		.thumb_func
 387              	USART_Cmd:
 388              	.LFB116:
 375:../stdperiph/source/stm32f37x_usart.c **** }
 376:../stdperiph/source/stm32f37x_usart.c **** 
 377:../stdperiph/source/stm32f37x_usart.c **** /**
 378:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 379:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 380:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 381:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 382:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 383:../stdperiph/source/stm32f37x_usart.c ****   */
 384:../stdperiph/source/stm32f37x_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 385:../stdperiph/source/stm32f37x_usart.c **** {
 389              		.loc 1 385 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394              	.LVL51:
 386:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 387:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 388:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 389:../stdperiph/source/stm32f37x_usart.c ****   
 390:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 395              		.loc 1 390 0
 396 0000 21B1     		cbz	r1, .L24
 391:../stdperiph/source/stm32f37x_usart.c ****   {
 392:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 393:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 397              		.loc 1 393 0
 398 0002 0368     		ldr	r3, [r0]
 399 0004 43F00103 		orr	r3, r3, #1
 400 0008 0360     		str	r3, [r0]
 401 000a 7047     		bx	lr
 402              	.L24:
 394:../stdperiph/source/stm32f37x_usart.c ****   }
 395:../stdperiph/source/stm32f37x_usart.c ****   else
 396:../stdperiph/source/stm32f37x_usart.c ****   {
 397:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 398:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 403              		.loc 1 398 0
 404 000c 0368     		ldr	r3, [r0]
 405 000e 23F00103 		bic	r3, r3, #1
 406 0012 0360     		str	r3, [r0]
 407 0014 7047     		bx	lr
 408              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 15


 409              	.LFE116:
 411 0016 00BF     		.section	.text.USART_DirectionModeCmd,"ax",%progbits
 412              		.align	2
 413              		.global	USART_DirectionModeCmd
 414              		.thumb
 415              		.thumb_func
 417              	USART_DirectionModeCmd:
 418              	.LFB117:
 399:../stdperiph/source/stm32f37x_usart.c ****   }
 400:../stdperiph/source/stm32f37x_usart.c **** }
 401:../stdperiph/source/stm32f37x_usart.c **** 
 402:../stdperiph/source/stm32f37x_usart.c **** /**
 403:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's transmitter or receiver.
 404:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 405:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_Direction: specifies the USART direction.
 406:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be any combination of the following values:
 407:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_Mode_Tx: USART Transmitter
 408:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_Mode_Rx: USART Receiver
 409:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USART transfer direction.
 410:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 411:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 412:../stdperiph/source/stm32f37x_usart.c ****   */
 413:../stdperiph/source/stm32f37x_usart.c **** void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState Ne
 414:../stdperiph/source/stm32f37x_usart.c **** {
 419              		.loc 1 414 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424              	.LVL52:
 415:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 416:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 417:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_MODE(USART_DirectionMode));
 418:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 419:../stdperiph/source/stm32f37x_usart.c **** 
 420:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 425              		.loc 1 420 0
 426 0000 1AB1     		cbz	r2, .L27
 421:../stdperiph/source/stm32f37x_usart.c ****   {
 422:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the USART's transfer interface by setting the TE and/or RE bits 
 423:../stdperiph/source/stm32f37x_usart.c ****        in the USART CR1 register */
 424:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 |= USART_DirectionMode;
 427              		.loc 1 424 0
 428 0002 0368     		ldr	r3, [r0]
 429 0004 1943     		orrs	r1, r1, r3
 430              	.LVL53:
 431 0006 0160     		str	r1, [r0]
 432 0008 7047     		bx	lr
 433              	.LVL54:
 434              	.L27:
 425:../stdperiph/source/stm32f37x_usart.c ****   }
 426:../stdperiph/source/stm32f37x_usart.c ****   else
 427:../stdperiph/source/stm32f37x_usart.c ****   {
 428:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the USART's transfer interface by clearing the TE and/or RE bits
 429:../stdperiph/source/stm32f37x_usart.c ****        in the USART CR3 register */
 430:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 435              		.loc 1 430 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 16


 436 000a 0368     		ldr	r3, [r0]
 437 000c 23EA0101 		bic	r1, r3, r1
 438              	.LVL55:
 439 0010 0160     		str	r1, [r0]
 440 0012 7047     		bx	lr
 441              		.cfi_endproc
 442              	.LFE117:
 444              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 445              		.align	2
 446              		.global	USART_OverSampling8Cmd
 447              		.thumb
 448              		.thumb_func
 450              	USART_OverSampling8Cmd:
 451              	.LFB118:
 431:../stdperiph/source/stm32f37x_usart.c ****   }
 432:../stdperiph/source/stm32f37x_usart.c **** }
 433:../stdperiph/source/stm32f37x_usart.c **** 
 434:../stdperiph/source/stm32f37x_usart.c **** /**
 435:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 436:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 437:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 438:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 439:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 440:../stdperiph/source/stm32f37x_usart.c ****   *         in order to have correct baudrate Divider value.
 441:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 442:../stdperiph/source/stm32f37x_usart.c ****   */
 443:../stdperiph/source/stm32f37x_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 444:../stdperiph/source/stm32f37x_usart.c **** {
 452              		.loc 1 444 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457              	.LVL56:
 445:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 446:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 447:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 448:../stdperiph/source/stm32f37x_usart.c ****   
 449:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 458              		.loc 1 449 0
 459 0000 21B1     		cbz	r1, .L30
 450:../stdperiph/source/stm32f37x_usart.c ****   {
 451:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 452:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 460              		.loc 1 452 0
 461 0002 0368     		ldr	r3, [r0]
 462 0004 43F40043 		orr	r3, r3, #32768
 463 0008 0360     		str	r3, [r0]
 464 000a 7047     		bx	lr
 465              	.L30:
 453:../stdperiph/source/stm32f37x_usart.c ****   }
 454:../stdperiph/source/stm32f37x_usart.c ****   else
 455:../stdperiph/source/stm32f37x_usart.c ****   {
 456:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 457:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 466              		.loc 1 457 0
 467 000c 0368     		ldr	r3, [r0]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 17


 468 000e 23F40043 		bic	r3, r3, #32768
 469 0012 0360     		str	r3, [r0]
 470 0014 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE118:
 474 0016 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 475              		.align	2
 476              		.global	USART_OneBitMethodCmd
 477              		.thumb
 478              		.thumb_func
 480              	USART_OneBitMethodCmd:
 481              	.LFB119:
 458:../stdperiph/source/stm32f37x_usart.c ****   }
 459:../stdperiph/source/stm32f37x_usart.c **** }  
 460:../stdperiph/source/stm32f37x_usart.c **** 
 461:../stdperiph/source/stm32f37x_usart.c **** /**
 462:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 463:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 464:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 465:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 466:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.
 467:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 468:../stdperiph/source/stm32f37x_usart.c ****   */
 469:../stdperiph/source/stm32f37x_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 470:../stdperiph/source/stm32f37x_usart.c **** {
 482              		.loc 1 470 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 487              	.LVL57:
 471:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 472:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 473:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 474:../stdperiph/source/stm32f37x_usart.c ****   
 475:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 488              		.loc 1 475 0
 489 0000 21B1     		cbz	r1, .L33
 476:../stdperiph/source/stm32f37x_usart.c ****   {
 477:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 478:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 490              		.loc 1 478 0
 491 0002 8368     		ldr	r3, [r0, #8]
 492 0004 43F40063 		orr	r3, r3, #2048
 493 0008 8360     		str	r3, [r0, #8]
 494 000a 7047     		bx	lr
 495              	.L33:
 479:../stdperiph/source/stm32f37x_usart.c ****   }
 480:../stdperiph/source/stm32f37x_usart.c ****   else
 481:../stdperiph/source/stm32f37x_usart.c ****   {
 482:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 483:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 496              		.loc 1 483 0
 497 000c 8368     		ldr	r3, [r0, #8]
 498 000e 23F40063 		bic	r3, r3, #2048
 499 0012 8360     		str	r3, [r0, #8]
 500 0014 7047     		bx	lr
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 18


 501              		.cfi_endproc
 502              	.LFE119:
 504 0016 00BF     		.section	.text.USART_MSBFirstCmd,"ax",%progbits
 505              		.align	2
 506              		.global	USART_MSBFirstCmd
 507              		.thumb
 508              		.thumb_func
 510              	USART_MSBFirstCmd:
 511              	.LFB120:
 484:../stdperiph/source/stm32f37x_usart.c ****   }
 485:../stdperiph/source/stm32f37x_usart.c **** }
 486:../stdperiph/source/stm32f37x_usart.c **** 
 487:../stdperiph/source/stm32f37x_usart.c **** /**
 488:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's most significant bit first 
 489:../stdperiph/source/stm32f37x_usart.c ****   *         transmitted/received following the start bit.
 490:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 491:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USART most significant bit first
 492:../stdperiph/source/stm32f37x_usart.c ****   *         transmitted/received following the start bit.
 493:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 494:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.
 495:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 496:../stdperiph/source/stm32f37x_usart.c ****   */
 497:../stdperiph/source/stm32f37x_usart.c **** void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 498:../stdperiph/source/stm32f37x_usart.c **** {
 512              		.loc 1 498 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517              	.LVL58:
 499:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 500:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 501:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 502:../stdperiph/source/stm32f37x_usart.c ****   
 503:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 518              		.loc 1 503 0
 519 0000 21B1     		cbz	r1, .L36
 504:../stdperiph/source/stm32f37x_usart.c ****   {
 505:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the most significant bit first transmitted/received following the 
 506:../stdperiph/source/stm32f37x_usart.c ****        start bit by setting the MSBFIRST bit in the CR2 register */
 507:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 |= USART_CR2_MSBFIRST;
 520              		.loc 1 507 0
 521 0002 4368     		ldr	r3, [r0, #4]
 522 0004 43F40023 		orr	r3, r3, #524288
 523 0008 4360     		str	r3, [r0, #4]
 524 000a 7047     		bx	lr
 525              	.L36:
 508:../stdperiph/source/stm32f37x_usart.c ****   }
 509:../stdperiph/source/stm32f37x_usart.c ****   else
 510:../stdperiph/source/stm32f37x_usart.c ****   {
 511:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the most significant bit first transmitted/received following the 
 512:../stdperiph/source/stm32f37x_usart.c ****        start bit by clearing the MSBFIRST bit in the CR2 register */
 513:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 526              		.loc 1 513 0
 527 000c 4368     		ldr	r3, [r0, #4]
 528 000e 23F40023 		bic	r3, r3, #524288
 529 0012 4360     		str	r3, [r0, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 19


 530 0014 7047     		bx	lr
 531              		.cfi_endproc
 532              	.LFE120:
 534 0016 00BF     		.section	.text.USART_DataInvCmd,"ax",%progbits
 535              		.align	2
 536              		.global	USART_DataInvCmd
 537              		.thumb
 538              		.thumb_func
 540              	USART_DataInvCmd:
 541              	.LFB121:
 514:../stdperiph/source/stm32f37x_usart.c ****   }
 515:../stdperiph/source/stm32f37x_usart.c **** }
 516:../stdperiph/source/stm32f37x_usart.c **** 
 517:../stdperiph/source/stm32f37x_usart.c **** /**
 518:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the binary data inversion.
 519:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 520:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new defined levels for the USART data.
 521:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be:
 522:../stdperiph/source/stm32f37x_usart.c ****   *            @arg ENABLE: Logical data from the data register are send/received in negative
 523:../stdperiph/source/stm32f37x_usart.c ****   *                          logic (1=L, 0=H). The parity bit is also inverted.
 524:../stdperiph/source/stm32f37x_usart.c ****   *            @arg DISABLE: Logical data from the data register are send/received in positive
 525:../stdperiph/source/stm32f37x_usart.c ****   *                          logic (1=H, 0=L) 
 526:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.
 527:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 528:../stdperiph/source/stm32f37x_usart.c ****   */
 529:../stdperiph/source/stm32f37x_usart.c **** void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 530:../stdperiph/source/stm32f37x_usart.c **** {
 542              		.loc 1 530 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 547              	.LVL59:
 531:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 532:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 533:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 534:../stdperiph/source/stm32f37x_usart.c **** 
 535:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 548              		.loc 1 535 0
 549 0000 21B1     		cbz	r1, .L39
 536:../stdperiph/source/stm32f37x_usart.c ****   {
 537:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the binary data inversion feature by setting the DATAINV bit in 
 538:../stdperiph/source/stm32f37x_usart.c ****        the CR2 register */
 539:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 |= USART_CR2_DATAINV;
 550              		.loc 1 539 0
 551 0002 4368     		ldr	r3, [r0, #4]
 552 0004 43F48023 		orr	r3, r3, #262144
 553 0008 4360     		str	r3, [r0, #4]
 554 000a 7047     		bx	lr
 555              	.L39:
 540:../stdperiph/source/stm32f37x_usart.c ****   }
 541:../stdperiph/source/stm32f37x_usart.c ****   else
 542:../stdperiph/source/stm32f37x_usart.c ****   {
 543:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the binary data inversion feature by clearing the DATAINV bit in 
 544:../stdperiph/source/stm32f37x_usart.c ****        the CR2 register */
 545:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 556              		.loc 1 545 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 20


 557 000c 4368     		ldr	r3, [r0, #4]
 558 000e 23F48023 		bic	r3, r3, #262144
 559 0012 4360     		str	r3, [r0, #4]
 560 0014 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE121:
 564 0016 00BF     		.section	.text.USART_InvPinCmd,"ax",%progbits
 565              		.align	2
 566              		.global	USART_InvPinCmd
 567              		.thumb
 568              		.thumb_func
 570              	USART_InvPinCmd:
 571              	.LFB122:
 546:../stdperiph/source/stm32f37x_usart.c ****   }
 547:../stdperiph/source/stm32f37x_usart.c **** }
 548:../stdperiph/source/stm32f37x_usart.c **** 
 549:../stdperiph/source/stm32f37x_usart.c **** /**
 550:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the Pin(s) active level inversion.
 551:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 552:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_InvPin: specifies the USART pin(s) to invert.
 553:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be any combination of the following values:
 554:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_InvPin_Tx: USART Tx pin active level inversion.
 555:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_InvPin_Rx: USART Rx pin active level inversion.
 556:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new active level status for the USART pin(s).
 557:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be:
 558:../stdperiph/source/stm32f37x_usart.c ****   *            @arg ENABLE: pin(s) signal values are inverted (Vdd =0, Gnd =1).
 559:../stdperiph/source/stm32f37x_usart.c ****   *            @arg DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
 560:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 561:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 562:../stdperiph/source/stm32f37x_usart.c ****   */
 563:../stdperiph/source/stm32f37x_usart.c **** void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
 564:../stdperiph/source/stm32f37x_usart.c **** {
 572              		.loc 1 564 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577              	.LVL60:
 565:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 566:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 567:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
 568:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 569:../stdperiph/source/stm32f37x_usart.c **** 
 570:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 578              		.loc 1 570 0
 579 0000 1AB1     		cbz	r2, .L42
 571:../stdperiph/source/stm32f37x_usart.c ****   {
 572:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the active level inversion for selected pins by setting the TXINV 
 573:../stdperiph/source/stm32f37x_usart.c ****        and/or RXINV bits in the USART CR2 register */
 574:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 |= USART_InvPin;
 580              		.loc 1 574 0
 581 0002 4368     		ldr	r3, [r0, #4]
 582 0004 1943     		orrs	r1, r1, r3
 583              	.LVL61:
 584 0006 4160     		str	r1, [r0, #4]
 585 0008 7047     		bx	lr
 586              	.LVL62:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 21


 587              	.L42:
 575:../stdperiph/source/stm32f37x_usart.c ****   }
 576:../stdperiph/source/stm32f37x_usart.c ****   else
 577:../stdperiph/source/stm32f37x_usart.c ****   {
 578:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the active level inversion for selected requests by clearing the 
 579:../stdperiph/source/stm32f37x_usart.c ****        TXINV and/or RXINV bits in the USART CR2 register */
 580:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 &= (uint32_t)~USART_InvPin;
 588              		.loc 1 580 0
 589 000a 4368     		ldr	r3, [r0, #4]
 590 000c 23EA0101 		bic	r1, r3, r1
 591              	.LVL63:
 592 0010 4160     		str	r1, [r0, #4]
 593 0012 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE122:
 597              		.section	.text.USART_SWAPPinCmd,"ax",%progbits
 598              		.align	2
 599              		.global	USART_SWAPPinCmd
 600              		.thumb
 601              		.thumb_func
 603              	USART_SWAPPinCmd:
 604              	.LFB123:
 581:../stdperiph/source/stm32f37x_usart.c ****   }
 582:../stdperiph/source/stm32f37x_usart.c **** }
 583:../stdperiph/source/stm32f37x_usart.c **** 
 584:../stdperiph/source/stm32f37x_usart.c **** /**
 585:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the swap Tx/Rx pins.
 586:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 587:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USARTx TX/RX pins pinout.
 588:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be:
 589:../stdperiph/source/stm32f37x_usart.c ****   *            @arg ENABLE: The TX and RX pins functions are swapped.
 590:../stdperiph/source/stm32f37x_usart.c ****   *            @arg DISABLE: TX/RX pins are used as defined in standard pinout
 591:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.
 592:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 593:../stdperiph/source/stm32f37x_usart.c ****   */
 594:../stdperiph/source/stm32f37x_usart.c **** void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 595:../stdperiph/source/stm32f37x_usart.c **** {
 605              		.loc 1 595 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 610              	.LVL64:
 596:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 597:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 598:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 599:../stdperiph/source/stm32f37x_usart.c **** 
 600:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 611              		.loc 1 600 0
 612 0000 21B1     		cbz	r1, .L45
 601:../stdperiph/source/stm32f37x_usart.c ****   {
 602:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
 603:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 |= USART_CR2_SWAP;
 613              		.loc 1 603 0
 614 0002 4368     		ldr	r3, [r0, #4]
 615 0004 43F40043 		orr	r3, r3, #32768
 616 0008 4360     		str	r3, [r0, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 22


 617 000a 7047     		bx	lr
 618              	.L45:
 604:../stdperiph/source/stm32f37x_usart.c ****   }
 605:../stdperiph/source/stm32f37x_usart.c ****   else
 606:../stdperiph/source/stm32f37x_usart.c ****   {
 607:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
 608:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 619              		.loc 1 608 0
 620 000c 4368     		ldr	r3, [r0, #4]
 621 000e 23F40043 		bic	r3, r3, #32768
 622 0012 4360     		str	r3, [r0, #4]
 623 0014 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE123:
 627 0016 00BF     		.section	.text.USART_ReceiverTimeOutCmd,"ax",%progbits
 628              		.align	2
 629              		.global	USART_ReceiverTimeOutCmd
 630              		.thumb
 631              		.thumb_func
 633              	USART_ReceiverTimeOutCmd:
 634              	.LFB124:
 609:../stdperiph/source/stm32f37x_usart.c ****   }
 610:../stdperiph/source/stm32f37x_usart.c **** }
 611:../stdperiph/source/stm32f37x_usart.c **** 
 612:../stdperiph/source/stm32f37x_usart.c **** /**
 613:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the receiver Time Out feature.
 614:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 615:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USARTx receiver Time Out.
 616:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 617:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 618:../stdperiph/source/stm32f37x_usart.c ****   */
 619:../stdperiph/source/stm32f37x_usart.c **** void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 620:../stdperiph/source/stm32f37x_usart.c **** {
 635              		.loc 1 620 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 640              	.LVL65:
 621:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 622:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 623:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 624:../stdperiph/source/stm32f37x_usart.c **** 
 625:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 641              		.loc 1 625 0
 642 0000 21B1     		cbz	r1, .L48
 626:../stdperiph/source/stm32f37x_usart.c ****   {
 627:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
 628:../stdperiph/source/stm32f37x_usart.c ****        register */
 629:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 |= USART_CR2_RTOEN;
 643              		.loc 1 629 0
 644 0002 4368     		ldr	r3, [r0, #4]
 645 0004 43F40003 		orr	r3, r3, #8388608
 646 0008 4360     		str	r3, [r0, #4]
 647 000a 7047     		bx	lr
 648              	.L48:
 630:../stdperiph/source/stm32f37x_usart.c ****   }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 23


 631:../stdperiph/source/stm32f37x_usart.c ****   else
 632:../stdperiph/source/stm32f37x_usart.c ****   {
 633:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
 634:../stdperiph/source/stm32f37x_usart.c ****        register */
 635:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 649              		.loc 1 635 0
 650 000c 4368     		ldr	r3, [r0, #4]
 651 000e 23F40003 		bic	r3, r3, #8388608
 652 0012 4360     		str	r3, [r0, #4]
 653 0014 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE124:
 657 0016 00BF     		.section	.text.USART_SetReceiverTimeOut,"ax",%progbits
 658              		.align	2
 659              		.global	USART_SetReceiverTimeOut
 660              		.thumb
 661              		.thumb_func
 663              	USART_SetReceiverTimeOut:
 664              	.LFB125:
 636:../stdperiph/source/stm32f37x_usart.c ****   }
 637:../stdperiph/source/stm32f37x_usart.c **** }
 638:../stdperiph/source/stm32f37x_usart.c **** 
 639:../stdperiph/source/stm32f37x_usart.c **** /**
 640:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the receiver Time Out value.
 641:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 642:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
 643:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 644:../stdperiph/source/stm32f37x_usart.c ****   */
 645:../stdperiph/source/stm32f37x_usart.c **** void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
 646:../stdperiph/source/stm32f37x_usart.c **** {    
 665              		.loc 1 646 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670              	.LVL66:
 647:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 648:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 649:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));
 650:../stdperiph/source/stm32f37x_usart.c **** 
 651:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
 652:../stdperiph/source/stm32f37x_usart.c ****      register  */
 653:../stdperiph/source/stm32f37x_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 671              		.loc 1 653 0
 672 0000 4369     		ldr	r3, [r0, #20]
 673 0002 03F07F43 		and	r3, r3, #-16777216
 674 0006 4361     		str	r3, [r0, #20]
 654:../stdperiph/source/stm32f37x_usart.c ****   /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
 655:../stdperiph/source/stm32f37x_usart.c ****      register  */
 656:../stdperiph/source/stm32f37x_usart.c ****   USARTx->RTOR |= USART_ReceiverTimeOut;
 675              		.loc 1 656 0
 676 0008 4369     		ldr	r3, [r0, #20]
 677 000a 1943     		orrs	r1, r1, r3
 678              	.LVL67:
 679 000c 4161     		str	r1, [r0, #20]
 680 000e 7047     		bx	lr
 681              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 24


 682              	.LFE125:
 684              		.section	.text.USART_SetPrescaler,"ax",%progbits
 685              		.align	2
 686              		.global	USART_SetPrescaler
 687              		.thumb
 688              		.thumb_func
 690              	USART_SetPrescaler:
 691              	.LFB126:
 657:../stdperiph/source/stm32f37x_usart.c **** }
 658:../stdperiph/source/stm32f37x_usart.c **** 
 659:../stdperiph/source/stm32f37x_usart.c **** /**
 660:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the system clock prescaler.
 661:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 662:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 663:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 664:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 665:../stdperiph/source/stm32f37x_usart.c ****   */
 666:../stdperiph/source/stm32f37x_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 667:../stdperiph/source/stm32f37x_usart.c **** { 
 692              		.loc 1 667 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696              		@ link register save eliminated.
 697              	.LVL68:
 668:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 669:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 670:../stdperiph/source/stm32f37x_usart.c ****   
 671:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the USART prescaler */
 672:../stdperiph/source/stm32f37x_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 698              		.loc 1 672 0
 699 0000 038A     		ldrh	r3, [r0, #16]
 700 0002 03F47F43 		and	r3, r3, #65280
 701 0006 0382     		strh	r3, [r0, #16]	@ movhi
 673:../stdperiph/source/stm32f37x_usart.c ****   /* Set the USART prescaler */
 674:../stdperiph/source/stm32f37x_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 702              		.loc 1 674 0
 703 0008 038A     		ldrh	r3, [r0, #16]
 704 000a 9BB2     		uxth	r3, r3
 705 000c 1943     		orrs	r1, r1, r3
 706              	.LVL69:
 707 000e 0182     		strh	r1, [r0, #16]	@ movhi
 708 0010 7047     		bx	lr
 709              		.cfi_endproc
 710              	.LFE126:
 712 0012 00BF     		.section	.text.USART_STOPModeCmd,"ax",%progbits
 713              		.align	2
 714              		.global	USART_STOPModeCmd
 715              		.thumb
 716              		.thumb_func
 718              	USART_STOPModeCmd:
 719              	.LFB127:
 675:../stdperiph/source/stm32f37x_usart.c **** }
 676:../stdperiph/source/stm32f37x_usart.c **** 
 677:../stdperiph/source/stm32f37x_usart.c **** /**
 678:../stdperiph/source/stm32f37x_usart.c ****   * @}
 679:../stdperiph/source/stm32f37x_usart.c ****   */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 25


 680:../stdperiph/source/stm32f37x_usart.c **** 
 681:../stdperiph/source/stm32f37x_usart.c **** 
 682:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group2 STOP Mode functions
 683:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   STOP Mode functions
 684:../stdperiph/source/stm32f37x_usart.c ****  *
 685:../stdperiph/source/stm32f37x_usart.c **** @verbatim
 686:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 687:../stdperiph/source/stm32f37x_usart.c ****                         ##### STOP Mode functions #####
 688:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 689:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 690:../stdperiph/source/stm32f37x_usart.c ****          WakeUp from STOP mode.
 691:../stdperiph/source/stm32f37x_usart.c **** 
 692:../stdperiph/source/stm32f37x_usart.c ****     [..] The USART is able to WakeUp from Stop Mode if USART clock is set to HSI
 693:../stdperiph/source/stm32f37x_usart.c ****          or LSI.
 694:../stdperiph/source/stm32f37x_usart.c ****          
 695:../stdperiph/source/stm32f37x_usart.c ****     [..] The WakeUp source is configured by calling USART_StopModeWakeUpSourceConfig()
 696:../stdperiph/source/stm32f37x_usart.c ****          function.
 697:../stdperiph/source/stm32f37x_usart.c ****          
 698:../stdperiph/source/stm32f37x_usart.c ****     [..] After configuring the source of WakeUp and before entering in Stop Mode 
 699:../stdperiph/source/stm32f37x_usart.c ****          USART_STOPModeCmd() function should be called to allow USART WakeUp.
 700:../stdperiph/source/stm32f37x_usart.c ****                            
 701:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
 702:../stdperiph/source/stm32f37x_usart.c ****   * @{
 703:../stdperiph/source/stm32f37x_usart.c ****   */
 704:../stdperiph/source/stm32f37x_usart.c **** 
 705:../stdperiph/source/stm32f37x_usart.c **** /**
 706:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the specified USART peripheral in STOP Mode.
 707:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 708:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USARTx peripheral state in stop mode.
 709:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 710:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called when USART clock is set to HSI or LSE.
 711:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 712:../stdperiph/source/stm32f37x_usart.c ****   */
 713:../stdperiph/source/stm32f37x_usart.c **** void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 714:../stdperiph/source/stm32f37x_usart.c **** {
 720              		.loc 1 714 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724              		@ link register save eliminated.
 725              	.LVL70:
 715:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 716:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 717:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 718:../stdperiph/source/stm32f37x_usart.c ****   
 719:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 726              		.loc 1 719 0
 727 0000 21B1     		cbz	r1, .L53
 720:../stdperiph/source/stm32f37x_usart.c ****   {
 721:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
 722:../stdperiph/source/stm32f37x_usart.c ****        register */
 723:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 |= USART_CR1_UESM;
 728              		.loc 1 723 0
 729 0002 0368     		ldr	r3, [r0]
 730 0004 43F00203 		orr	r3, r3, #2
 731 0008 0360     		str	r3, [r0]
 732 000a 7047     		bx	lr
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 26


 733              	.L53:
 724:../stdperiph/source/stm32f37x_usart.c ****   }
 725:../stdperiph/source/stm32f37x_usart.c ****   else
 726:../stdperiph/source/stm32f37x_usart.c ****   {
 727:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
 728:../stdperiph/source/stm32f37x_usart.c ****        register */
 729:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 734              		.loc 1 729 0
 735 000c 0368     		ldr	r3, [r0]
 736 000e 23F00203 		bic	r3, r3, #2
 737 0012 0360     		str	r3, [r0]
 738 0014 7047     		bx	lr
 739              		.cfi_endproc
 740              	.LFE127:
 742 0016 00BF     		.section	.text.USART_StopModeWakeUpSourceConfig,"ax",%progbits
 743              		.align	2
 744              		.global	USART_StopModeWakeUpSourceConfig
 745              		.thumb
 746              		.thumb_func
 748              	USART_StopModeWakeUpSourceConfig:
 749              	.LFB128:
 730:../stdperiph/source/stm32f37x_usart.c ****   }
 731:../stdperiph/source/stm32f37x_usart.c **** }
 732:../stdperiph/source/stm32f37x_usart.c **** 
 733:../stdperiph/source/stm32f37x_usart.c **** /**
 734:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Selects the USART WakeUp method form stop mode.
 735:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 736:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_WakeUp: specifies the selected USART wakeup method.
 737:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
 738:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_WakeUpSource_AddressMatch: WUF active on address match.
 739:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_WakeUpSource_StartBit: WUF active on Start bit detection.
 740:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_WakeUpSource_RXNE: WUF active on RXNE.
 741:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 742:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 743:../stdperiph/source/stm32f37x_usart.c ****   */
 744:../stdperiph/source/stm32f37x_usart.c **** void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
 745:../stdperiph/source/stm32f37x_usart.c **** {
 750              		.loc 1 745 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755              	.LVL71:
 746:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 747:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 748:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));
 749:../stdperiph/source/stm32f37x_usart.c **** 
 750:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 756              		.loc 1 750 0
 757 0000 8368     		ldr	r3, [r0, #8]
 758 0002 23F44013 		bic	r3, r3, #3145728
 759 0006 8360     		str	r3, [r0, #8]
 751:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 |= USART_WakeUpSource;
 760              		.loc 1 751 0
 761 0008 8368     		ldr	r3, [r0, #8]
 762 000a 1943     		orrs	r1, r1, r3
 763              	.LVL72:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 27


 764 000c 8160     		str	r1, [r0, #8]
 765 000e 7047     		bx	lr
 766              		.cfi_endproc
 767              	.LFE128:
 769              		.section	.text.USART_AutoBaudRateCmd,"ax",%progbits
 770              		.align	2
 771              		.global	USART_AutoBaudRateCmd
 772              		.thumb
 773              		.thumb_func
 775              	USART_AutoBaudRateCmd:
 776              	.LFB129:
 752:../stdperiph/source/stm32f37x_usart.c **** }
 753:../stdperiph/source/stm32f37x_usart.c **** 
 754:../stdperiph/source/stm32f37x_usart.c **** /**
 755:../stdperiph/source/stm32f37x_usart.c ****   * @}
 756:../stdperiph/source/stm32f37x_usart.c ****   */
 757:../stdperiph/source/stm32f37x_usart.c **** 
 758:../stdperiph/source/stm32f37x_usart.c **** 
 759:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group3 AutoBaudRate functions
 760:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   AutoBaudRate functions 
 761:../stdperiph/source/stm32f37x_usart.c ****  *
 762:../stdperiph/source/stm32f37x_usart.c **** @verbatim
 763:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 764:../stdperiph/source/stm32f37x_usart.c ****                        ##### AutoBaudRate functions #####
 765:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 766:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 767:../stdperiph/source/stm32f37x_usart.c ****          the AutoBaudRate detections.
 768:../stdperiph/source/stm32f37x_usart.c ****          
 769:../stdperiph/source/stm32f37x_usart.c ****     [..] Before Enabling AutoBaudRate detection using USART_AutoBaudRateCmd ()
 770:../stdperiph/source/stm32f37x_usart.c ****          The character patterns used to calculate baudrate must be chosen by calling 
 771:../stdperiph/source/stm32f37x_usart.c ****          USART_AutoBaudRateConfig() function. These function take as parameter :
 772:../stdperiph/source/stm32f37x_usart.c ****         (#)USART_AutoBaudRate_StartBit : any character starting with a bit 1.
 773:../stdperiph/source/stm32f37x_usart.c ****         (#)USART_AutoBaudRate_FallingEdge : any character starting with a 10xx bit pattern. 
 774:../stdperiph/source/stm32f37x_usart.c ****                           
 775:../stdperiph/source/stm32f37x_usart.c ****     [..] At any later time, another request for AutoBaudRate detection can be performed
 776:../stdperiph/source/stm32f37x_usart.c ****          using USART_RequestCmd() function.
 777:../stdperiph/source/stm32f37x_usart.c ****          
 778:../stdperiph/source/stm32f37x_usart.c ****     [..] The AutoBaudRate detection is monitored by the status of ABRF flag which indicate
 779:../stdperiph/source/stm32f37x_usart.c ****          that the AutoBaudRate detection is completed. In addition to ABRF flag, the ABRE flag
 780:../stdperiph/source/stm32f37x_usart.c ****          indicate that this procedure is completed without success. USART_GetFlagStatus () 
 781:../stdperiph/source/stm32f37x_usart.c ****          function should be used to monitor the status of these flags.  
 782:../stdperiph/source/stm32f37x_usart.c ****              
 783:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
 784:../stdperiph/source/stm32f37x_usart.c ****   * @{
 785:../stdperiph/source/stm32f37x_usart.c ****   */
 786:../stdperiph/source/stm32f37x_usart.c **** 
 787:../stdperiph/source/stm32f37x_usart.c **** /**
 788:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the Auto Baud Rate.
 789:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 790:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USARTx auto baud rate.
 791:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 792:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 793:../stdperiph/source/stm32f37x_usart.c ****   */
 794:../stdperiph/source/stm32f37x_usart.c **** void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 795:../stdperiph/source/stm32f37x_usart.c **** {
 777              		.loc 1 795 0
 778              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 28


 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              		@ link register save eliminated.
 782              	.LVL73:
 796:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 797:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 798:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 799:../stdperiph/source/stm32f37x_usart.c **** 
 800:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 783              		.loc 1 800 0
 784 0000 21B1     		cbz	r1, .L57
 801:../stdperiph/source/stm32f37x_usart.c ****   {
 802:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
 803:../stdperiph/source/stm32f37x_usart.c ****        register */
 804:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 |= USART_CR2_ABREN;
 785              		.loc 1 804 0
 786 0002 4368     		ldr	r3, [r0, #4]
 787 0004 43F48013 		orr	r3, r3, #1048576
 788 0008 4360     		str	r3, [r0, #4]
 789 000a 7047     		bx	lr
 790              	.L57:
 805:../stdperiph/source/stm32f37x_usart.c ****   }
 806:../stdperiph/source/stm32f37x_usart.c ****   else
 807:../stdperiph/source/stm32f37x_usart.c ****   {
 808:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
 809:../stdperiph/source/stm32f37x_usart.c ****        register */
 810:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 791              		.loc 1 810 0
 792 000c 4368     		ldr	r3, [r0, #4]
 793 000e 23F48013 		bic	r3, r3, #1048576
 794 0012 4360     		str	r3, [r0, #4]
 795 0014 7047     		bx	lr
 796              		.cfi_endproc
 797              	.LFE129:
 799 0016 00BF     		.section	.text.USART_AutoBaudRateConfig,"ax",%progbits
 800              		.align	2
 801              		.global	USART_AutoBaudRateConfig
 802              		.thumb
 803              		.thumb_func
 805              	USART_AutoBaudRateConfig:
 806              	.LFB130:
 811:../stdperiph/source/stm32f37x_usart.c ****   }
 812:../stdperiph/source/stm32f37x_usart.c **** }
 813:../stdperiph/source/stm32f37x_usart.c **** 
 814:../stdperiph/source/stm32f37x_usart.c **** /**
 815:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Selects the USART auto baud rate method.
 816:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 817:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_AutoBaudRate: specifies the selected USART auto baud rate method.
 818:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
 819:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_AutoBaudRate_StartBit: Start Bit duration measurement.
 820:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_AutoBaudRate_FallingEdge: Falling edge to falling edge measurement.
 821:../stdperiph/source/stm32f37x_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function. 
 822:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 823:../stdperiph/source/stm32f37x_usart.c ****   */
 824:../stdperiph/source/stm32f37x_usart.c **** void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
 825:../stdperiph/source/stm32f37x_usart.c **** {
 807              		.loc 1 825 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 29


 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811              		@ link register save eliminated.
 812              	.LVL74:
 826:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 827:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 828:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));
 829:../stdperiph/source/stm32f37x_usart.c **** 
 830:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 813              		.loc 1 830 0
 814 0000 4368     		ldr	r3, [r0, #4]
 815 0002 23F4C003 		bic	r3, r3, #6291456
 816 0006 4360     		str	r3, [r0, #4]
 831:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 |= USART_AutoBaudRate;
 817              		.loc 1 831 0
 818 0008 4368     		ldr	r3, [r0, #4]
 819 000a 1943     		orrs	r1, r1, r3
 820              	.LVL75:
 821 000c 4160     		str	r1, [r0, #4]
 822 000e 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE130:
 826              		.section	.text.USART_SendData,"ax",%progbits
 827              		.align	2
 828              		.global	USART_SendData
 829              		.thumb
 830              		.thumb_func
 832              	USART_SendData:
 833              	.LFB131:
 832:../stdperiph/source/stm32f37x_usart.c **** }
 833:../stdperiph/source/stm32f37x_usart.c **** 
 834:../stdperiph/source/stm32f37x_usart.c **** /**
 835:../stdperiph/source/stm32f37x_usart.c ****   * @}
 836:../stdperiph/source/stm32f37x_usart.c ****   */
 837:../stdperiph/source/stm32f37x_usart.c **** 
 838:../stdperiph/source/stm32f37x_usart.c **** 
 839:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group4 Data transfers functions
 840:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   Data transfers functions 
 841:../stdperiph/source/stm32f37x_usart.c ****  *
 842:../stdperiph/source/stm32f37x_usart.c **** @verbatim
 843:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 844:../stdperiph/source/stm32f37x_usart.c ****                     ##### Data transfers functions #####
 845:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 846:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 847:../stdperiph/source/stm32f37x_usart.c ****          the USART data transfers.
 848:../stdperiph/source/stm32f37x_usart.c ****     [..] During an USART reception, data shifts in least significant bit first 
 849:../stdperiph/source/stm32f37x_usart.c ****          through the RX pin. When a transmission is taking place, a write instruction to 
 850:../stdperiph/source/stm32f37x_usart.c ****          the USART_TDR register stores the data in the shift register.
 851:../stdperiph/source/stm32f37x_usart.c ****     [..] The read access of the USART_RDR register can be done using 
 852:../stdperiph/source/stm32f37x_usart.c ****          the USART_ReceiveData() function and returns the RDR value.
 853:../stdperiph/source/stm32f37x_usart.c ****          Whereas a write access to the USART_TDR can be done using USART_SendData()
 854:../stdperiph/source/stm32f37x_usart.c ****          function and stores the written data into TDR.
 855:../stdperiph/source/stm32f37x_usart.c **** 
 856:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
 857:../stdperiph/source/stm32f37x_usart.c ****   * @{
 858:../stdperiph/source/stm32f37x_usart.c ****   */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 30


 859:../stdperiph/source/stm32f37x_usart.c **** 
 860:../stdperiph/source/stm32f37x_usart.c **** /**
 861:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 862:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 863:../stdperiph/source/stm32f37x_usart.c ****   * @param  Data: the data to transmit.
 864:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 865:../stdperiph/source/stm32f37x_usart.c ****   */
 866:../stdperiph/source/stm32f37x_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 867:../stdperiph/source/stm32f37x_usart.c **** {
 834              		.loc 1 867 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839              	.LVL76:
 868:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 869:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 870:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 871:../stdperiph/source/stm32f37x_usart.c ****     
 872:../stdperiph/source/stm32f37x_usart.c ****   /* Transmit Data */
 873:../stdperiph/source/stm32f37x_usart.c ****   USARTx->TDR = (Data & (uint16_t)0x01FF);
 840              		.loc 1 873 0
 841 0000 C1F30801 		ubfx	r1, r1, #0, #9
 842              	.LVL77:
 843 0004 0185     		strh	r1, [r0, #40]	@ movhi
 844 0006 7047     		bx	lr
 845              		.cfi_endproc
 846              	.LFE131:
 848              		.section	.text.USART_ReceiveData,"ax",%progbits
 849              		.align	2
 850              		.global	USART_ReceiveData
 851              		.thumb
 852              		.thumb_func
 854              	USART_ReceiveData:
 855              	.LFB132:
 874:../stdperiph/source/stm32f37x_usart.c **** }
 875:../stdperiph/source/stm32f37x_usart.c **** 
 876:../stdperiph/source/stm32f37x_usart.c **** /**
 877:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 878:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 879:../stdperiph/source/stm32f37x_usart.c ****   * @retval The received data.
 880:../stdperiph/source/stm32f37x_usart.c ****   */
 881:../stdperiph/source/stm32f37x_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 882:../stdperiph/source/stm32f37x_usart.c **** {
 856              		.loc 1 882 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              		@ link register save eliminated.
 861              	.LVL78:
 883:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 884:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 885:../stdperiph/source/stm32f37x_usart.c ****   
 886:../stdperiph/source/stm32f37x_usart.c ****   /* Receive Data */
 887:../stdperiph/source/stm32f37x_usart.c ****   return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 862              		.loc 1 887 0
 863 0000 808C     		ldrh	r0, [r0, #36]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 31


 864              	.LVL79:
 888:../stdperiph/source/stm32f37x_usart.c **** }
 865              		.loc 1 888 0
 866 0002 C0F30800 		ubfx	r0, r0, #0, #9
 867 0006 7047     		bx	lr
 868              		.cfi_endproc
 869              	.LFE132:
 871              		.section	.text.USART_SetAddress,"ax",%progbits
 872              		.align	2
 873              		.global	USART_SetAddress
 874              		.thumb
 875              		.thumb_func
 877              	USART_SetAddress:
 878              	.LFB133:
 889:../stdperiph/source/stm32f37x_usart.c **** 
 890:../stdperiph/source/stm32f37x_usart.c **** /**
 891:../stdperiph/source/stm32f37x_usart.c ****   * @}
 892:../stdperiph/source/stm32f37x_usart.c ****   */
 893:../stdperiph/source/stm32f37x_usart.c **** 
 894:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group5 MultiProcessor Communication functions
 895:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   Multi-Processor Communication functions 
 896:../stdperiph/source/stm32f37x_usart.c ****  *
 897:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
 898:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 899:../stdperiph/source/stm32f37x_usart.c ****              ##### Multi-Processor Communication functions #####
 900:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
 901:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
 902:../stdperiph/source/stm32f37x_usart.c ****          multiprocessor communication.
 903:../stdperiph/source/stm32f37x_usart.c ****     [..] For instance one of the USARTs can be the master, its TX output is
 904:../stdperiph/source/stm32f37x_usart.c ****          connected to the RX input of the other USART. The others are slaves,
 905:../stdperiph/source/stm32f37x_usart.c ****          their respective TX outputs are logically ANDed together and connected 
 906:../stdperiph/source/stm32f37x_usart.c ****          to the RX input of the master. USART multiprocessor communication is 
 907:../stdperiph/source/stm32f37x_usart.c ****          possible through the following procedure:
 908:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, 
 909:../stdperiph/source/stm32f37x_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
 910:../stdperiph/source/stm32f37x_usart.c ****              using the USART_Init() function.
 911:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
 912:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the wake up methode (USART_WakeUp_IdleLine or 
 913:../stdperiph/source/stm32f37x_usart.c ****              USART_WakeUp_AddressMark) using USART_WakeUpConfig() function only 
 914:../stdperiph/source/stm32f37x_usart.c ****              for the slaves.
 915:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
 916:../stdperiph/source/stm32f37x_usart.c ****          (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() 
 917:../stdperiph/source/stm32f37x_usart.c ****              function.
 918:../stdperiph/source/stm32f37x_usart.c ****     [..] The USART Slave exit from mute mode when receive the wake up condition.
 919:../stdperiph/source/stm32f37x_usart.c **** 
 920:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
 921:../stdperiph/source/stm32f37x_usart.c ****   * @{
 922:../stdperiph/source/stm32f37x_usart.c ****   */
 923:../stdperiph/source/stm32f37x_usart.c **** 
 924:../stdperiph/source/stm32f37x_usart.c **** /**
 925:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the address of the USART node.
 926:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 927:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 928:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 929:../stdperiph/source/stm32f37x_usart.c ****   */
 930:../stdperiph/source/stm32f37x_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 931:../stdperiph/source/stm32f37x_usart.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 32


 879              		.loc 1 931 0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 0
 882              		@ frame_needed = 0, uses_anonymous_args = 0
 883              		@ link register save eliminated.
 884              	.LVL80:
 932:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 933:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 934:../stdperiph/source/stm32f37x_usart.c ****   
 935:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the USART address */
 936:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 885              		.loc 1 936 0
 886 0000 4368     		ldr	r3, [r0, #4]
 887 0002 23F07F43 		bic	r3, r3, #-16777216
 888 0006 4360     		str	r3, [r0, #4]
 937:../stdperiph/source/stm32f37x_usart.c ****   /* Set the USART address node */
 938:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 889              		.loc 1 938 0
 890 0008 4368     		ldr	r3, [r0, #4]
 891 000a 43EA0161 		orr	r1, r3, r1, lsl #24
 892              	.LVL81:
 893 000e 4160     		str	r1, [r0, #4]
 894 0010 7047     		bx	lr
 895              		.cfi_endproc
 896              	.LFE133:
 898 0012 00BF     		.section	.text.USART_MuteModeCmd,"ax",%progbits
 899              		.align	2
 900              		.global	USART_MuteModeCmd
 901              		.thumb
 902              		.thumb_func
 904              	USART_MuteModeCmd:
 905              	.LFB134:
 939:../stdperiph/source/stm32f37x_usart.c **** }
 940:../stdperiph/source/stm32f37x_usart.c **** 
 941:../stdperiph/source/stm32f37x_usart.c **** /**
 942:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's mute mode.
 943:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 944:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USART mute mode.
 945:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 946:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 947:../stdperiph/source/stm32f37x_usart.c ****   */
 948:../stdperiph/source/stm32f37x_usart.c **** void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 949:../stdperiph/source/stm32f37x_usart.c **** {
 906              		.loc 1 949 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              		@ link register save eliminated.
 911              	.LVL82:
 950:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 951:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 952:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 953:../stdperiph/source/stm32f37x_usart.c ****   
 954:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 912              		.loc 1 954 0
 913 0000 21B1     		cbz	r1, .L64
 955:../stdperiph/source/stm32f37x_usart.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 33


 956:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the USART mute mode by setting the MME bit in the CR1 register */
 957:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 |= USART_CR1_MME;
 914              		.loc 1 957 0
 915 0002 0368     		ldr	r3, [r0]
 916 0004 43F40053 		orr	r3, r3, #8192
 917 0008 0360     		str	r3, [r0]
 918 000a 7047     		bx	lr
 919              	.L64:
 958:../stdperiph/source/stm32f37x_usart.c ****   }
 959:../stdperiph/source/stm32f37x_usart.c ****   else
 960:../stdperiph/source/stm32f37x_usart.c ****   {
 961:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
 962:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 920              		.loc 1 962 0
 921 000c 0368     		ldr	r3, [r0]
 922 000e 23F40053 		bic	r3, r3, #8192
 923 0012 0360     		str	r3, [r0]
 924 0014 7047     		bx	lr
 925              		.cfi_endproc
 926              	.LFE134:
 928 0016 00BF     		.section	.text.USART_MuteModeWakeUpConfig,"ax",%progbits
 929              		.align	2
 930              		.global	USART_MuteModeWakeUpConfig
 931              		.thumb
 932              		.thumb_func
 934              	USART_MuteModeWakeUpConfig:
 935              	.LFB135:
 963:../stdperiph/source/stm32f37x_usart.c ****   }
 964:../stdperiph/source/stm32f37x_usart.c **** }
 965:../stdperiph/source/stm32f37x_usart.c **** 
 966:../stdperiph/source/stm32f37x_usart.c **** /**
 967:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Selects the USART WakeUp method from mute mode.
 968:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 969:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 970:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
 971:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 972:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 973:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 974:../stdperiph/source/stm32f37x_usart.c ****   */
 975:../stdperiph/source/stm32f37x_usart.c **** void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
 976:../stdperiph/source/stm32f37x_usart.c **** {
 936              		.loc 1 976 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              		@ link register save eliminated.
 941              	.LVL83:
 977:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 978:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 979:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));
 980:../stdperiph/source/stm32f37x_usart.c **** 
 981:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 942              		.loc 1 981 0
 943 0000 0368     		ldr	r3, [r0]
 944 0002 23F40063 		bic	r3, r3, #2048
 945 0006 0360     		str	r3, [r0]
 982:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 |= USART_WakeUp;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 34


 946              		.loc 1 982 0
 947 0008 0368     		ldr	r3, [r0]
 948 000a 1943     		orrs	r1, r1, r3
 949              	.LVL84:
 950 000c 0160     		str	r1, [r0]
 951 000e 7047     		bx	lr
 952              		.cfi_endproc
 953              	.LFE135:
 955              		.section	.text.USART_AddressDetectionConfig,"ax",%progbits
 956              		.align	2
 957              		.global	USART_AddressDetectionConfig
 958              		.thumb
 959              		.thumb_func
 961              	USART_AddressDetectionConfig:
 962              	.LFB136:
 983:../stdperiph/source/stm32f37x_usart.c **** }
 984:../stdperiph/source/stm32f37x_usart.c **** 
 985:../stdperiph/source/stm32f37x_usart.c **** /**
 986:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Configure the the USART Address detection length.
 987:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 988:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_AddressLength: specifies the USART address length detection.
 989:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
 990:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_AddressLength_4b: 4-bit address length detection 
 991:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_AddressLength_7b: 7-bit address length detection 
 992:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
 993:../stdperiph/source/stm32f37x_usart.c ****   */
 994:../stdperiph/source/stm32f37x_usart.c **** void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
 995:../stdperiph/source/stm32f37x_usart.c **** {
 963              		.loc 1 995 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              		@ link register save eliminated.
 968              	.LVL85:
 996:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
 997:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 998:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));
 999:../stdperiph/source/stm32f37x_usart.c **** 
1000:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 969              		.loc 1 1000 0
 970 0000 4368     		ldr	r3, [r0, #4]
 971 0002 23F01003 		bic	r3, r3, #16
 972 0006 4360     		str	r3, [r0, #4]
1001:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 |= USART_AddressLength;
 973              		.loc 1 1001 0
 974 0008 4368     		ldr	r3, [r0, #4]
 975 000a 1943     		orrs	r1, r1, r3
 976              	.LVL86:
 977 000c 4160     		str	r1, [r0, #4]
 978 000e 7047     		bx	lr
 979              		.cfi_endproc
 980              	.LFE136:
 982              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 983              		.align	2
 984              		.global	USART_LINBreakDetectLengthConfig
 985              		.thumb
 986              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 35


 988              	USART_LINBreakDetectLengthConfig:
 989              	.LFB137:
1002:../stdperiph/source/stm32f37x_usart.c **** }
1003:../stdperiph/source/stm32f37x_usart.c **** 
1004:../stdperiph/source/stm32f37x_usart.c **** /**
1005:../stdperiph/source/stm32f37x_usart.c ****   * @}
1006:../stdperiph/source/stm32f37x_usart.c ****   */
1007:../stdperiph/source/stm32f37x_usart.c **** 
1008:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group6 LIN mode functions
1009:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   LIN mode functions 
1010:../stdperiph/source/stm32f37x_usart.c ****  *
1011:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
1012:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1013:../stdperiph/source/stm32f37x_usart.c ****                        ##### LIN mode functions #####
1014:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1015:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART 
1016:../stdperiph/source/stm32f37x_usart.c ****          LIN Mode communication.
1017:../stdperiph/source/stm32f37x_usart.c ****     [..] In LIN mode, 8-bit data format with 1 stop bit is required in accordance 
1018:../stdperiph/source/stm32f37x_usart.c ****          with the LIN standard.
1019:../stdperiph/source/stm32f37x_usart.c ****     [..] Only this LIN Feature is supported by the USART IP:
1020:../stdperiph/source/stm32f37x_usart.c ****          (+) LIN Master Synchronous Break send capability and LIN slave break 
1021:../stdperiph/source/stm32f37x_usart.c ****              detection capability :  13-bit break generation and 10/11 bit break 
1022:../stdperiph/source/stm32f37x_usart.c ****              detection.
1023:../stdperiph/source/stm32f37x_usart.c ****     [..] USART LIN Master transmitter communication is possible through the 
1024:../stdperiph/source/stm32f37x_usart.c ****          following procedure:
1025:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1026:../stdperiph/source/stm32f37x_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1027:../stdperiph/source/stm32f37x_usart.c ****              using the USART_Init() function.
1028:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1029:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1030:../stdperiph/source/stm32f37x_usart.c ****          (#) Send the break character using USART_SendBreak() function.
1031:../stdperiph/source/stm32f37x_usart.c ****     [..] USART LIN Master receiver communication is possible through the 
1032:../stdperiph/source/stm32f37x_usart.c ****          following procedure:
1033:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1034:../stdperiph/source/stm32f37x_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1035:../stdperiph/source/stm32f37x_usart.c ****              using the USART_Init() function.
1036:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the break detection length 
1037:../stdperiph/source/stm32f37x_usart.c ****              using the USART_LINBreakDetectLengthConfig() function.
1038:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1039:../stdperiph/source/stm32f37x_usart.c ****          -@- In LIN mode, the following bits must be kept cleared:
1040:../stdperiph/source/stm32f37x_usart.c ****              (+@) CLKEN in the USART_CR2 register.
1041:../stdperiph/source/stm32f37x_usart.c ****              (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
1042:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1043:../stdperiph/source/stm32f37x_usart.c **** 
1044:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
1045:../stdperiph/source/stm32f37x_usart.c ****   * @{
1046:../stdperiph/source/stm32f37x_usart.c ****   */
1047:../stdperiph/source/stm32f37x_usart.c **** 
1048:../stdperiph/source/stm32f37x_usart.c **** /**
1049:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the USART LIN Break detection length.
1050:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1051:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
1052:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
1053:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
1054:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
1055:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1056:../stdperiph/source/stm32f37x_usart.c ****   */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 36


1057:../stdperiph/source/stm32f37x_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
1058:../stdperiph/source/stm32f37x_usart.c **** {
 990              		.loc 1 1058 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995              	.LVL87:
1059:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1060:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1061:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
1062:../stdperiph/source/stm32f37x_usart.c **** 
1063:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 996              		.loc 1 1063 0
 997 0000 4368     		ldr	r3, [r0, #4]
 998 0002 23F02003 		bic	r3, r3, #32
 999 0006 4360     		str	r3, [r0, #4]
1064:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1000              		.loc 1 1064 0
 1001 0008 4368     		ldr	r3, [r0, #4]
 1002 000a 1943     		orrs	r1, r1, r3
 1003              	.LVL88:
 1004 000c 4160     		str	r1, [r0, #4]
 1005 000e 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE137:
 1009              		.section	.text.USART_LINCmd,"ax",%progbits
 1010              		.align	2
 1011              		.global	USART_LINCmd
 1012              		.thumb
 1013              		.thumb_func
 1015              	USART_LINCmd:
 1016              	.LFB138:
1065:../stdperiph/source/stm32f37x_usart.c **** }
1066:../stdperiph/source/stm32f37x_usart.c **** 
1067:../stdperiph/source/stm32f37x_usart.c **** /**
1068:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
1069:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1070:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USART LIN mode.
1071:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1072:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1073:../stdperiph/source/stm32f37x_usart.c ****   */
1074:../stdperiph/source/stm32f37x_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1075:../stdperiph/source/stm32f37x_usart.c **** {
 1017              		.loc 1 1075 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022              	.LVL89:
1076:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1077:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1078:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1079:../stdperiph/source/stm32f37x_usart.c **** 
1080:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1023              		.loc 1 1080 0
 1024 0000 21B1     		cbz	r1, .L70
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 37


1081:../stdperiph/source/stm32f37x_usart.c ****   {
1082:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
1083:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1025              		.loc 1 1083 0
 1026 0002 4368     		ldr	r3, [r0, #4]
 1027 0004 43F48043 		orr	r3, r3, #16384
 1028 0008 4360     		str	r3, [r0, #4]
 1029 000a 7047     		bx	lr
 1030              	.L70:
1084:../stdperiph/source/stm32f37x_usart.c ****   }
1085:../stdperiph/source/stm32f37x_usart.c ****   else
1086:../stdperiph/source/stm32f37x_usart.c ****   {
1087:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
1088:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 1031              		.loc 1 1088 0
 1032 000c 4368     		ldr	r3, [r0, #4]
 1033 000e 23F48043 		bic	r3, r3, #16384
 1034 0012 4360     		str	r3, [r0, #4]
 1035 0014 7047     		bx	lr
 1036              		.cfi_endproc
 1037              	.LFE138:
 1039 0016 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1040              		.align	2
 1041              		.global	USART_HalfDuplexCmd
 1042              		.thumb
 1043              		.thumb_func
 1045              	USART_HalfDuplexCmd:
 1046              	.LFB139:
1089:../stdperiph/source/stm32f37x_usart.c ****   }
1090:../stdperiph/source/stm32f37x_usart.c **** }
1091:../stdperiph/source/stm32f37x_usart.c **** 
1092:../stdperiph/source/stm32f37x_usart.c **** /**
1093:../stdperiph/source/stm32f37x_usart.c ****   * @}
1094:../stdperiph/source/stm32f37x_usart.c ****   */
1095:../stdperiph/source/stm32f37x_usart.c **** 
1096:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group7 Halfduplex mode function
1097:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   Half-duplex mode function 
1098:../stdperiph/source/stm32f37x_usart.c ****  *
1099:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
1100:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1101:../stdperiph/source/stm32f37x_usart.c ****                    ##### Half-duplex mode function #####
1102:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1103:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1104:../stdperiph/source/stm32f37x_usart.c ****          Half-duplex communication.
1105:../stdperiph/source/stm32f37x_usart.c ****     [..] The USART can be configured to follow a single-wire half-duplex protocol 
1106:../stdperiph/source/stm32f37x_usart.c ****          where the TX and RX lines are internally connected.
1107:../stdperiph/source/stm32f37x_usart.c ****     [..] USART Half duplex communication is possible through the following procedure:
1108:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
1109:../stdperiph/source/stm32f37x_usart.c ****              or Mode receiver and hardware flow control values using the USART_Init()
1110:../stdperiph/source/stm32f37x_usart.c ****             function.
1111:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
1112:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
1113:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1114:../stdperiph/source/stm32f37x_usart.c ****          -@- The RX pin is no longer used.
1115:../stdperiph/source/stm32f37x_usart.c ****          -@- In Half-duplex mode the following bits must be kept cleared:
1116:../stdperiph/source/stm32f37x_usart.c ****              (+@) LINEN and CLKEN bits in the USART_CR2 register.
1117:../stdperiph/source/stm32f37x_usart.c ****              (+@) SCEN and IREN bits in the USART_CR3 register.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 38


1118:../stdperiph/source/stm32f37x_usart.c **** 
1119:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
1120:../stdperiph/source/stm32f37x_usart.c ****   * @{
1121:../stdperiph/source/stm32f37x_usart.c ****   */
1122:../stdperiph/source/stm32f37x_usart.c **** 
1123:../stdperiph/source/stm32f37x_usart.c **** /**
1124:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
1125:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1126:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the USART Communication.
1127:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1128:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1129:../stdperiph/source/stm32f37x_usart.c ****   */
1130:../stdperiph/source/stm32f37x_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1131:../stdperiph/source/stm32f37x_usart.c **** {
 1047              		.loc 1 1131 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              		@ link register save eliminated.
 1052              	.LVL90:
1132:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1133:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1134:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1135:../stdperiph/source/stm32f37x_usart.c ****   
1136:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1053              		.loc 1 1136 0
 1054 0000 21B1     		cbz	r1, .L73
1137:../stdperiph/source/stm32f37x_usart.c ****   {
1138:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
1139:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1055              		.loc 1 1139 0
 1056 0002 8368     		ldr	r3, [r0, #8]
 1057 0004 43F00803 		orr	r3, r3, #8
 1058 0008 8360     		str	r3, [r0, #8]
 1059 000a 7047     		bx	lr
 1060              	.L73:
1140:../stdperiph/source/stm32f37x_usart.c ****   }
1141:../stdperiph/source/stm32f37x_usart.c ****   else
1142:../stdperiph/source/stm32f37x_usart.c ****   {
1143:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
1144:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 1061              		.loc 1 1144 0
 1062 000c 8368     		ldr	r3, [r0, #8]
 1063 000e 23F00803 		bic	r3, r3, #8
 1064 0012 8360     		str	r3, [r0, #8]
 1065 0014 7047     		bx	lr
 1066              		.cfi_endproc
 1067              	.LFE139:
 1069 0016 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 1070              		.align	2
 1071              		.global	USART_SetGuardTime
 1072              		.thumb
 1073              		.thumb_func
 1075              	USART_SetGuardTime:
 1076              	.LFB140:
1145:../stdperiph/source/stm32f37x_usart.c ****   }
1146:../stdperiph/source/stm32f37x_usart.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 39


1147:../stdperiph/source/stm32f37x_usart.c **** 
1148:../stdperiph/source/stm32f37x_usart.c **** /**
1149:../stdperiph/source/stm32f37x_usart.c ****   * @}
1150:../stdperiph/source/stm32f37x_usart.c ****   */
1151:../stdperiph/source/stm32f37x_usart.c **** 
1152:../stdperiph/source/stm32f37x_usart.c **** 
1153:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group8 Smartcard mode functions
1154:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   Smartcard mode functions 
1155:../stdperiph/source/stm32f37x_usart.c ****  *
1156:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
1157:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1158:../stdperiph/source/stm32f37x_usart.c ****                      ##### Smartcard mode functions #####
1159:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1160:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1161:../stdperiph/source/stm32f37x_usart.c ****          Smartcard communication.
1162:../stdperiph/source/stm32f37x_usart.c ****     [..] The Smartcard interface is designed to support asynchronous protocol 
1163:../stdperiph/source/stm32f37x_usart.c ****          Smartcards as defined in the ISO 7816-3 standard. The USART can provide 
1164:../stdperiph/source/stm32f37x_usart.c ****          a clock to the smartcard through the SCLK output. In smartcard mode, 
1165:../stdperiph/source/stm32f37x_usart.c ****          SCLK is not associated to the communication but is simply derived from 
1166:../stdperiph/source/stm32f37x_usart.c ****          the internal peripheral input clock through a 5-bit prescaler.
1167:../stdperiph/source/stm32f37x_usart.c ****     [..] Smartcard communication is possible through the following procedure:
1168:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the Smartcard Prsecaler using the USART_SetPrescaler() 
1169:../stdperiph/source/stm32f37x_usart.c ****              function.
1170:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() 
1171:../stdperiph/source/stm32f37x_usart.c ****              function.
1172:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the USART clock using the USART_ClockInit() function as following:
1173:../stdperiph/source/stm32f37x_usart.c ****              (++) USART Clock enabled.
1174:../stdperiph/source/stm32f37x_usart.c ****              (++) USART CPOL Low.
1175:../stdperiph/source/stm32f37x_usart.c ****              (++) USART CPHA on first edge.
1176:../stdperiph/source/stm32f37x_usart.c ****              (++) USART Last Bit Clock Enabled.
1177:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the Smartcard interface using the USART_Init() function as 
1178:../stdperiph/source/stm32f37x_usart.c ****              following:
1179:../stdperiph/source/stm32f37x_usart.c ****              (++) Word Length = 9 Bits.
1180:../stdperiph/source/stm32f37x_usart.c ****              (++) 1.5 Stop Bit.
1181:../stdperiph/source/stm32f37x_usart.c ****              (++) Even parity.
1182:../stdperiph/source/stm32f37x_usart.c ****              (++) BaudRate = 12096 baud.
1183:../stdperiph/source/stm32f37x_usart.c ****              (++) Hardware flow control disabled (RTS and CTS signals).
1184:../stdperiph/source/stm32f37x_usart.c ****              (++) Tx and Rx enabled
1185:../stdperiph/source/stm32f37x_usart.c ****          (#) Optionally you can enable the parity error interrupt using 
1186:../stdperiph/source/stm32f37x_usart.c ****              the USART_ITConfig() function.
1187:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
1188:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the Smartcard interface using the USART_SmartCardCmd() function.
1189:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1190:../stdperiph/source/stm32f37x_usart.c ****     [..] 
1191:../stdperiph/source/stm32f37x_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
1192:../stdperiph/source/stm32f37x_usart.c ****     [..] 
1193:../stdperiph/source/stm32f37x_usart.c ****          (@) It is also possible to choose 0.5 stop bit for receiving but it is 
1194:../stdperiph/source/stm32f37x_usart.c ****              recommended to use 1.5 stop bits for both transmitting and receiving 
1195:../stdperiph/source/stm32f37x_usart.c ****              to avoid switching between the two configurations.
1196:../stdperiph/source/stm32f37x_usart.c ****          (@) In smartcard mode, the following bits must be kept cleared:
1197:../stdperiph/source/stm32f37x_usart.c ****              (+@) LINEN bit in the USART_CR2 register.
1198:../stdperiph/source/stm32f37x_usart.c ****              (+@) HDSEL and IREN bits in the USART_CR3 register.
1199:../stdperiph/source/stm32f37x_usart.c **** 
1200:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
1201:../stdperiph/source/stm32f37x_usart.c ****   * @{
1202:../stdperiph/source/stm32f37x_usart.c ****   */
1203:../stdperiph/source/stm32f37x_usart.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 40


1204:../stdperiph/source/stm32f37x_usart.c **** /**
1205:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the specified USART guard time.
1206:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1207:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
1208:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1209:../stdperiph/source/stm32f37x_usart.c ****   */
1210:../stdperiph/source/stm32f37x_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
1211:../stdperiph/source/stm32f37x_usart.c **** {    
 1077              		.loc 1 1211 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 0
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              		@ link register save eliminated.
 1082              	.LVL91:
1212:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1213:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:../stdperiph/source/stm32f37x_usart.c **** 
1215:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the USART Guard time */
1216:../stdperiph/source/stm32f37x_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1083              		.loc 1 1216 0
 1084 0000 038A     		ldrh	r3, [r0, #16]
 1085 0002 DBB2     		uxtb	r3, r3
 1086 0004 0382     		strh	r3, [r0, #16]	@ movhi
1217:../stdperiph/source/stm32f37x_usart.c ****   /* Set the USART guard time */
1218:../stdperiph/source/stm32f37x_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1087              		.loc 1 1218 0
 1088 0006 038A     		ldrh	r3, [r0, #16]
 1089 0008 9BB2     		uxth	r3, r3
 1090 000a 43EA0121 		orr	r1, r3, r1, lsl #8
 1091              	.LVL92:
 1092 000e 0182     		strh	r1, [r0, #16]	@ movhi
 1093 0010 7047     		bx	lr
 1094              		.cfi_endproc
 1095              	.LFE140:
 1097 0012 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1098              		.align	2
 1099              		.global	USART_SmartCardCmd
 1100              		.thumb
 1101              		.thumb_func
 1103              	USART_SmartCardCmd:
 1104              	.LFB141:
1219:../stdperiph/source/stm32f37x_usart.c **** }
1220:../stdperiph/source/stm32f37x_usart.c **** 
1221:../stdperiph/source/stm32f37x_usart.c **** /**
1222:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
1223:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1224:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the Smart Card mode.
1225:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
1226:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1227:../stdperiph/source/stm32f37x_usart.c ****   */
1228:../stdperiph/source/stm32f37x_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1229:../stdperiph/source/stm32f37x_usart.c **** {
 1105              		.loc 1 1229 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 41


 1110              	.LVL93:
1230:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1231:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1232:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1233:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1111              		.loc 1 1233 0
 1112 0000 21B1     		cbz	r1, .L77
1234:../stdperiph/source/stm32f37x_usart.c ****   {
1235:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
1236:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1113              		.loc 1 1236 0
 1114 0002 8368     		ldr	r3, [r0, #8]
 1115 0004 43F02003 		orr	r3, r3, #32
 1116 0008 8360     		str	r3, [r0, #8]
 1117 000a 7047     		bx	lr
 1118              	.L77:
1237:../stdperiph/source/stm32f37x_usart.c ****   }
1238:../stdperiph/source/stm32f37x_usart.c ****   else
1239:../stdperiph/source/stm32f37x_usart.c ****   {
1240:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
1241:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 1119              		.loc 1 1241 0
 1120 000c 8368     		ldr	r3, [r0, #8]
 1121 000e 23F02003 		bic	r3, r3, #32
 1122 0012 8360     		str	r3, [r0, #8]
 1123 0014 7047     		bx	lr
 1124              		.cfi_endproc
 1125              	.LFE141:
 1127 0016 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1128              		.align	2
 1129              		.global	USART_SmartCardNACKCmd
 1130              		.thumb
 1131              		.thumb_func
 1133              	USART_SmartCardNACKCmd:
 1134              	.LFB142:
1242:../stdperiph/source/stm32f37x_usart.c ****   }
1243:../stdperiph/source/stm32f37x_usart.c **** }
1244:../stdperiph/source/stm32f37x_usart.c **** 
1245:../stdperiph/source/stm32f37x_usart.c **** /**
1246:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables NACK transmission.
1247:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1248:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the NACK transmission.
1249:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1250:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1251:../stdperiph/source/stm32f37x_usart.c ****   */
1252:../stdperiph/source/stm32f37x_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1253:../stdperiph/source/stm32f37x_usart.c **** {
 1135              		.loc 1 1253 0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 0
 1138              		@ frame_needed = 0, uses_anonymous_args = 0
 1139              		@ link register save eliminated.
 1140              	.LVL94:
1254:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1255:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx)); 
1256:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1257:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 42


 1141              		.loc 1 1257 0
 1142 0000 21B1     		cbz	r1, .L80
1258:../stdperiph/source/stm32f37x_usart.c ****   {
1259:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
1260:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1143              		.loc 1 1260 0
 1144 0002 8368     		ldr	r3, [r0, #8]
 1145 0004 43F01003 		orr	r3, r3, #16
 1146 0008 8360     		str	r3, [r0, #8]
 1147 000a 7047     		bx	lr
 1148              	.L80:
1261:../stdperiph/source/stm32f37x_usart.c ****   }
1262:../stdperiph/source/stm32f37x_usart.c ****   else
1263:../stdperiph/source/stm32f37x_usart.c ****   {
1264:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
1265:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 1149              		.loc 1 1265 0
 1150 000c 8368     		ldr	r3, [r0, #8]
 1151 000e 23F01003 		bic	r3, r3, #16
 1152 0012 8360     		str	r3, [r0, #8]
 1153 0014 7047     		bx	lr
 1154              		.cfi_endproc
 1155              	.LFE142:
 1157 0016 00BF     		.section	.text.USART_SetAutoRetryCount,"ax",%progbits
 1158              		.align	2
 1159              		.global	USART_SetAutoRetryCount
 1160              		.thumb
 1161              		.thumb_func
 1163              	USART_SetAutoRetryCount:
 1164              	.LFB143:
1266:../stdperiph/source/stm32f37x_usart.c ****   }
1267:../stdperiph/source/stm32f37x_usart.c **** }
1268:../stdperiph/source/stm32f37x_usart.c **** 
1269:../stdperiph/source/stm32f37x_usart.c **** /**
1270:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the Smart Card number of retries in transmit and receive.
1271:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1272:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_AutoCount: specifies the Smart Card auto retry count.
1273:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1274:../stdperiph/source/stm32f37x_usart.c ****   */
1275:../stdperiph/source/stm32f37x_usart.c **** void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
1276:../stdperiph/source/stm32f37x_usart.c **** {    
 1165              		.loc 1 1276 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 0
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 1170              	.LVL95:
1277:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1278:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1279:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
1280:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the USART auto retry count */
1281:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 1171              		.loc 1 1281 0
 1172 0000 8368     		ldr	r3, [r0, #8]
 1173 0002 23F46023 		bic	r3, r3, #917504
 1174 0006 8360     		str	r3, [r0, #8]
1282:../stdperiph/source/stm32f37x_usart.c ****   /* Set the USART auto retry count*/
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 43


1283:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 1175              		.loc 1 1283 0
 1176 0008 8368     		ldr	r3, [r0, #8]
 1177 000a 43EA4141 		orr	r1, r3, r1, lsl #17
 1178              	.LVL96:
 1179 000e 8160     		str	r1, [r0, #8]
 1180 0010 7047     		bx	lr
 1181              		.cfi_endproc
 1182              	.LFE143:
 1184 0012 00BF     		.section	.text.USART_SetBlockLength,"ax",%progbits
 1185              		.align	2
 1186              		.global	USART_SetBlockLength
 1187              		.thumb
 1188              		.thumb_func
 1190              	USART_SetBlockLength:
 1191              	.LFB144:
1284:../stdperiph/source/stm32f37x_usart.c **** }
1285:../stdperiph/source/stm32f37x_usart.c **** 
1286:../stdperiph/source/stm32f37x_usart.c **** /**
1287:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the Smart Card Block length.
1288:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1289:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_BlockLength: specifies the Smart Card block length.
1290:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1291:../stdperiph/source/stm32f37x_usart.c ****   */
1292:../stdperiph/source/stm32f37x_usart.c **** void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
1293:../stdperiph/source/stm32f37x_usart.c **** {    
 1192              		.loc 1 1293 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 1197              	.LVL97:
1294:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1295:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1296:../stdperiph/source/stm32f37x_usart.c **** 
1297:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the Smart card block length */
1298:../stdperiph/source/stm32f37x_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 1198              		.loc 1 1298 0
 1199 0000 4369     		ldr	r3, [r0, #20]
 1200 0002 23F07F43 		bic	r3, r3, #-16777216
 1201 0006 4361     		str	r3, [r0, #20]
1299:../stdperiph/source/stm32f37x_usart.c ****   /* Set the Smart Card block length */
1300:../stdperiph/source/stm32f37x_usart.c ****   USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 1202              		.loc 1 1300 0
 1203 0008 4369     		ldr	r3, [r0, #20]
 1204 000a 43EA0161 		orr	r1, r3, r1, lsl #24
 1205              	.LVL98:
 1206 000e 4161     		str	r1, [r0, #20]
 1207 0010 7047     		bx	lr
 1208              		.cfi_endproc
 1209              	.LFE144:
 1211 0012 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 1212              		.align	2
 1213              		.global	USART_IrDAConfig
 1214              		.thumb
 1215              		.thumb_func
 1217              	USART_IrDAConfig:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 44


 1218              	.LFB145:
1301:../stdperiph/source/stm32f37x_usart.c **** }
1302:../stdperiph/source/stm32f37x_usart.c **** 
1303:../stdperiph/source/stm32f37x_usart.c **** /**
1304:../stdperiph/source/stm32f37x_usart.c ****   * @}
1305:../stdperiph/source/stm32f37x_usart.c ****   */
1306:../stdperiph/source/stm32f37x_usart.c **** 
1307:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group9 IrDA mode functions
1308:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   IrDA mode functions 
1309:../stdperiph/source/stm32f37x_usart.c ****  *
1310:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
1311:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1312:../stdperiph/source/stm32f37x_usart.c ****                         ##### IrDA mode functions #####
1313:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1314:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1315:../stdperiph/source/stm32f37x_usart.c ****          IrDA communication.
1316:../stdperiph/source/stm32f37x_usart.c ****     [..] IrDA is a half duplex communication protocol. If the Transmitter is busy, 
1317:../stdperiph/source/stm32f37x_usart.c ****          any data on the IrDA receive line will be ignored by the IrDA decoder 
1318:../stdperiph/source/stm32f37x_usart.c ****          and if the Receiver is busy, data on the TX from the USART to IrDA will 
1319:../stdperiph/source/stm32f37x_usart.c ****          not be encoded by IrDA. While receiving data, transmission should be 
1320:../stdperiph/source/stm32f37x_usart.c ****          avoided as the data to be transmitted could be corrupted.
1321:../stdperiph/source/stm32f37x_usart.c ****     [..] IrDA communication is possible through the following procedure:
1322:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1323:../stdperiph/source/stm32f37x_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1324:../stdperiph/source/stm32f37x_usart.c ****              the USART_Init() function.
1325:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the IrDA pulse width by configuring the prescaler using  
1326:../stdperiph/source/stm32f37x_usart.c ****              the USART_SetPrescaler() function.
1327:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal 
1328:../stdperiph/source/stm32f37x_usart.c ****              mode using the USART_IrDAConfig() function.
1329:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the IrDA using the USART_IrDACmd() function.
1330:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the USART using the USART_Cmd() function.         
1331:../stdperiph/source/stm32f37x_usart.c ****     [..]
1332:../stdperiph/source/stm32f37x_usart.c ****     (@) A pulse of width less than two and greater than one PSC period(s) may or 
1333:../stdperiph/source/stm32f37x_usart.c ****         may not be rejected.
1334:../stdperiph/source/stm32f37x_usart.c ****     (@) The receiver set up time should be managed by software. The IrDA physical 
1335:../stdperiph/source/stm32f37x_usart.c ****         layer specification specifies a minimum of 10 ms delay between 
1336:../stdperiph/source/stm32f37x_usart.c ****         transmission and reception (IrDA is a half duplex protocol).
1337:../stdperiph/source/stm32f37x_usart.c ****     (@) In IrDA mode, the following bits must be kept cleared:
1338:../stdperiph/source/stm32f37x_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1339:../stdperiph/source/stm32f37x_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1340:../stdperiph/source/stm32f37x_usart.c **** 
1341:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
1342:../stdperiph/source/stm32f37x_usart.c ****   * @{
1343:../stdperiph/source/stm32f37x_usart.c ****   */
1344:../stdperiph/source/stm32f37x_usart.c **** 
1345:../stdperiph/source/stm32f37x_usart.c **** /**
1346:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Configures the USART's IrDA interface.
1347:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1348:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1349:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
1350:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IrDAMode_LowPower
1351:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IrDAMode_Normal
1352:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1353:../stdperiph/source/stm32f37x_usart.c ****   */
1354:../stdperiph/source/stm32f37x_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
1355:../stdperiph/source/stm32f37x_usart.c **** {
 1219              		.loc 1 1355 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 45


 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 0
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 1223              		@ link register save eliminated.
 1224              	.LVL99:
1356:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1357:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1358:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1359:../stdperiph/source/stm32f37x_usart.c **** 
1360:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 1225              		.loc 1 1360 0
 1226 0000 8368     		ldr	r3, [r0, #8]
 1227 0002 23F00403 		bic	r3, r3, #4
 1228 0006 8360     		str	r3, [r0, #8]
1361:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1229              		.loc 1 1361 0
 1230 0008 8368     		ldr	r3, [r0, #8]
 1231 000a 1943     		orrs	r1, r1, r3
 1232              	.LVL100:
 1233 000c 8160     		str	r1, [r0, #8]
 1234 000e 7047     		bx	lr
 1235              		.cfi_endproc
 1236              	.LFE145:
 1238              		.section	.text.USART_IrDACmd,"ax",%progbits
 1239              		.align	2
 1240              		.global	USART_IrDACmd
 1241              		.thumb
 1242              		.thumb_func
 1244              	USART_IrDACmd:
 1245              	.LFB146:
1362:../stdperiph/source/stm32f37x_usart.c **** }
1363:../stdperiph/source/stm32f37x_usart.c **** 
1364:../stdperiph/source/stm32f37x_usart.c **** /**
1365:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1366:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1367:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the IrDA mode.
1368:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1369:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1370:../stdperiph/source/stm32f37x_usart.c ****   */
1371:../stdperiph/source/stm32f37x_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1372:../stdperiph/source/stm32f37x_usart.c **** {
 1246              		.loc 1 1372 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 0
 1249              		@ frame_needed = 0, uses_anonymous_args = 0
 1250              		@ link register save eliminated.
 1251              	.LVL101:
1373:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1374:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1375:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1376:../stdperiph/source/stm32f37x_usart.c **** 
1377:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1252              		.loc 1 1377 0
 1253 0000 21B1     		cbz	r1, .L86
1378:../stdperiph/source/stm32f37x_usart.c ****   {
1379:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1380:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 46


 1254              		.loc 1 1380 0
 1255 0002 8368     		ldr	r3, [r0, #8]
 1256 0004 43F00203 		orr	r3, r3, #2
 1257 0008 8360     		str	r3, [r0, #8]
 1258 000a 7047     		bx	lr
 1259              	.L86:
1381:../stdperiph/source/stm32f37x_usart.c ****   }
1382:../stdperiph/source/stm32f37x_usart.c ****   else
1383:../stdperiph/source/stm32f37x_usart.c ****   {
1384:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1385:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 1260              		.loc 1 1385 0
 1261 000c 8368     		ldr	r3, [r0, #8]
 1262 000e 23F00203 		bic	r3, r3, #2
 1263 0012 8360     		str	r3, [r0, #8]
 1264 0014 7047     		bx	lr
 1265              		.cfi_endproc
 1266              	.LFE146:
 1268 0016 00BF     		.section	.text.USART_DECmd,"ax",%progbits
 1269              		.align	2
 1270              		.global	USART_DECmd
 1271              		.thumb
 1272              		.thumb_func
 1274              	USART_DECmd:
 1275              	.LFB147:
1386:../stdperiph/source/stm32f37x_usart.c ****   }
1387:../stdperiph/source/stm32f37x_usart.c **** }
1388:../stdperiph/source/stm32f37x_usart.c **** /**
1389:../stdperiph/source/stm32f37x_usart.c ****   * @}
1390:../stdperiph/source/stm32f37x_usart.c ****   */
1391:../stdperiph/source/stm32f37x_usart.c **** 
1392:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group10 RS485 mode function
1393:../stdperiph/source/stm32f37x_usart.c ****  *  @brief  RS485 mode function 
1394:../stdperiph/source/stm32f37x_usart.c ****  *
1395:../stdperiph/source/stm32f37x_usart.c **** @verbatim  
1396:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1397:../stdperiph/source/stm32f37x_usart.c ****                         ##### RS485 mode functions #####
1398:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1399:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1400:../stdperiph/source/stm32f37x_usart.c ****          RS485 flow control.
1401:../stdperiph/source/stm32f37x_usart.c ****     [..] RS485 flow control (Driver enable feature) handling is possible through
1402:../stdperiph/source/stm32f37x_usart.c ****          the following procedure:
1403:../stdperiph/source/stm32f37x_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1404:../stdperiph/source/stm32f37x_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1405:../stdperiph/source/stm32f37x_usart.c ****              the USART_Init() function.
1406:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the Driver Enable using the USART_DECmd() function.
1407:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the Driver Enable polarity using the USART_DEPolarityConfig()
1408:../stdperiph/source/stm32f37x_usart.c ****              function.
1409:../stdperiph/source/stm32f37x_usart.c ****          (#) Configures the Driver Enable assertion time using USART_SetDEAssertionTime() 
1410:../stdperiph/source/stm32f37x_usart.c ****              function and deassertion time using the USART_SetDEDeassertionTime()
1411:../stdperiph/source/stm32f37x_usart.c ****              function.    
1412:../stdperiph/source/stm32f37x_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1413:../stdperiph/source/stm32f37x_usart.c ****       -@-  
1414:../stdperiph/source/stm32f37x_usart.c ****        (+@) The assertion and dessertion times are expressed in sample time units (1/8 or 
1415:../stdperiph/source/stm32f37x_usart.c ****             1/16 bit time, depending on the oversampling rate).
1416:../stdperiph/source/stm32f37x_usart.c ****        
1417:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 47


1418:../stdperiph/source/stm32f37x_usart.c ****   * @{
1419:../stdperiph/source/stm32f37x_usart.c ****   */
1420:../stdperiph/source/stm32f37x_usart.c **** 
1421:../stdperiph/source/stm32f37x_usart.c **** /**
1422:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's DE functionality.
1423:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1424:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the driver enable mode.
1425:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
1426:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1427:../stdperiph/source/stm32f37x_usart.c ****   */
1428:../stdperiph/source/stm32f37x_usart.c **** void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
1429:../stdperiph/source/stm32f37x_usart.c **** {
 1276              		.loc 1 1429 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281              	.LVL102:
1430:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1431:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1432:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1433:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1282              		.loc 1 1433 0
 1283 0000 21B1     		cbz	r1, .L89
1434:../stdperiph/source/stm32f37x_usart.c ****   {
1435:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the DE functionality by setting the DEM bit in the CR3 register */
1436:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 |= USART_CR3_DEM;
 1284              		.loc 1 1436 0
 1285 0002 8368     		ldr	r3, [r0, #8]
 1286 0004 43F48043 		orr	r3, r3, #16384
 1287 0008 8360     		str	r3, [r0, #8]
 1288 000a 7047     		bx	lr
 1289              	.L89:
1437:../stdperiph/source/stm32f37x_usart.c ****   }
1438:../stdperiph/source/stm32f37x_usart.c ****   else
1439:../stdperiph/source/stm32f37x_usart.c ****   {
1440:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
1441:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 1290              		.loc 1 1441 0
 1291 000c 8368     		ldr	r3, [r0, #8]
 1292 000e 23F48043 		bic	r3, r3, #16384
 1293 0012 8360     		str	r3, [r0, #8]
 1294 0014 7047     		bx	lr
 1295              		.cfi_endproc
 1296              	.LFE147:
 1298 0016 00BF     		.section	.text.USART_DEPolarityConfig,"ax",%progbits
 1299              		.align	2
 1300              		.global	USART_DEPolarityConfig
 1301              		.thumb
 1302              		.thumb_func
 1304              	USART_DEPolarityConfig:
 1305              	.LFB148:
1442:../stdperiph/source/stm32f37x_usart.c ****   }
1443:../stdperiph/source/stm32f37x_usart.c **** }
1444:../stdperiph/source/stm32f37x_usart.c **** 
1445:../stdperiph/source/stm32f37x_usart.c **** /**
1446:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Configures the USART's DE polarity
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 48


1447:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1448:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_DEPolarity: specifies the DE polarity.
1449:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
1450:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_DEPolarity_Low
1451:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_DEPolarity_High
1452:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1453:../stdperiph/source/stm32f37x_usart.c ****   */
1454:../stdperiph/source/stm32f37x_usart.c **** void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
1455:../stdperiph/source/stm32f37x_usart.c **** {
 1306              		.loc 1 1455 0
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 0
 1309              		@ frame_needed = 0, uses_anonymous_args = 0
 1310              		@ link register save eliminated.
 1311              	.LVL103:
1456:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1457:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1458:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));
1459:../stdperiph/source/stm32f37x_usart.c **** 
1460:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 1312              		.loc 1 1460 0
 1313 0000 8368     		ldr	r3, [r0, #8]
 1314 0002 23F40043 		bic	r3, r3, #32768
 1315 0006 8360     		str	r3, [r0, #8]
1461:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 |= USART_DEPolarity;
 1316              		.loc 1 1461 0
 1317 0008 8368     		ldr	r3, [r0, #8]
 1318 000a 1943     		orrs	r1, r1, r3
 1319              	.LVL104:
 1320 000c 8160     		str	r1, [r0, #8]
 1321 000e 7047     		bx	lr
 1322              		.cfi_endproc
 1323              	.LFE148:
 1325              		.section	.text.USART_SetDEAssertionTime,"ax",%progbits
 1326              		.align	2
 1327              		.global	USART_SetDEAssertionTime
 1328              		.thumb
 1329              		.thumb_func
 1331              	USART_SetDEAssertionTime:
 1332              	.LFB149:
1462:../stdperiph/source/stm32f37x_usart.c **** }
1463:../stdperiph/source/stm32f37x_usart.c **** 
1464:../stdperiph/source/stm32f37x_usart.c **** /**
1465:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the specified RS485 DE assertion time
1466:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1467:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_DEAssertionTime: specifies the time between the activation of
1468:../stdperiph/source/stm32f37x_usart.c ****   *         the DE signal and the beginning of the start bit
1469:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1470:../stdperiph/source/stm32f37x_usart.c ****   */
1471:../stdperiph/source/stm32f37x_usart.c **** void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
1472:../stdperiph/source/stm32f37x_usart.c **** {
 1333              		.loc 1 1472 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 0
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
 1337              		@ link register save eliminated.
 1338              	.LVL105:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 49


1473:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1474:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1475:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 
1476:../stdperiph/source/stm32f37x_usart.c **** 
1477:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the DE assertion time */
1478:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 1339              		.loc 1 1478 0
 1340 0000 0368     		ldr	r3, [r0]
 1341 0002 23F07873 		bic	r3, r3, #65011712
 1342 0006 0360     		str	r3, [r0]
1479:../stdperiph/source/stm32f37x_usart.c ****   /* Set the new value for the DE assertion time */
1480:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 1343              		.loc 1 1480 0
 1344 0008 0368     		ldr	r3, [r0]
 1345 000a 43EA4151 		orr	r1, r3, r1, lsl #21
 1346              	.LVL106:
 1347 000e 0160     		str	r1, [r0]
 1348 0010 7047     		bx	lr
 1349              		.cfi_endproc
 1350              	.LFE149:
 1352 0012 00BF     		.section	.text.USART_SetDEDeassertionTime,"ax",%progbits
 1353              		.align	2
 1354              		.global	USART_SetDEDeassertionTime
 1355              		.thumb
 1356              		.thumb_func
 1358              	USART_SetDEDeassertionTime:
 1359              	.LFB150:
1481:../stdperiph/source/stm32f37x_usart.c **** }
1482:../stdperiph/source/stm32f37x_usart.c **** 
1483:../stdperiph/source/stm32f37x_usart.c **** /**
1484:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Sets the specified RS485 DE deassertion time
1485:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1486:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_DeassertionTime: specifies the time between the middle of the last 
1487:../stdperiph/source/stm32f37x_usart.c ****   *         stop bit in a transmitted message and the de-activation of the DE signal
1488:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1489:../stdperiph/source/stm32f37x_usart.c ****   */
1490:../stdperiph/source/stm32f37x_usart.c **** void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
1491:../stdperiph/source/stm32f37x_usart.c **** {
 1360              		.loc 1 1491 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 1365              	.LVL107:
1492:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1493:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1494:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 
1495:../stdperiph/source/stm32f37x_usart.c **** 
1496:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the DE deassertion time */
1497:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 1366              		.loc 1 1497 0
 1367 0000 0368     		ldr	r3, [r0]
 1368 0002 23F4F813 		bic	r3, r3, #2031616
 1369 0006 0360     		str	r3, [r0]
1498:../stdperiph/source/stm32f37x_usart.c ****   /* Set the new value for the DE deassertion time */
1499:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 1370              		.loc 1 1499 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 50


 1371 0008 0368     		ldr	r3, [r0]
 1372 000a 43EA0141 		orr	r1, r3, r1, lsl #16
 1373              	.LVL108:
 1374 000e 0160     		str	r1, [r0]
 1375 0010 7047     		bx	lr
 1376              		.cfi_endproc
 1377              	.LFE150:
 1379 0012 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1380              		.align	2
 1381              		.global	USART_DMACmd
 1382              		.thumb
 1383              		.thumb_func
 1385              	USART_DMACmd:
 1386              	.LFB151:
1500:../stdperiph/source/stm32f37x_usart.c **** }
1501:../stdperiph/source/stm32f37x_usart.c **** 
1502:../stdperiph/source/stm32f37x_usart.c **** /**
1503:../stdperiph/source/stm32f37x_usart.c ****   * @}
1504:../stdperiph/source/stm32f37x_usart.c ****   */
1505:../stdperiph/source/stm32f37x_usart.c **** 
1506:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group11 DMA transfers management functions
1507:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   DMA transfers management functions
1508:../stdperiph/source/stm32f37x_usart.c ****  *
1509:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
1510:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1511:../stdperiph/source/stm32f37x_usart.c ****                ##### DMA transfers management functions #####
1512:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1513:../stdperiph/source/stm32f37x_usart.c ****     [..] This section provides two functions that can be used only in DMA mode.
1514:../stdperiph/source/stm32f37x_usart.c ****     [..] In DMA Mode, the USART communication can be managed by 2 DMA Channel 
1515:../stdperiph/source/stm32f37x_usart.c ****          requests:
1516:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1517:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1518:../stdperiph/source/stm32f37x_usart.c ****     [..] In this Mode it is advised to use the following function:
1519:../stdperiph/source/stm32f37x_usart.c ****          (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, 
1520:../stdperiph/source/stm32f37x_usart.c ****              FunctionalState NewState).
1521:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
1522:../stdperiph/source/stm32f37x_usart.c ****   * @{
1523:../stdperiph/source/stm32f37x_usart.c ****   */
1524:../stdperiph/source/stm32f37x_usart.c **** 
1525:../stdperiph/source/stm32f37x_usart.c **** /**
1526:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1527:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1528:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1529:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be any combination of the following values:
1530:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1531:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1532:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1533:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1534:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1535:../stdperiph/source/stm32f37x_usart.c ****   */
1536:../stdperiph/source/stm32f37x_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
1537:../stdperiph/source/stm32f37x_usart.c **** {
 1387              		.loc 1 1537 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 0
 1390              		@ frame_needed = 0, uses_anonymous_args = 0
 1391              		@ link register save eliminated.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 51


 1392              	.LVL109:
1538:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1539:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1540:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1541:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1542:../stdperiph/source/stm32f37x_usart.c **** 
1543:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1393              		.loc 1 1543 0
 1394 0000 1AB1     		cbz	r2, .L95
1544:../stdperiph/source/stm32f37x_usart.c ****   {
1545:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1546:../stdperiph/source/stm32f37x_usart.c ****        DMAR bits in the USART CR3 register */
1547:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1395              		.loc 1 1547 0
 1396 0002 8368     		ldr	r3, [r0, #8]
 1397 0004 1943     		orrs	r1, r1, r3
 1398              	.LVL110:
 1399 0006 8160     		str	r1, [r0, #8]
 1400 0008 7047     		bx	lr
 1401              	.LVL111:
 1402              	.L95:
1548:../stdperiph/source/stm32f37x_usart.c ****   }
1549:../stdperiph/source/stm32f37x_usart.c ****   else
1550:../stdperiph/source/stm32f37x_usart.c ****   {
1551:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1552:../stdperiph/source/stm32f37x_usart.c ****        DMAR bits in the USART CR3 register */
1553:../stdperiph/source/stm32f37x_usart.c ****     USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 1403              		.loc 1 1553 0
 1404 000a 8368     		ldr	r3, [r0, #8]
 1405 000c 23EA0101 		bic	r1, r3, r1
 1406              	.LVL112:
 1407 0010 8160     		str	r1, [r0, #8]
 1408 0012 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE151:
 1412              		.section	.text.USART_DMAReceptionErrorConfig,"ax",%progbits
 1413              		.align	2
 1414              		.global	USART_DMAReceptionErrorConfig
 1415              		.thumb
 1416              		.thumb_func
 1418              	USART_DMAReceptionErrorConfig:
 1419              	.LFB152:
1554:../stdperiph/source/stm32f37x_usart.c ****   }
1555:../stdperiph/source/stm32f37x_usart.c **** }
1556:../stdperiph/source/stm32f37x_usart.c **** 
1557:../stdperiph/source/stm32f37x_usart.c **** /**
1558:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's DMA interface when reception error occurs.
1559:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1560:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_DMAOnError: specifies the DMA status in case of reception error.
1561:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be any combination of the following values:
1562:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_DMAOnError_Enable: DMA receive request enabled when the USART DMA  
1563:../stdperiph/source/stm32f37x_usart.c ****   *                                          reception error is asserted.
1564:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
1565:../stdperiph/source/stm32f37x_usart.c ****   *                                           reception error is asserted.
1566:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1567:../stdperiph/source/stm32f37x_usart.c ****   */
1568:../stdperiph/source/stm32f37x_usart.c **** void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 52


1569:../stdperiph/source/stm32f37x_usart.c **** {
 1420              		.loc 1 1569 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424              		@ link register save eliminated.
 1425              	.LVL113:
1570:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1571:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1572:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
1573:../stdperiph/source/stm32f37x_usart.c ****   
1574:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the DMA Reception error detection bit */
1575:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 1426              		.loc 1 1575 0
 1427 0000 8368     		ldr	r3, [r0, #8]
 1428 0002 23F40053 		bic	r3, r3, #8192
 1429 0006 8360     		str	r3, [r0, #8]
1576:../stdperiph/source/stm32f37x_usart.c ****   /* Set the new value for the DMA Reception error detection bit */
1577:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 |= USART_DMAOnError;
 1430              		.loc 1 1577 0
 1431 0008 8368     		ldr	r3, [r0, #8]
 1432 000a 1943     		orrs	r1, r1, r3
 1433              	.LVL114:
 1434 000c 8160     		str	r1, [r0, #8]
 1435 000e 7047     		bx	lr
 1436              		.cfi_endproc
 1437              	.LFE152:
 1439              		.section	.text.USART_ITConfig,"ax",%progbits
 1440              		.align	2
 1441              		.global	USART_ITConfig
 1442              		.thumb
 1443              		.thumb_func
 1445              	USART_ITConfig:
 1446              	.LFB153:
1578:../stdperiph/source/stm32f37x_usart.c **** }
1579:../stdperiph/source/stm32f37x_usart.c **** 
1580:../stdperiph/source/stm32f37x_usart.c **** /**
1581:../stdperiph/source/stm32f37x_usart.c ****   * @}
1582:../stdperiph/source/stm32f37x_usart.c ****   */
1583:../stdperiph/source/stm32f37x_usart.c ****   
1584:../stdperiph/source/stm32f37x_usart.c **** /** @defgroup USART_Group12 Interrupts and flags management functions
1585:../stdperiph/source/stm32f37x_usart.c ****  *  @brief   Interrupts and flags management functions 
1586:../stdperiph/source/stm32f37x_usart.c ****  *
1587:../stdperiph/source/stm32f37x_usart.c **** @verbatim   
1588:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1589:../stdperiph/source/stm32f37x_usart.c ****             ##### Interrupts and flags management functions #####
1590:../stdperiph/source/stm32f37x_usart.c ****  ===============================================================================
1591:../stdperiph/source/stm32f37x_usart.c ****     [..] This subsection provides a set of functions allowing to configure the 
1592:../stdperiph/source/stm32f37x_usart.c ****          USART Interrupts sources, Requests and check or clear the flags or pending bits status. 
1593:../stdperiph/source/stm32f37x_usart.c ****          The user should identify which mode will be used in his application to 
1594:../stdperiph/source/stm32f37x_usart.c ****          manage the communication: Polling mode, Interrupt mode.
1595:../stdperiph/source/stm32f37x_usart.c **** 
1596:../stdperiph/source/stm32f37x_usart.c ****  *** Polling Mode ***
1597:../stdperiph/source/stm32f37x_usart.c ****  ====================
1598:../stdperiph/source/stm32f37x_usart.c ****     [..] In Polling Mode, the SPI communication can be managed by these flags:
1599:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_REACK: to indicate the status of the Receive Enable 
1600:../stdperiph/source/stm32f37x_usart.c ****              acknowledge flag
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 53


1601:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_TEACK: to indicate the status of the Transmit Enable 
1602:../stdperiph/source/stm32f37x_usart.c ****              acknowledge flag.
1603:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_WU: to indicate the status of the Wake up flag.
1604:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_RWU: to indicate the status of the Receive Wake up flag.
1605:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_SBK: to indicate the status of the Send Break flag.
1606:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_CM: to indicate the status of the Character match flag.
1607:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_BUSY: to indicate the status of the Busy flag.
1608:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_ABRF: to indicate the status of the Auto baud rate flag.
1609:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_ABRE: to indicate the status of the Auto baud rate error flag.
1610:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_EOB: to indicate the status of the End of block flag.
1611:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_RTO: to indicate the status of the Receive time out flag.
1612:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_nCTSS: to indicate the status of the Inverted nCTS input 
1613:../stdperiph/source/stm32f37x_usart.c ****              bit status.
1614:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_TXE: to indicate the status of the transmit buffer register.
1615:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_RXNE: to indicate the status of the receive buffer register.
1616:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_TC: to indicate the status of the transmit operation.
1617:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_IDLE: to indicate the status of the Idle Line.
1618:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_CTS: to indicate the status of the nCTS input.
1619:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_LBD: to indicate the status of the LIN break detection.
1620:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_NE: to indicate if a noise error occur.
1621:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_FE: to indicate if a frame error occur.
1622:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_PE: to indicate if a parity error occur.
1623:../stdperiph/source/stm32f37x_usart.c ****          (#) USART_FLAG_ORE: to indicate if an Overrun error occur.
1624:../stdperiph/source/stm32f37x_usart.c ****     [..] In this Mode it is advised to use the following functions:
1625:../stdperiph/source/stm32f37x_usart.c ****          (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1626:../stdperiph/source/stm32f37x_usart.c ****          (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1627:../stdperiph/source/stm32f37x_usart.c **** 
1628:../stdperiph/source/stm32f37x_usart.c ****  *** Interrupt Mode ***
1629:../stdperiph/source/stm32f37x_usart.c ****  ======================
1630:../stdperiph/source/stm32f37x_usart.c ****     [..] In Interrupt Mode, the USART communication can be managed by 8 interrupt 
1631:../stdperiph/source/stm32f37x_usart.c ****          sources and 10 pending bits:
1632:../stdperiph/source/stm32f37x_usart.c ****          (+) Pending Bits:
1633:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_WU: to indicate the status of the Wake up interrupt.
1634:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_CM: to indicate the status of Character match interrupt.
1635:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_EOB: to indicate the status of End of block interrupt.
1636:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_RTO: to indicate the status of Receive time out interrupt.
1637:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_CTS: to indicate the status of CTS change interrupt.
1638:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_LBD: to indicate the status of LIN Break detection interrupt.
1639:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_TC: to indicate the status of Transmission complete interrupt.
1640:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_IDLE: to indicate the status of IDLE line detected interrupt.
1641:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_ORE: to indicate the status of OverRun Error interrupt.
1642:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_NE: to indicate the status of Noise Error interrupt.
1643:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_FE: to indicate the status of Framing Error interrupt.
1644:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_PE: to indicate the status of Parity Error interrupt.  
1645:../stdperiph/source/stm32f37x_usart.c **** 
1646:../stdperiph/source/stm32f37x_usart.c ****          (+) Interrupt Source:
1647:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_WU: specifies the interrupt source for Wake up interrupt.
1648:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_CM: specifies the interrupt source for Character match 
1649:../stdperiph/source/stm32f37x_usart.c ****                   interrupt.
1650:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_EOB: specifies the interrupt source for End of block
1651:../stdperiph/source/stm32f37x_usart.c ****                   interrupt.
1652:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_RTO: specifies the interrupt source for Receive time-out
1653:../stdperiph/source/stm32f37x_usart.c ****                   interrupt.
1654:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_CTS: specifies the interrupt source for CTS change interrupt.
1655:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_LBD: specifies the interrupt source for LIN Break 
1656:../stdperiph/source/stm32f37x_usart.c ****                   detection interrupt.
1657:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_TXE: specifies the interrupt source for Tansmit Data 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 54


1658:../stdperiph/source/stm32f37x_usart.c ****                   Register empty interrupt.
1659:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_TC: specifies the interrupt source for Transmission 
1660:../stdperiph/source/stm32f37x_usart.c ****                   complete interrupt.
1661:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_RXNE: specifies the interrupt source for Receive Data 
1662:../stdperiph/source/stm32f37x_usart.c ****                   register not empty interrupt.
1663:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_IDLE: specifies the interrupt source for Idle line 
1664:../stdperiph/source/stm32f37x_usart.c ****                   detection interrupt.
1665:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_PE: specifies the interrupt source for Parity Error interrupt.
1666:../stdperiph/source/stm32f37x_usart.c ****              (##) USART_IT_ERR: specifies the interrupt source for Error interrupt
1667:../stdperiph/source/stm32f37x_usart.c ****                   (Frame error, noise error, overrun error)
1668:../stdperiph/source/stm32f37x_usart.c ****              -@@- Some parameters are coded in order to use them as interrupt 
1669:../stdperiph/source/stm32f37x_usart.c ****                  source or as pending bits.
1670:../stdperiph/source/stm32f37x_usart.c ****     [..] In this Mode it is advised to use the following functions:
1671:../stdperiph/source/stm32f37x_usart.c ****          (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState
1672:../stdperiph/source/stm32f37x_usart.c ****          (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT).
1673:../stdperiph/source/stm32f37x_usart.c ****          (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT).
1674:../stdperiph/source/stm32f37x_usart.c **** 
1675:../stdperiph/source/stm32f37x_usart.c **** @endverbatim
1676:../stdperiph/source/stm32f37x_usart.c ****   * @{
1677:../stdperiph/source/stm32f37x_usart.c ****   */
1678:../stdperiph/source/stm32f37x_usart.c **** 
1679:../stdperiph/source/stm32f37x_usart.c **** /**
1680:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1681:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1682:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1683:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
1684:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt.
1685:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
1686:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt.
1687:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
1688:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
1689:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt.
1690:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1691:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
1692:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1693:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_IDLE:  Idle line detection interrupt.
1694:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
1695:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1696:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1697:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1698:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1699:../stdperiph/source/stm32f37x_usart.c ****   */
1700:../stdperiph/source/stm32f37x_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
1701:../stdperiph/source/stm32f37x_usart.c **** {
 1447              		.loc 1 1701 0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 0
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451              		@ link register save eliminated.
 1452              	.LVL115:
 1453 0000 30B4     		push	{r4, r5}
 1454              	.LCFI6:
 1455              		.cfi_def_cfa_offset 8
 1456              		.cfi_offset 4, -8
 1457              		.cfi_offset 5, -4
 1458              	.LVL116:
1702:../stdperiph/source/stm32f37x_usart.c ****   uint32_t usartreg = 0, itpos = 0, itmask = 0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 55


1703:../stdperiph/source/stm32f37x_usart.c ****   uint32_t usartxbase = 0;
1704:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1705:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1706:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1707:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1708:../stdperiph/source/stm32f37x_usart.c ****   
1709:../stdperiph/source/stm32f37x_usart.c ****   usartxbase = (uint32_t)USARTx;
1710:../stdperiph/source/stm32f37x_usart.c **** 
1711:../stdperiph/source/stm32f37x_usart.c ****   /* Get the USART register index */
1712:../stdperiph/source/stm32f37x_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1459              		.loc 1 1712 0
 1460 0002 C1F30725 		ubfx	r5, r1, #8, #8
 1461              	.LVL117:
1713:../stdperiph/source/stm32f37x_usart.c **** 
1714:../stdperiph/source/stm32f37x_usart.c ****   /* Get the interrupt position */
1715:../stdperiph/source/stm32f37x_usart.c ****   itpos = USART_IT & IT_MASK;
 1462              		.loc 1 1715 0
 1463 0006 C9B2     		uxtb	r1, r1
 1464              	.LVL118:
1716:../stdperiph/source/stm32f37x_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1465              		.loc 1 1716 0
 1466 0008 0123     		movs	r3, #1
 1467 000a 03FA01F1 		lsl	r1, r3, r1
 1468              	.LVL119:
1717:../stdperiph/source/stm32f37x_usart.c **** 
1718:../stdperiph/source/stm32f37x_usart.c ****   if (usartreg == 0x02) /* The IT is in CR2 register */
 1469              		.loc 1 1718 0
 1470 000e 022D     		cmp	r5, #2
 1471 0010 01D1     		bne	.L99
1719:../stdperiph/source/stm32f37x_usart.c ****   {
1720:../stdperiph/source/stm32f37x_usart.c ****     usartxbase += 0x04;
 1472              		.loc 1 1720 0
 1473 0012 041D     		adds	r4, r0, #4
 1474              	.LVL120:
 1475 0014 04E0     		b	.L100
 1476              	.LVL121:
 1477              	.L99:
 1478 0016 0446     		mov	r4, r0
1721:../stdperiph/source/stm32f37x_usart.c ****   }
1722:../stdperiph/source/stm32f37x_usart.c ****   else if (usartreg == 0x03) /* The IT is in CR3 register */
 1479              		.loc 1 1722 0
 1480 0018 032D     		cmp	r5, #3
 1481 001a 01D1     		bne	.L100
1723:../stdperiph/source/stm32f37x_usart.c ****   {
1724:../stdperiph/source/stm32f37x_usart.c ****     usartxbase += 0x08;
 1482              		.loc 1 1724 0
 1483 001c 00F10804 		add	r4, r0, #8
 1484              	.LVL122:
 1485              	.L100:
1725:../stdperiph/source/stm32f37x_usart.c ****   }
1726:../stdperiph/source/stm32f37x_usart.c ****   else /* The IT is in CR1 register */
1727:../stdperiph/source/stm32f37x_usart.c ****   {
1728:../stdperiph/source/stm32f37x_usart.c ****   }
1729:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1486              		.loc 1 1729 0
 1487 0020 1AB1     		cbz	r2, .L101
1730:../stdperiph/source/stm32f37x_usart.c ****   {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 56


1731:../stdperiph/source/stm32f37x_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1488              		.loc 1 1731 0
 1489 0022 2368     		ldr	r3, [r4]
 1490 0024 1943     		orrs	r1, r1, r3
 1491              	.LVL123:
 1492 0026 2160     		str	r1, [r4]
 1493 0028 03E0     		b	.L98
 1494              	.LVL124:
 1495              	.L101:
1732:../stdperiph/source/stm32f37x_usart.c ****   }
1733:../stdperiph/source/stm32f37x_usart.c ****   else
1734:../stdperiph/source/stm32f37x_usart.c ****   {
1735:../stdperiph/source/stm32f37x_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1496              		.loc 1 1735 0
 1497 002a 2368     		ldr	r3, [r4]
 1498 002c 23EA0101 		bic	r1, r3, r1
 1499              	.LVL125:
 1500 0030 2160     		str	r1, [r4]
 1501              	.L98:
1736:../stdperiph/source/stm32f37x_usart.c ****   }
1737:../stdperiph/source/stm32f37x_usart.c **** }
 1502              		.loc 1 1737 0
 1503 0032 30BC     		pop	{r4, r5}
 1504              	.LCFI7:
 1505              		.cfi_restore 5
 1506              		.cfi_restore 4
 1507              		.cfi_def_cfa_offset 0
 1508              	.LVL126:
 1509 0034 7047     		bx	lr
 1510              		.cfi_endproc
 1511              	.LFE153:
 1513 0036 00BF     		.section	.text.USART_RequestCmd,"ax",%progbits
 1514              		.align	2
 1515              		.global	USART_RequestCmd
 1516              		.thumb
 1517              		.thumb_func
 1519              	USART_RequestCmd:
 1520              	.LFB154:
1738:../stdperiph/source/stm32f37x_usart.c **** 
1739:../stdperiph/source/stm32f37x_usart.c **** /**
1740:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables the specified USART's Request.
1741:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1742:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_Request: specifies the USART request.
1743:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be any combination of the following values:
1744:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_Request_TXFRQ: Transmit data flush ReQuest
1745:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_Request_RXFRQ: Receive data flush ReQuest
1746:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_Request_MMRQ: Mute Mode ReQuest
1747:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_Request_SBKRQ: Send Break ReQuest
1748:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_Request_ABRRQ: Auto Baud Rate ReQuest
1749:../stdperiph/source/stm32f37x_usart.c ****   * @param  NewState: new state of the DMA interface when reception error occurs.
1750:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1751:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1752:../stdperiph/source/stm32f37x_usart.c ****   */
1753:../stdperiph/source/stm32f37x_usart.c **** void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
1754:../stdperiph/source/stm32f37x_usart.c **** {
 1521              		.loc 1 1754 0
 1522              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 57


 1523              		@ args = 0, pretend = 0, frame = 0
 1524              		@ frame_needed = 0, uses_anonymous_args = 0
 1525              		@ link register save eliminated.
 1526              	.LVL127:
1755:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1756:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1757:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_REQUEST(USART_Request));
1758:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1759:../stdperiph/source/stm32f37x_usart.c **** 
1760:../stdperiph/source/stm32f37x_usart.c ****   if (NewState != DISABLE)
 1527              		.loc 1 1760 0
 1528 0000 2AB1     		cbz	r2, .L105
1761:../stdperiph/source/stm32f37x_usart.c ****   {
1762:../stdperiph/source/stm32f37x_usart.c ****     /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
1763:../stdperiph/source/stm32f37x_usart.c ****        register.*/
1764:../stdperiph/source/stm32f37x_usart.c ****     USARTx->RQR |= USART_Request;
 1529              		.loc 1 1764 0
 1530 0002 038B     		ldrh	r3, [r0, #24]
 1531 0004 9BB2     		uxth	r3, r3
 1532 0006 1943     		orrs	r1, r1, r3
 1533              	.LVL128:
 1534 0008 89B2     		uxth	r1, r1
 1535 000a 0183     		strh	r1, [r0, #24]	@ movhi
 1536 000c 7047     		bx	lr
 1537              	.LVL129:
 1538              	.L105:
1765:../stdperiph/source/stm32f37x_usart.c ****   }
1766:../stdperiph/source/stm32f37x_usart.c ****   else
1767:../stdperiph/source/stm32f37x_usart.c ****   {
1768:../stdperiph/source/stm32f37x_usart.c ****     /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
1769:../stdperiph/source/stm32f37x_usart.c ****        register.*/
1770:../stdperiph/source/stm32f37x_usart.c ****     USARTx->RQR &= (uint32_t)~USART_Request;
 1539              		.loc 1 1770 0
 1540 000e 038B     		ldrh	r3, [r0, #24]
 1541 0010 9BB2     		uxth	r3, r3
 1542 0012 23EA0101 		bic	r1, r3, r1
 1543              	.LVL130:
 1544 0016 0183     		strh	r1, [r0, #24]	@ movhi
 1545 0018 7047     		bx	lr
 1546              		.cfi_endproc
 1547              	.LFE154:
 1549 001a 00BF     		.section	.text.USART_OverrunDetectionConfig,"ax",%progbits
 1550              		.align	2
 1551              		.global	USART_OverrunDetectionConfig
 1552              		.thumb
 1553              		.thumb_func
 1555              	USART_OverrunDetectionConfig:
 1556              	.LFB155:
1771:../stdperiph/source/stm32f37x_usart.c ****   }
1772:../stdperiph/source/stm32f37x_usart.c **** }
1773:../stdperiph/source/stm32f37x_usart.c **** 
1774:../stdperiph/source/stm32f37x_usart.c **** /**
1775:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Enables or disables the USART's Overrun detection.
1776:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1777:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_OVRDetection: specifies the OVR detection status in case of OVR error.
1778:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be any combination of the following values:
1779:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_OVRDetection_Enable: OVR error detection enabled when
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 58


1780:../stdperiph/source/stm32f37x_usart.c ****   *                                            the USART OVR error is asserted.
1781:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_OVRDetection_Disable: OVR error detection disabled when
1782:../stdperiph/source/stm32f37x_usart.c ****   *                                             the USART OVR error is asserted.
1783:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1784:../stdperiph/source/stm32f37x_usart.c ****   */
1785:../stdperiph/source/stm32f37x_usart.c **** void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
1786:../stdperiph/source/stm32f37x_usart.c **** {
 1557              		.loc 1 1786 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 0
 1560              		@ frame_needed = 0, uses_anonymous_args = 0
 1561              		@ link register save eliminated.
 1562              	.LVL131:
1787:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1788:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1789:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
1790:../stdperiph/source/stm32f37x_usart.c ****   
1791:../stdperiph/source/stm32f37x_usart.c ****   /* Clear the OVR detection bit */
1792:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 1563              		.loc 1 1792 0
 1564 0000 8368     		ldr	r3, [r0, #8]
 1565 0002 23F48053 		bic	r3, r3, #4096
 1566 0006 8360     		str	r3, [r0, #8]
1793:../stdperiph/source/stm32f37x_usart.c ****   /* Set the new value for the OVR detection bit */
1794:../stdperiph/source/stm32f37x_usart.c ****   USARTx->CR3 |= USART_OVRDetection;
 1567              		.loc 1 1794 0
 1568 0008 8368     		ldr	r3, [r0, #8]
 1569 000a 1943     		orrs	r1, r1, r3
 1570              	.LVL132:
 1571 000c 8160     		str	r1, [r0, #8]
 1572 000e 7047     		bx	lr
 1573              		.cfi_endproc
 1574              	.LFE155:
 1576              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1577              		.align	2
 1578              		.global	USART_GetFlagStatus
 1579              		.thumb
 1580              		.thumb_func
 1582              	USART_GetFlagStatus:
 1583              	.LFB156:
1795:../stdperiph/source/stm32f37x_usart.c **** }
1796:../stdperiph/source/stm32f37x_usart.c **** 
1797:../stdperiph/source/stm32f37x_usart.c **** /**
1798:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1799:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1800:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1801:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
1802:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_REACK:  Receive Enable acknowledge flag.
1803:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_TEACK:  Transmit Enable acknowledge flag.
1804:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_WU:  Wake up flag.
1805:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_RWU:  Receive Wake up flag.
1806:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_SBK:  Send Break flag.
1807:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_CM:  Character match flag.
1808:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_BUSY:  Busy flag.
1809:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_ABRF:  Auto baud rate flag.
1810:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_ABRE:  Auto baud rate error flag.
1811:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_EOB:  End of block flag.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 59


1812:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_RTO:  Receive time out flag.
1813:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_nCTSS:  Inverted nCTS input bit status.
1814:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag.
1815:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1816:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag.
1817:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_TC:  Transmission Complete flag.
1818:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_RXNE:  Receive data register not empty flag.
1819:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_IDLE:  Idle Line detection flag.
1820:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag.
1821:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_NE:  Noise Error flag.
1822:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_FE:  Framing Error flag.
1823:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_PE:  Parity Error flag.
1824:../stdperiph/source/stm32f37x_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1825:../stdperiph/source/stm32f37x_usart.c ****   */
1826:../stdperiph/source/stm32f37x_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1827:../stdperiph/source/stm32f37x_usart.c **** {
 1584              		.loc 1 1827 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 0
 1587              		@ frame_needed = 0, uses_anonymous_args = 0
 1588              		@ link register save eliminated.
 1589              	.LVL133:
1828:../stdperiph/source/stm32f37x_usart.c ****   FlagStatus bitstatus = RESET;
1829:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1830:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1831:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1832:../stdperiph/source/stm32f37x_usart.c ****   
1833:../stdperiph/source/stm32f37x_usart.c ****   if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 1590              		.loc 1 1833 0
 1591 0000 C369     		ldr	r3, [r0, #28]
 1592 0002 0B42     		tst	r3, r1
 1593 0004 01D0     		beq	.L110
1834:../stdperiph/source/stm32f37x_usart.c ****   {
1835:../stdperiph/source/stm32f37x_usart.c ****     bitstatus = SET;
 1594              		.loc 1 1835 0
 1595 0006 0120     		movs	r0, #1
 1596              	.LVL134:
 1597 0008 7047     		bx	lr
 1598              	.LVL135:
 1599              	.L110:
1836:../stdperiph/source/stm32f37x_usart.c ****   }
1837:../stdperiph/source/stm32f37x_usart.c ****   else
1838:../stdperiph/source/stm32f37x_usart.c ****   {
1839:../stdperiph/source/stm32f37x_usart.c ****     bitstatus = RESET;
 1600              		.loc 1 1839 0
 1601 000a 0020     		movs	r0, #0
 1602              	.LVL136:
1840:../stdperiph/source/stm32f37x_usart.c ****   }
1841:../stdperiph/source/stm32f37x_usart.c ****   return bitstatus;
1842:../stdperiph/source/stm32f37x_usart.c **** }
 1603              		.loc 1 1842 0
 1604 000c 7047     		bx	lr
 1605              		.cfi_endproc
 1606              	.LFE156:
 1608 000e 00BF     		.section	.text.USART_ClearFlag,"ax",%progbits
 1609              		.align	2
 1610              		.global	USART_ClearFlag
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 60


 1611              		.thumb
 1612              		.thumb_func
 1614              	USART_ClearFlag:
 1615              	.LFB157:
1843:../stdperiph/source/stm32f37x_usart.c **** 
1844:../stdperiph/source/stm32f37x_usart.c **** /**
1845:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Clears the USARTx's pending flags.
1846:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1847:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1848:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be any combination of the following values:
1849:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_WU:  Wake up flag.
1850:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_CM:  Character match flag.
1851:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_EOB:  End of block flag.
1852:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_RTO:  Receive time out flag.
1853:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag.
1854:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1855:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_TC:  Transmission Complete flag.
1856:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_IDLE:  IDLE line detected flag.
1857:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag.
1858:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_NE: Noise Error flag.
1859:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_FE: Framing Error flag.
1860:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_FLAG_PE:   Parity Errorflag.
1861:../stdperiph/source/stm32f37x_usart.c ****   *   
1862:../stdperiph/source/stm32f37x_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
1863:../stdperiph/source/stm32f37x_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register
1864:../stdperiph/source/stm32f37x_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1865:../stdperiph/source/stm32f37x_usart.c ****   * @note     TC flag can be also cleared by software sequence: a read operation
1866:../stdperiph/source/stm32f37x_usart.c ****   *           to USART_SR register (USART_GetFlagStatus()) followed by a write 
1867:../stdperiph/source/stm32f37x_usart.c ****   *           operation to USART_TDR register (USART_SendData()).
1868:../stdperiph/source/stm32f37x_usart.c ****   * @note     TXE flag is cleared by a write to the USART_TDR register (USART_SendData())
1869:../stdperiph/source/stm32f37x_usart.c ****   *           or by writing 1 to the TXFRQ in the register USART_RQR (USART_RequestCmd()).
1870:../stdperiph/source/stm32f37x_usart.c ****   * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
1871:../stdperiph/source/stm32f37x_usart.c ****   *           (USART_RequestCmd()).
1872:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1873:../stdperiph/source/stm32f37x_usart.c ****   */
1874:../stdperiph/source/stm32f37x_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1875:../stdperiph/source/stm32f37x_usart.c **** {
 1616              		.loc 1 1875 0
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 0
 1619              		@ frame_needed = 0, uses_anonymous_args = 0
 1620              		@ link register save eliminated.
 1621              	.LVL137:
1876:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1877:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1878:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1879:../stdperiph/source/stm32f37x_usart.c ****      
1880:../stdperiph/source/stm32f37x_usart.c ****   USARTx->ICR = USART_FLAG;
 1622              		.loc 1 1880 0
 1623 0000 0162     		str	r1, [r0, #32]
 1624 0002 7047     		bx	lr
 1625              		.cfi_endproc
 1626              	.LFE157:
 1628              		.section	.text.USART_GetITStatus,"ax",%progbits
 1629              		.align	2
 1630              		.global	USART_GetITStatus
 1631              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 61


 1632              		.thumb_func
 1634              	USART_GetITStatus:
 1635              	.LFB158:
1881:../stdperiph/source/stm32f37x_usart.c **** }
1882:../stdperiph/source/stm32f37x_usart.c **** 
1883:../stdperiph/source/stm32f37x_usart.c **** /**
1884:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1885:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1886:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1887:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
1888:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt.
1889:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
1890:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt.
1891:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
1892:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
1893:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt.
1894:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1895:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
1896:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1897:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_IDLE:  Idle line detection interrupt.
1898:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt.
1899:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_NE:  Noise Error interrupt.
1900:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_FE:  Framing Error interrupt.
1901:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
1902:../stdperiph/source/stm32f37x_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1903:../stdperiph/source/stm32f37x_usart.c ****   */
1904:../stdperiph/source/stm32f37x_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
1905:../stdperiph/source/stm32f37x_usart.c **** {
 1636              		.loc 1 1905 0
 1637              		.cfi_startproc
 1638              		@ args = 0, pretend = 0, frame = 0
 1639              		@ frame_needed = 0, uses_anonymous_args = 0
 1640              		@ link register save eliminated.
 1641              	.LVL138:
 1642 0000 10B4     		push	{r4}
 1643              	.LCFI8:
 1644              		.cfi_def_cfa_offset 4
 1645              		.cfi_offset 4, -4
 1646              	.LVL139:
1906:../stdperiph/source/stm32f37x_usart.c ****   uint32_t bitpos = 0, itmask = 0, usartreg = 0;
1907:../stdperiph/source/stm32f37x_usart.c ****   ITStatus bitstatus = RESET;
1908:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1909:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1910:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1911:../stdperiph/source/stm32f37x_usart.c ****   
1912:../stdperiph/source/stm32f37x_usart.c ****   /* Get the USART register index */
1913:../stdperiph/source/stm32f37x_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1647              		.loc 1 1913 0
 1648 0002 C1F30722 		ubfx	r2, r1, #8, #8
 1649              	.LVL140:
1914:../stdperiph/source/stm32f37x_usart.c ****   /* Get the interrupt position */
1915:../stdperiph/source/stm32f37x_usart.c ****   itmask = USART_IT & IT_MASK;
 1650              		.loc 1 1915 0
 1651 0006 CCB2     		uxtb	r4, r1
 1652              	.LVL141:
1916:../stdperiph/source/stm32f37x_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1653              		.loc 1 1916 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 62


 1654 0008 0123     		movs	r3, #1
 1655 000a A340     		lsls	r3, r3, r4
 1656              	.LVL142:
1917:../stdperiph/source/stm32f37x_usart.c ****   
1918:../stdperiph/source/stm32f37x_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1657              		.loc 1 1918 0
 1658 000c 012A     		cmp	r2, #1
 1659 000e 02D1     		bne	.L113
1919:../stdperiph/source/stm32f37x_usart.c ****   {
1920:../stdperiph/source/stm32f37x_usart.c ****     itmask &= USARTx->CR1;
 1660              		.loc 1 1920 0
 1661 0010 0268     		ldr	r2, [r0]
 1662              	.LVL143:
 1663 0012 1340     		ands	r3, r3, r2
 1664              	.LVL144:
 1665 0014 06E0     		b	.L114
 1666              	.LVL145:
 1667              	.L113:
1921:../stdperiph/source/stm32f37x_usart.c ****   }
1922:../stdperiph/source/stm32f37x_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1668              		.loc 1 1922 0
 1669 0016 022A     		cmp	r2, #2
 1670 0018 02D1     		bne	.L115
1923:../stdperiph/source/stm32f37x_usart.c ****   {
1924:../stdperiph/source/stm32f37x_usart.c ****     itmask &= USARTx->CR2;
 1671              		.loc 1 1924 0
 1672 001a 4268     		ldr	r2, [r0, #4]
 1673              	.LVL146:
 1674 001c 1340     		ands	r3, r3, r2
 1675              	.LVL147:
 1676 001e 01E0     		b	.L114
 1677              	.LVL148:
 1678              	.L115:
1925:../stdperiph/source/stm32f37x_usart.c ****   }
1926:../stdperiph/source/stm32f37x_usart.c ****   else /* The IT  is in CR3 register */
1927:../stdperiph/source/stm32f37x_usart.c ****   {
1928:../stdperiph/source/stm32f37x_usart.c ****     itmask &= USARTx->CR3;
 1679              		.loc 1 1928 0
 1680 0020 8268     		ldr	r2, [r0, #8]
 1681              	.LVL149:
 1682 0022 1340     		ands	r3, r3, r2
 1683              	.LVL150:
 1684              	.L114:
1929:../stdperiph/source/stm32f37x_usart.c ****   }
1930:../stdperiph/source/stm32f37x_usart.c ****   
1931:../stdperiph/source/stm32f37x_usart.c ****   bitpos = USART_IT >> 0x10;
 1685              		.loc 1 1931 0
 1686 0024 090C     		lsrs	r1, r1, #16
 1687              	.LVL151:
1932:../stdperiph/source/stm32f37x_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1688              		.loc 1 1932 0
 1689 0026 0122     		movs	r2, #1
 1690 0028 02FA01F1 		lsl	r1, r2, r1
 1691              	.LVL152:
1933:../stdperiph/source/stm32f37x_usart.c ****   bitpos &= USARTx->ISR;
 1692              		.loc 1 1933 0
 1693 002c C269     		ldr	r2, [r0, #28]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 63


 1694 002e 1140     		ands	r1, r1, r2
 1695              	.LVL153:
1934:../stdperiph/source/stm32f37x_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1696              		.loc 1 1934 0
 1697 0030 13B1     		cbz	r3, .L117
 1698              		.loc 1 1934 0 is_stmt 0 discriminator 1
 1699 0032 19B9     		cbnz	r1, .L118
1935:../stdperiph/source/stm32f37x_usart.c ****   {
1936:../stdperiph/source/stm32f37x_usart.c ****     bitstatus = SET;
1937:../stdperiph/source/stm32f37x_usart.c ****   }
1938:../stdperiph/source/stm32f37x_usart.c ****   else
1939:../stdperiph/source/stm32f37x_usart.c ****   {
1940:../stdperiph/source/stm32f37x_usart.c ****     bitstatus = RESET;
 1700              		.loc 1 1940 0 is_stmt 1
 1701 0034 0020     		movs	r0, #0
 1702              	.LVL154:
 1703 0036 02E0     		b	.L116
 1704              	.LVL155:
 1705              	.L117:
 1706 0038 0020     		movs	r0, #0
 1707              	.LVL156:
 1708 003a 00E0     		b	.L116
 1709              	.LVL157:
 1710              	.L118:
1936:../stdperiph/source/stm32f37x_usart.c ****   }
 1711              		.loc 1 1936 0
 1712 003c 0120     		movs	r0, #1
 1713              	.LVL158:
 1714              	.L116:
1941:../stdperiph/source/stm32f37x_usart.c ****   }
1942:../stdperiph/source/stm32f37x_usart.c ****   
1943:../stdperiph/source/stm32f37x_usart.c ****   return bitstatus;  
1944:../stdperiph/source/stm32f37x_usart.c **** }
 1715              		.loc 1 1944 0
 1716 003e 5DF8044B 		ldr	r4, [sp], #4
 1717              	.LCFI9:
 1718              		.cfi_restore 4
 1719              		.cfi_def_cfa_offset 0
 1720 0042 7047     		bx	lr
 1721              		.cfi_endproc
 1722              	.LFE158:
 1724              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1725              		.align	2
 1726              		.global	USART_ClearITPendingBit
 1727              		.thumb
 1728              		.thumb_func
 1730              	USART_ClearITPendingBit:
 1731              	.LFB159:
1945:../stdperiph/source/stm32f37x_usart.c **** 
1946:../stdperiph/source/stm32f37x_usart.c **** /**
1947:../stdperiph/source/stm32f37x_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1948:../stdperiph/source/stm32f37x_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
1949:../stdperiph/source/stm32f37x_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1950:../stdperiph/source/stm32f37x_usart.c ****   *          This parameter can be one of the following values:
1951:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt.
1952:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
1953:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 64


1954:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
1955:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
1956:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt.
1957:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
1958:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_IDLE:  IDLE line detected interrupt.
1959:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt.
1960:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_NE:  Noise Error interrupt.
1961:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_FE:  Framing Error interrupt.
1962:../stdperiph/source/stm32f37x_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
1963:../stdperiph/source/stm32f37x_usart.c ****   *
1964:../stdperiph/source/stm32f37x_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
1965:../stdperiph/source/stm32f37x_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register 
1966:../stdperiph/source/stm32f37x_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1967:../stdperiph/source/stm32f37x_usart.c ****   * @note     TC pending bit can be also cleared by software sequence: a read 
1968:../stdperiph/source/stm32f37x_usart.c ****   *           operation to USART_SR register (USART_GetITStatus()) followed by  
1969:../stdperiph/source/stm32f37x_usart.c ****   *           a write operation to USART_TDR register (USART_SendData()).
1970:../stdperiph/source/stm32f37x_usart.c ****   * @note     TXE pending bit is cleared by a write to the USART_TDR register 
1971:../stdperiph/source/stm32f37x_usart.c ****   *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
1972:../stdperiph/source/stm32f37x_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1973:../stdperiph/source/stm32f37x_usart.c ****   * @retval None
1974:../stdperiph/source/stm32f37x_usart.c ****   */
1975:../stdperiph/source/stm32f37x_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
1976:../stdperiph/source/stm32f37x_usart.c **** {
 1732              		.loc 1 1976 0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736              		@ link register save eliminated.
 1737              	.LVL159:
1977:../stdperiph/source/stm32f37x_usart.c ****   uint32_t bitpos = 0, itmask = 0;
1978:../stdperiph/source/stm32f37x_usart.c ****   /* Check the parameters */
1979:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1980:../stdperiph/source/stm32f37x_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1981:../stdperiph/source/stm32f37x_usart.c ****   
1982:../stdperiph/source/stm32f37x_usart.c ****   bitpos = USART_IT >> 0x10;
 1738              		.loc 1 1982 0
 1739 0000 090C     		lsrs	r1, r1, #16
 1740              	.LVL160:
1983:../stdperiph/source/stm32f37x_usart.c ****   itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 1741              		.loc 1 1983 0
 1742 0002 0123     		movs	r3, #1
 1743 0004 03FA01F1 		lsl	r1, r3, r1
 1744              	.LVL161:
1984:../stdperiph/source/stm32f37x_usart.c ****   USARTx->ICR = (uint32_t)itmask;
 1745              		.loc 1 1984 0
 1746 0008 0162     		str	r1, [r0, #32]
 1747 000a 7047     		bx	lr
 1748              		.cfi_endproc
 1749              	.LFE159:
 1751              		.text
 1752              	.Letext0:
 1753              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 1754              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 1755              		.file 4 "../cmsis/include/stm32f37x.h"
 1756              		.file 5 "../stdperiph/include/stm32f37x_rcc.h"
 1757              		.file 6 "../stdperiph/include/stm32f37x_usart.h"
 1758              		.file 7 "../cmsis/include/core_cm4.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 65


ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 66


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f37x_usart.c
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:22     .text.USART_DeInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:27     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:96     .text.USART_DeInit:00000058 $d
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:103    .text.USART_Init:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:108    .text.USART_Init:00000000 USART_Init
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:266    .text.USART_Init:000000a4 $d
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:272    .text.USART_StructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:277    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:305    .text.USART_ClockInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:310    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:355    .text.USART_ClockStructInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:360    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:382    .text.USART_Cmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:387    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:412    .text.USART_DirectionModeCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:417    .text.USART_DirectionModeCmd:00000000 USART_DirectionModeCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:445    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:450    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:475    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:480    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:505    .text.USART_MSBFirstCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:510    .text.USART_MSBFirstCmd:00000000 USART_MSBFirstCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:535    .text.USART_DataInvCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:540    .text.USART_DataInvCmd:00000000 USART_DataInvCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:565    .text.USART_InvPinCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:570    .text.USART_InvPinCmd:00000000 USART_InvPinCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:598    .text.USART_SWAPPinCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:603    .text.USART_SWAPPinCmd:00000000 USART_SWAPPinCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:628    .text.USART_ReceiverTimeOutCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:633    .text.USART_ReceiverTimeOutCmd:00000000 USART_ReceiverTimeOutCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:658    .text.USART_SetReceiverTimeOut:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:663    .text.USART_SetReceiverTimeOut:00000000 USART_SetReceiverTimeOut
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:685    .text.USART_SetPrescaler:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:690    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:713    .text.USART_STOPModeCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:718    .text.USART_STOPModeCmd:00000000 USART_STOPModeCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:743    .text.USART_StopModeWakeUpSourceConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:748    .text.USART_StopModeWakeUpSourceConfig:00000000 USART_StopModeWakeUpSourceConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:770    .text.USART_AutoBaudRateCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:775    .text.USART_AutoBaudRateCmd:00000000 USART_AutoBaudRateCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:800    .text.USART_AutoBaudRateConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:805    .text.USART_AutoBaudRateConfig:00000000 USART_AutoBaudRateConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:827    .text.USART_SendData:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:832    .text.USART_SendData:00000000 USART_SendData
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:849    .text.USART_ReceiveData:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:854    .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:872    .text.USART_SetAddress:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:877    .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:899    .text.USART_MuteModeCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:904    .text.USART_MuteModeCmd:00000000 USART_MuteModeCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:929    .text.USART_MuteModeWakeUpConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:934    .text.USART_MuteModeWakeUpConfig:00000000 USART_MuteModeWakeUpConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:956    .text.USART_AddressDetectionConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:961    .text.USART_AddressDetectionConfig:00000000 USART_AddressDetectionConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:983    .text.USART_LINBreakDetectLengthConfig:00000000 $t
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s 			page 67


C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:988    .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1010   .text.USART_LINCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1015   .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1040   .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1045   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1070   .text.USART_SetGuardTime:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1075   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1098   .text.USART_SmartCardCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1103   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1128   .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1133   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1158   .text.USART_SetAutoRetryCount:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1163   .text.USART_SetAutoRetryCount:00000000 USART_SetAutoRetryCount
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1185   .text.USART_SetBlockLength:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1190   .text.USART_SetBlockLength:00000000 USART_SetBlockLength
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1212   .text.USART_IrDAConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1217   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1239   .text.USART_IrDACmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1244   .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1269   .text.USART_DECmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1274   .text.USART_DECmd:00000000 USART_DECmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1299   .text.USART_DEPolarityConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1304   .text.USART_DEPolarityConfig:00000000 USART_DEPolarityConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1326   .text.USART_SetDEAssertionTime:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1331   .text.USART_SetDEAssertionTime:00000000 USART_SetDEAssertionTime
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1353   .text.USART_SetDEDeassertionTime:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1358   .text.USART_SetDEDeassertionTime:00000000 USART_SetDEDeassertionTime
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1380   .text.USART_DMACmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1385   .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1413   .text.USART_DMAReceptionErrorConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1418   .text.USART_DMAReceptionErrorConfig:00000000 USART_DMAReceptionErrorConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1440   .text.USART_ITConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1445   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1514   .text.USART_RequestCmd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1519   .text.USART_RequestCmd:00000000 USART_RequestCmd
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1550   .text.USART_OverrunDetectionConfig:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1555   .text.USART_OverrunDetectionConfig:00000000 USART_OverrunDetectionConfig
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1577   .text.USART_GetFlagStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1582   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1609   .text.USART_ClearFlag:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1614   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1629   .text.USART_GetITStatus:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1634   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1725   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccaKNoZI.s:1730   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
